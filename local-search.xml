<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vanassian</title>
    <link href="/2021/08/12/xx/"/>
    <url>/2021/08/12/xx/</url>
    
    <content type="html"><![CDATA[<h1 id="目前菜狗一只"><a href="#目前菜狗一只" class="headerlink" title="目前菜狗一只"></a>目前菜狗一只</h1><p>跪拜绍俊巨巨</p><h1 id="目前任务"><a href="#目前任务" class="headerlink" title="目前任务"></a>目前任务</h1><p>1.软件<br>     - 学习学习单片机，提高调试能力<br>     - 学c++，python<br>     - 学学linux<br>2.硬件<br>     - 学学各种运放<br>     - 画点系统板<br>     - 学学电机相关的知识</p>]]></content>
    
    
    <categories>
      
      <category>无意义狂怒</category>
      
    </categories>
    
    
    <tags>
      
      <tag>菜狗介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言的复习</title>
    <link href="/2021/08/12/C%E8%AF%AD%E8%A8%80/"/>
    <url>/2021/08/12/C%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p>上一次使用C语言已经不知道是什么时候了。。。。。。。<br>感觉大部分语法已经忘得差不多了<br>也应该补一补了<br>就当作学习c++的前置课程吧</p></blockquote><h1 id="第一部分–数据类型"><a href="#第一部分–数据类型" class="headerlink" title="第一部分–数据类型"></a>第一部分–数据类型</h1><p><img src="/img/cjiegou.jpg" alt="数据结构"></p><p>前言：因为半年来一直在写python，再加上我们专业并没有开c语言相关的课程，所以打算进行一些简单的复习，仅供自己食用，各位大佬请略过此篇<br />​</p><p>​<br /><br><a name="WHFN3"></a></p><h1 id="一-基础-主要是复习和python的差异"><a href="#一-基础-主要是复习和python的差异" class="headerlink" title="一.基础(主要是复习和python的差异)"></a>一.基础(主要是复习和python的差异)</h1><ul><li><p>一定一定要写分号，不要老是乱加冒号</p></li><li><p>scanf时要加&amp;</p></li><li><p>出现在scanf中的东西是你一定要输入的东西</p></li><li><p>如果是整型那么计算出来的小数点后的数会被扔掉</p></li><li><p> 对于double类型我们需要输入%lf 输出是%f</p></li><li><p>算商是/取余是%</p></li><li><p>if while不用加：！！！！！！！！！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span>(条件)<br>&#123;<br>...<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>()<br>&#123;<br>...<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>所有的关系运算符的优先级比算数运算的优先级低，但是比赋值运算的高。</p></li><li><p>==和！=的优先级比其他的低，而连续的关系运算是从左向右进行的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">do</span><br>&#123;<br>...<br>&#125;<span class="hljs-keyword">while</span>();<br><br><span class="hljs-comment">//for循环</span><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)<br>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>!非、&amp;&amp;且、||或（python只用一个就够）非的优先级大于且大于或</p></li><li><p>4&lt;x&lt;6这种式子是不合适的</p></li><li><p>逻辑运算如果左边已经能够判断结果了就不会判断</p></li><li><p>m&lt;n ? x : a+5    第一个是判断条件，满足就是x不满足就是x + 5</p></li><li><p>\的使用</p></li><li><p>#define 宏定义</p></li><li><p>&amp;会指向变量的地址</p></li><li><p>*会指向一个变量</p></li></ul><p><a name="EpKDx"></a></p><h1 id="二-c数据类型"><a href="#二-c数据类型" class="headerlink" title="二.c数据类型"></a>二.c数据类型</h1><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th></tr></thead><tbody><tr><td>char</td><td>1 字节</td><td>-128 到 127 或 0 到 255</td></tr><tr><td>unsigned char</td><td>1 字节</td><td>0 到 255</td></tr><tr><td>signed char</td><td>1 字节</td><td>-128 到 127</td></tr><tr><td>int</td><td>2 或 4 字节</td><td>-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned int</td><td>2 或 4 字节</td><td>0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td>short</td><td>2 字节</td><td>-32,768 到 32,767</td></tr><tr><td>unsigned short</td><td>2 字节</td><td>0 到 65,535</td></tr><tr><td>long</td><td>4 字节</td><td>-2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned long</td><td>4 字节</td><td>0 到 4,294,967,295</td></tr></tbody></table><ul><li>获取储存的字节大小可以直接sizeof()<table><thead><tr><th><br />存储大小</th><th>值范围</th><th>精度</th><th></th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td>1.2E-38 到 3.4E+38</td><td>6 位有效位</td></tr><tr><td>double</td><td>8 字节</td><td>2.3E-308 到 1.7E+308</td><td>15 位有效位</td></tr><tr><td>long double</td><td>16 字节</td><td>3.4E-4932 到 1.1E+4932</td><td>19 位有效位</td></tr></tbody></table></li></ul><p>​<br /><br><a name="ThbqG"></a></p><h2 id="void类型"><a href="#void类型" class="headerlink" title="void类型"></a>void类型</h2><table><thead><tr><th><br />类型与描述</th><th></th></tr></thead><tbody><tr><td>1</td><td><strong>函数返回为空</strong><br />C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 <strong>void exit (int status);</strong></td></tr><tr><td>2</td><td><strong>函数参数为空</strong><br />C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 <strong>int rand(void);</strong></td></tr><tr><td>3</td><td><strong>指针指向 void</strong><br />类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 *<em>void <em>malloc( size_t size );</em></em> 返回指向 void 的指针，可以转换为任何数据类型。</td></tr></tbody></table><p><a name="o3jxW"></a></p><h1 id="三-变量"><a href="#三-变量" class="headerlink" title="三.变量"></a>三.变量</h1><ul><li>变量的声明</li><li>变量的声明有两种情况：</li><li>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</li><li>2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。</li><li>除非有extern关键字，否则都是变量的定义。</li></ul><p>​<br /><br><a name="fZusX"></a></p><h1 id="四-C存储类"><a href="#四-C存储类" class="headerlink" title="四.C存储类"></a>四.C存储类</h1><p><a name="dkrmQ"></a></p><h2 id="auto类"><a href="#auto类" class="headerlink" title="auto类"></a>auto类</h2><ul><li><p>auto只能用在函数里，即auto只能修饰局部变量<br><a name="XG1ao"></a></p><h2 id="register类"><a href="#register类" class="headerlink" title="register类"></a>register类</h2></li><li><p><strong>register</strong> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。</p></li><li><p>寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p></li></ul><p>​<br /><br><a name="Ykr6N"></a></p><h2 id="static存储类"><a href="#static存储类" class="headerlink" title="static存储类"></a>static存储类</h2><ul><li><p>static 存储局部变量，在函数中定义了局部变量后，每次调用这个函数时他的值不会被改变。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">/* 函数声明 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br> <br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count=<span class="hljs-number">10</span>;        <span class="hljs-comment">/* 全局变量 - static 是默认的 */</span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">while</span> (count--) &#123;<br>      func1();<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/* &#x27;thingy&#x27; 是 &#x27;func1&#x27; 的局部变量 - 只初始化一次</span><br><span class="hljs-comment"> * 每次调用函数 &#x27;func1&#x27; &#x27;thingy&#x27; 值不会被重置。</span><br><span class="hljs-comment"> */</span>                <br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> thingy=<span class="hljs-number">5</span>;<br>  thingy++;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; thingy 为 %d ， count 为 %d\n&quot;</span>, thingy, count);<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="l8qCH"></a></p><h2 id="extern存储类"><a href="#extern存储类" class="headerlink" title="extern存储类"></a>extern存储类</h2></li><li><p>extern存储的是全局变量，当有多个文件定义了一个可以在其他文件中使用的全局变量或者函数时，可以在其他文件中使用extern来得到已定义的函数或者变量的引用。</p></li></ul><p>​<br /><br><a name="oga3O"></a></p><h1 id="五-位运算"><a href="#五-位运算" class="headerlink" title="五.位运算"></a>五.位运算</h1><ul><li>位运算作用于位，并逐位进行操作。</li><li>假设如果 A = 60，且 B = 13，现在以二进制格式表示，它们如下所示：</li></ul><p>​</p><p>假设如果 A = 60，且 B = 13，现在以二进制格式表示，它们如下所示：<br />A = 0011 1100<br />B = 0000 1101<br />—————–<br />A&amp;B = 0000 1100<br />A|B = 0011 1101<br />A^B = 0011 0001<br />~A  = 1100 0011<br />下表显示了 C 语言支持的位运算符。假设变量 <strong>A</strong> 的值为 60，变量 <strong>B</strong> 的值为 13，则：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与操作，按二进制位进行”与”运算。运算规则：<br />0&amp;0=0;    0&amp;1=0;     1&amp;0=0;      1&amp;1=1;</td><td>(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td></td><td></td><td>按位或运算符，按二进制位进行”或”运算。运算规则：<br />0</td></tr><tr><td>^</td><td>异或运算符，按二进制位进行”异或”运算。运算规则：<br />0^0=0;    0^1=1;    1^0=1;   1^1=0;</td><td>(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td>~</td><td>取反运算符，按二进制位进行”取反”运算。运算规则：<br />~1=-2;    ~0=-1;</td><td>(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。</td></tr><tr><td>&lt;&lt;</td><td>二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</td><td>A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</td><td>A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table><p><a name="yyIEl"></a></p><h1 id="六-作用域"><a href="#六-作用域" class="headerlink" title="六.作用域"></a>六.作用域</h1><ul><li>局部变量是申明在函数内部的，他只能在供函数内部的语句使用，局部变量在函数外部是不可知的。</li><li>全局变量声明在函数的外部，全局变量在整个程序的生命周期内都是有效的，在任意函数内部都能访问全局变量。</li><li>全局变量保存在内存的全局存储区中，占用静态的存储单元。</li><li>局部变量保存在栈中，只有在所在的函数被调用时才动态地为变量分配存储单元。</li></ul><p>​<br /><br><a name="lF10H"></a></p><h1 id="七-数组"><a href="#七-数组" class="headerlink" title="七.数组"></a>七.数组</h1><ul><li><p>所有的数组都是由连续的内存位置组成的，最低的地址对应第一个元素，最高的地址对应最后一个元素。</p></li><li><p>在c中声明一个数组，需要指定元素的类型和元素的数量。</p></li><li><p>声明一个高维数组int x[5][10][4]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//初始化一个二维数组</span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;  <br> &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125; ,   <span class="hljs-comment">/*  初始化索引号为 0 的行 */</span><br> &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125; ,   <span class="hljs-comment">/*  初始化索引号为 1 的行 */</span><br> &#123;<span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>&#125;   <span class="hljs-comment">/*  初始化索引号为 2 的行 */</span><br>&#125;;<br><br><span class="hljs-comment">//下面的这种初始化与上面的是相同的</span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>&#125;;<br><br><br></code></pre></td></tr></table></figure></li><li><p>给函数传递一个数组的参数，申明函数的时候可以不确定函数中所包含的数目的个数</p></li><li><p>c是不允许返回一个完整的数组的，不过你可以返回一个指向数组的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br> <br><span class="hljs-comment">/* 要生成和返回随机数的函数 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> * <span class="hljs-title">getRandom</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>  r[<span class="hljs-number">10</span>];<br>  <span class="hljs-keyword">int</span> i;<br> <br>  <span class="hljs-comment">/* 设置种子 */</span><br>  srand( (<span class="hljs-keyword">unsigned</span>)time( <span class="hljs-literal">NULL</span> ) );<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>  &#123;<br>     r[i] = rand();<br>     <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;r[%d] = %d\n&quot;</span>, i, r[i]);<br> <br>  &#125;<br> <br>  <span class="hljs-keyword">return</span> r;<br>&#125;<br> <br><span class="hljs-comment">/* 要调用上面定义函数的主函数 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">/* 一个指向整数的指针 */</span><br>   <span class="hljs-keyword">int</span> *p;<br>   <span class="hljs-keyword">int</span> i;<br> <br>   p = getRandom();<br>   <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ )<br>   &#123;<br>       <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;*(p + %d) : %d\n&quot;</span>, i, *(p + i));<br>   &#125;<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当你定义一个数组之后，他的名字所对应的是数组中第一个元素所对应的地址，*(balance + 4) 是一种访问 balance[4] 数据的合法方式。</p></li><li><p>一旦您把第一个元素的地址存储在 p 中，您就可以使用 <em>p、</em>(p+1)、*(p+2) 等来访问数组元素。<br><a name="bkW1k"></a></p><h1 id="八-枚举"><a href="#八-枚举" class="headerlink" title="八.枚举"></a>八.枚举</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//枚举的定义</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span>　枚举名　&#123;</span>枚举元素<span class="hljs-number">1</span>,枚举元素<span class="hljs-number">2</span>,……&#125;;<br><span class="hljs-comment">//使用枚举的方法</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">DAY</span></span><br><span class="hljs-class">&#123;</span><br>      MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><p><strong>注意：</strong>第一个枚举成员的默认值为整型的 0，后续枚举成员的值在前一个成员上加 1。我们在这个实例中把第一个枚举成员的值定义为 1，第二个就为 2，以此类推。</p><ul><li>也可以在定义枚举的时候改变元素的值<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">season</span> &#123;</span>spring, summer=<span class="hljs-number">3</span>, autumn, winter&#125;;<br></code></pre></td></tr></table></figure></li></ul><ul><li><p>枚举变量的定义</p></li><li><p>第一种方法是先定义枚举类型，再定义枚举变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">DAY</span></span><br><span class="hljs-class">&#123;</span><br>      MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">DAY</span> <span class="hljs-title">day</span>;</span><br></code></pre></td></tr></table></figure></li><li><p>第二种方法是定义枚举类型同时定义枚举变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">DAY</span></span><br><span class="hljs-class">&#123;</span><br>      MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN<br>&#125; day;<br></code></pre></td></tr></table></figure></li><li><p>第三种方法是省略枚举名称，直接定义枚举变量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>      MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN<br>&#125; day;<br></code></pre></td></tr></table></figure></li><li><p>在C 语言中，枚举类型是被当做 int 或者 unsigned int 类型来处理的，所以按照 C 语言规范是没有办法遍历枚举类型的。</p></li></ul><p>不过在一些特殊的情况下，枚举类型必须连续是可以实现有条件的遍历。<br />以下实例使用 for 来遍历枚举的元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">DAY</span></span><br><span class="hljs-class">&#123;</span><br>      MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN<br>&#125; day;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 遍历枚举元素</span><br>    <span class="hljs-keyword">for</span> (day = MON; day &lt;= SUN; day++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;枚举元素：%d \n&quot;</span>, day);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="YngKl"></a></p><h1 id="九-指针"><a href="#九-指针" class="headerlink" title="九.指针"></a>九.指针</h1><ul><li><p>定义的时候带一个*就声明了一个指针变量。指针变量是用来存放内存地址的变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">int</span>  var = <span class="hljs-number">20</span>;   <span class="hljs-comment">/* 实际变量的声明 */</span><br>   <span class="hljs-keyword">int</span>  *ip;        <span class="hljs-comment">/* 指针变量的声明 */</span><br> <br>   ip = &amp;var;  <span class="hljs-comment">/* 在指针变量中存储 var 的地址 */</span><br> <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var 变量的地址: %p\n&quot;</span>, &amp;var  );<br> <br>   <span class="hljs-comment">/* 在指针变量中存储的地址 */</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ip 变量存储的地址: %p\n&quot;</span>, ip );<br> <br>   <span class="hljs-comment">/* 使用指针访问值 */</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*ip 变量的值: %d\n&quot;</span>, *ip );<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>C中的空指针，NULL可以在定义指针时初始化，代表的是0.</p></li><li><p>指针可以进行一些运算，比如说++可以让指针指向下一个内存位置，具体增加多少取决于它的类型。</p></li><li><p>c语言中可以用指针代替数组，因为变量指针可以递增，而数组不能递增，数组可以看成一个指针常量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX = <span class="hljs-number">3</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">int</span>  var[] = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>&#125;;<br>   <span class="hljs-keyword">int</span>  i, *ptr;<br> <br>   <span class="hljs-comment">/* 指针中的数组地址 */</span><br>   ptr = var;<br>   <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; MAX; i++)<br>   &#123;<br> <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;存储地址：var[%d] = %p\n&quot;</span>, i, ptr );<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;存储值：var[%d] = %d\n&quot;</span>, i, *ptr );<br> <br>      <span class="hljs-comment">/* 指向下一个位置 */</span><br>      ptr++;<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>和上面同样的方法， 将数组的最后一个元素的地址传给一个指针变量，然后可以通过递减指针来获得整个数组。</p></li><li><p>指针还可以进行一些关系运算。<br><a name="LoJnX"></a></p><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2></li><li><p>定义一个指针数组后，数组中每一个元素都是一个指向int值的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX = <span class="hljs-number">3</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">int</span>  var[] = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>&#125;;<br>   <span class="hljs-keyword">int</span> i, *ptr[MAX];<br> <br>   <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; MAX; i++)<br>   &#123;<br>      ptr[i] = &amp;var[i]; <span class="hljs-comment">/* 赋值为整数的地址 */</span><br>   &#125;<br>   <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; MAX; i++)<br>   &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value of var[%d] = %d\n&quot;</span>, i, *ptr[i] );<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>也可以使用一个指向字符的指针数组来存储一个字符串列表。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> MAX = <span class="hljs-number">4</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *names[] = &#123;<br>                   <span class="hljs-string">&quot;Zara Ali&quot;</span>,<br>                   <span class="hljs-string">&quot;Hina Ali&quot;</span>,<br>                   <span class="hljs-string">&quot;Nuha Ali&quot;</span>,<br>                   <span class="hljs-string">&quot;Sara Ali&quot;</span>,<br>   &#125;;<br>   <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br> <br>   <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; MAX; i++)<br>   &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value of names[%d] = %s\n&quot;</span>, i, names[i] );<br>   &#125;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="jVqjR"></a></p><h2 id="指向指针的指针"><a href="#指向指针的指针" class="headerlink" title="指向指针的指针"></a>指向指针的指针</h2></li><li><p>指向指针的指针是一种多级寻址的形式，或者说是一个指针链</p></li><li><p>当我们定义一个指向指针的指针时，第一个指针包含了第二个指针的地址，第二个指针指向包含实际值的位置。</p></li><li><p>申明时 int **var;</p></li><li><p>当一个目标值被一个指针间接指向到另一个指针时，访问这个值需要两个星号运算符。</p></li></ul><p>​<br /><br><a name="EZmEA"></a></p><h2 id="传递指针给函数"><a href="#传递指针给函数" class="headerlink" title="传递指针给函数"></a>传递指针给函数</h2><ul><li><p>c是可以将指针作为函数的参数的，不过在定义变量时需要声明函数的参数类型为指针。</p></li><li><p>可以传入指针的函数同样也可以传入数组，定义参数时也定义成指针就行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">/* 函数声明 */</span><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getAverage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *arr, <span class="hljs-keyword">int</span> size)</span></span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">/* 带有 5 个元素的整型数组  */</span><br>   <span class="hljs-keyword">int</span> balance[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1000</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">17</span>, <span class="hljs-number">50</span>&#125;;<br>   <span class="hljs-keyword">double</span> avg;<br> <br>   <span class="hljs-comment">/* 传递一个指向数组的指针作为参数 */</span><br>   avg = getAverage( balance, <span class="hljs-number">5</span> ) ;<br> <br>   <span class="hljs-comment">/* 输出返回值  */</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Average value is: %f\n&quot;</span>, avg );<br>   <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getAverage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *arr, <span class="hljs-keyword">int</span> size)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span>    i, sum = <span class="hljs-number">0</span>;      <br>  <span class="hljs-keyword">double</span> avg;          <br> <br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; size; ++i)<br>  &#123;<br>    sum += arr[i];<br>  &#125;<br> <br>  avg = (<span class="hljs-keyword">double</span>)sum / size;<br> <br>  <span class="hljs-keyword">return</span> avg;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="VRSKh"></a></p><h2 id="从函数返回指针"><a href="#从函数返回指针" class="headerlink" title="从函数返回指针"></a>从函数返回指针</h2></li><li><p>如果想要函数的返回值是一个指针，在定义时就要将函数的返回值的类型定义成指针(加一个*)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span> </span><br> <br><span class="hljs-comment">/* 要生成和返回随机数的函数 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> * <span class="hljs-title">getRandom</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>  r[<span class="hljs-number">10</span>];<br>   <span class="hljs-keyword">int</span> i;<br> <br>   <span class="hljs-comment">/* 设置种子 */</span><br>   srand( (<span class="hljs-keyword">unsigned</span>)time( <span class="hljs-literal">NULL</span> ) );<br>   <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i)<br>   &#123;<br>      r[i] = rand();<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, r[i] );<br>   &#125;<br> <br>   <span class="hljs-keyword">return</span> r;<br>&#125;<br> <br><span class="hljs-comment">/* 要调用上面定义函数的主函数 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">/* 一个指向整数的指针 */</span><br>   <span class="hljs-keyword">int</span> *p;<br>   <span class="hljs-keyword">int</span> i;<br> <br>   p = getRandom();<br>   <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ )<br>   &#123;<br>       <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*(p + [%d]) : %d\n&quot;</span>, i, *(p + i) );<br>   &#125;<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><a name="FvybQ"></a></p><h2 id="函数指针与回调函数"><a href="#函数指针与回调函数" class="headerlink" title="函数指针与回调函数"></a>函数指针与回调函数</h2><ul><li><p>函数指针是指向函数的指针变量</p></li><li><p>函数指针可以像一般的函数一样，用于调用函数传递参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt; y ? x : y;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/* p 是函数指针 */</span><br>    <span class="hljs-keyword">int</span> (* p)(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>) = &amp; max; <span class="hljs-comment">// &amp;可以省略</span><br>    <span class="hljs-keyword">int</span> a, b, c, d;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入三个数字:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp; a, &amp; b, &amp; c);<br> <br>    <span class="hljs-comment">/* 与直接调用函数等价，d = max(max(a, b), c) */</span><br>    d = p(p(a, b), c); <br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最大的数字是: %d\n&quot;</span>, d);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>函数指针变量可以作为某个函数的参数来使用，回调函数就是一个通过函数指针调用的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">// 回调函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">populate_array</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *<span class="hljs-built_in">array</span>, <span class="hljs-keyword">size_t</span> arraySize, <span class="hljs-keyword">int</span> (*getNextValue)(<span class="hljs-keyword">void</span>))</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i=<span class="hljs-number">0</span>; i&lt;arraySize; i++)<br>        <span class="hljs-built_in">array</span>[i] = getNextValue();<br>&#125;<br> <br><span class="hljs-comment">// 获取随机值</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getNextRandomValue</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> rand();<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> myarray[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">/* getNextRandomValue 不能加括号，否则无法编译，因为加上括号之后相当于传入此参数时传入了 int , 而不是函数指针*/</span><br>    populate_array(myarray, <span class="hljs-number">10</span>, getNextRandomValue);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, myarray[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="X15WB"></a></p><h1 id="十-字符串"><a href="#十-字符串" class="headerlink" title="十.字符串"></a>十.字符串</h1></li><li><p>在 C 语言中，字符串实际上是使用 <strong>null</strong> 字符 <strong>\0</strong> 终止的一维字符数组。因此，一个以 <strong>null</strong> 结尾的字符串，包含了组成字符串的字符。</p></li><li><p>下面的声明和初始化创建了一个 <strong>RUNOOB</strong> 字符串。由于在数组的末尾存储了空字符，所以字符数组的大小比单词 <strong>RUNOOB</strong> 的字符数多一个。</p></li></ul><p>char site[7] = {‘R’, ‘U’, ‘N’, ‘O’, ‘O’, ‘B’, ‘\0’};</p><ul><li>依据数组初始化规则，可以把上面的语句写成以下语句：</li></ul><p>char site[] = “RUNOOB”;</p><ul><li>定义时不需要把\0放在最后一位，编译时会自动把\0放在字符串的末尾。<table><thead><tr><th>序号</th><th>函数 &amp; 目的</th></tr></thead><tbody><tr><td>1</td><td><strong>strcpy(s1, s2);</strong><br />复制字符串 s2 到字符串 s1。</td></tr><tr><td>2</td><td><strong>strcat(s1, s2);</strong><br />连接字符串 s2 到字符串 s1 的末尾。</td></tr><tr><td>3</td><td><strong>strlen(s1);</strong><br />返回字符串 s1 的长度。</td></tr><tr><td>4</td><td><strong>strcmp(s1, s2);</strong><br />如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回小于 0；如果 s1&gt;s2 则返回大于 0。</td></tr><tr><td>5</td><td><strong>strchr(s1, ch);</strong><br />返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td></tr><tr><td>6</td><td><strong>strstr(s1, s2);</strong><br />返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td></tr></tbody></table></li></ul><p><a name="xrD1S"></a></p><h1 id="十一-结构体"><a href="#十一-结构体" class="headerlink" title="十一.结构体"></a>十一.结构体</h1><ul><li><p>结构是c中另一种用户可以自定义的数据类型，它允许储存不同类型的数据。<br><a name="etnD1"></a></p><h2 id="定义结构"><a href="#定义结构" class="headerlink" title="定义结构"></a>定义结构</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span>                 //标签</span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">char</span>  title[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  author[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">int</span>   book_id;<br>&#125; book;                      <span class="hljs-comment">//结构变量</span><br><br><br><span class="hljs-comment">//此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c</span><br><span class="hljs-comment">//同时又声明了结构体变量s1</span><br><span class="hljs-comment">//这个结构体并没有标明其标签</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> a;<br>    <span class="hljs-keyword">char</span> b;<br>    <span class="hljs-keyword">double</span> c;<br>&#125; s1;<br> <br><span class="hljs-comment">//此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c</span><br><span class="hljs-comment">//结构体的标签被命名为SIMPLE,没有声明变量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SIMPLE</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> a;<br>    <span class="hljs-keyword">char</span> b;<br>    <span class="hljs-keyword">double</span> c;<br>&#125;;<br><span class="hljs-comment">//用SIMPLE标签的结构体，另外声明了变量t1、t2、t3</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SIMPLE</span> <span class="hljs-title">t1</span>, <span class="hljs-title">t2</span>[20], *<span class="hljs-title">t3</span>;</span><br> <br><span class="hljs-comment">//也可以用typedef创建新类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> a;<br>    <span class="hljs-keyword">char</span> b;<br>    <span class="hljs-keyword">double</span> c; <br>&#125; Simple2;<br><span class="hljs-comment">//现在可以用Simple2作为类型声明新的结构体变量</span><br>Simple2 u1, u2[<span class="hljs-number">20</span>], *u3;<br></code></pre></td></tr></table></figure><p>结构体的成员可以包含其他结构体，也可以包含指向自己结构体类型的指针，而通常这种指针的应用是为了实现一些更高级的数据结构如链表和树等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//此结构体的声明包含了其他的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">COMPLEX</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">char</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">100</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SIMPLE</span> <span class="hljs-title">a</span>;</span><br>&#125;;<br> <br><span class="hljs-comment">//此结构体的声明包含了指向自己类型的指针</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NODE</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">char</span> <span class="hljs-built_in">string</span>[<span class="hljs-number">100</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NODE</span> *<span class="hljs-title">next_node</span>;</span><br>&#125;;<br><br><br><span class="hljs-comment">//如果两个结构体互相包含，则需要对其中一个结构体进行不完整声明，如下所示：</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">B</span>;</span>    <span class="hljs-comment">//对结构体B进行不完整声明</span><br> <br><span class="hljs-comment">//结构体A中包含指向结构体B的指针</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">B</span> *<span class="hljs-title">partner</span>;</span><br>    <span class="hljs-comment">//other members;</span><br>&#125;;<br> <br><span class="hljs-comment">//结构体B中包含指向结构体A的指针，在A声明完后，B也随之进行声明</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">B</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">A</span> *<span class="hljs-title">partner</span>;</span><br>    <span class="hljs-comment">//other members;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><a name="KAuE6"></a></p><h2 id="结构体变量的初始化"><a href="#结构体变量的初始化" class="headerlink" title="结构体变量的初始化"></a>结构体变量的初始化</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span></span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">char</span>  title[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  author[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">int</span>   book_id;<br>&#125; book = &#123;<span class="hljs-string">&quot;C 语言&quot;</span>, <span class="hljs-string">&quot;RUNOOB&quot;</span>, <span class="hljs-string">&quot;编程语言&quot;</span>, <span class="hljs-number">123456</span>&#125;;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n&quot;</span>, book.title, book.author, book.subject, book.book_id);<br>&#125;<br><br><span class="hljs-comment">//通过结构变量加上一个.可以访问成员</span><br><br></code></pre></td></tr></table></figure></li><li><p>结构还可以作为函数参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span></span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">char</span>  title[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  author[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">int</span>   book_id;<br>&#125;;<br> <br><span class="hljs-comment">/* 函数声明 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">( struct Books book )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span> <span class="hljs-title">Book1</span>;</span>        <span class="hljs-comment">/* 声明 Book1，类型为 Books */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span> <span class="hljs-title">Book2</span>;</span>        <span class="hljs-comment">/* 声明 Book2，类型为 Books */</span><br> <br>   <span class="hljs-comment">/* Book1 详述 */</span><br>   <span class="hljs-built_in">strcpy</span>( Book1.title, <span class="hljs-string">&quot;C Programming&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book1.author, <span class="hljs-string">&quot;Nuha Ali&quot;</span>); <br>   <span class="hljs-built_in">strcpy</span>( Book1.subject, <span class="hljs-string">&quot;C Programming Tutorial&quot;</span>);<br>   Book1.book_id = <span class="hljs-number">6495407</span>;<br> <br>   <span class="hljs-comment">/* Book2 详述 */</span><br>   <span class="hljs-built_in">strcpy</span>( Book2.title, <span class="hljs-string">&quot;Telecom Billing&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book2.author, <span class="hljs-string">&quot;Zara Ali&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book2.subject, <span class="hljs-string">&quot;Telecom Billing Tutorial&quot;</span>);<br>   Book2.book_id = <span class="hljs-number">6495700</span>;<br> <br>   <span class="hljs-comment">/* 输出 Book1 信息 */</span><br>   printBook( Book1 );<br> <br>   <span class="hljs-comment">/* 输出 Book2 信息 */</span><br>   printBook( Book2 );<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">( struct Books book )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book title : %s\n&quot;</span>, book.title);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book author : %s\n&quot;</span>, book.author);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book subject : %s\n&quot;</span>, book.subject);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book book_id : %d\n&quot;</span>, book.book_id);<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="eocs6"></a></p><h2 id="指向结构的指针"><a href="#指向结构的指针" class="headerlink" title="指向结构的指针"></a>指向结构的指针</h2></li><li><p>您可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，如下所示：</p><ul><li>struct Books *struct_pointer;</li></ul></li><li><p>现在，您可以在上述定义的指针变量中存储结构变量的地址。为了查找结构变量的地址，请把 &amp; 运算符放在结构名称的前面，如下所示：</p><ul><li>struct_pointer = &Book1;</li></ul></li><li><p>为了使用指向该结构的指针访问结构的成员，您必须使用 -&gt; 运算符，如下所示：</p><ul><li>struct_pointer-&gt;title;<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span></span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">char</span>  title[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  author[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">int</span>   book_id;<br>&#125;;<br> <br><span class="hljs-comment">/* 函数声明 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">( struct Books *book )</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span> <span class="hljs-title">Book1</span>;</span>        <span class="hljs-comment">/* 声明 Book1，类型为 Books */</span><br>   <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span> <span class="hljs-title">Book2</span>;</span>        <span class="hljs-comment">/* 声明 Book2，类型为 Books */</span><br> <br>   <span class="hljs-comment">/* Book1 详述 */</span><br>   <span class="hljs-built_in">strcpy</span>( Book1.title, <span class="hljs-string">&quot;C Programming&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book1.author, <span class="hljs-string">&quot;Nuha Ali&quot;</span>); <br>   <span class="hljs-built_in">strcpy</span>( Book1.subject, <span class="hljs-string">&quot;C Programming Tutorial&quot;</span>);<br>   Book1.book_id = <span class="hljs-number">6495407</span>;<br> <br>   <span class="hljs-comment">/* Book2 详述 */</span><br>   <span class="hljs-built_in">strcpy</span>( Book2.title, <span class="hljs-string">&quot;Telecom Billing&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book2.author, <span class="hljs-string">&quot;Zara Ali&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( Book2.subject, <span class="hljs-string">&quot;Telecom Billing Tutorial&quot;</span>);<br>   Book2.book_id = <span class="hljs-number">6495700</span>;<br> <br>   <span class="hljs-comment">/* 通过传 Book1 的地址来输出 Book1 信息 */</span><br>   printBook( &amp;Book1 );<br> <br>   <span class="hljs-comment">/* 通过传 Book2 的地址来输出 Book2 信息 */</span><br>   printBook( &amp;Book2 );<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printBook</span><span class="hljs-params">( struct Books *book )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book title : %s\n&quot;</span>, book-&gt;title);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book author : %s\n&quot;</span>, book-&gt;author);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book subject : %s\n&quot;</span>, book-&gt;subject);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Book book_id : %d\n&quot;</span>, book-&gt;book_id);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对于FOC的探索</title>
    <link href="/2021/08/12/%E6%8A%80%E6%9C%AF-1/"/>
    <url>/2021/08/12/%E6%8A%80%E6%9C%AF-1/</url>
    
    <content type="html"><![CDATA[<h1 id="供上稚辉君神文"><a href="#供上稚辉君神文" class="headerlink" title="供上稚辉君神文"></a><a href="https://zhuanlan.zhihu.com/p/147659820">供上稚辉君神文</a></h1>]]></content>
    
    
    <categories>
      
      <category>软硬</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电机驱动</tag>
      
      <tag>PCB</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
