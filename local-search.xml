<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言的复习</title>
    <link href="/2021/08/13/C%E8%AF%AD%E8%A8%80/"/>
    <url>/2021/08/13/C%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p>上一次使用C语言已经不知道是什么时候了。。。。。。。<br>感觉大部分语法已经忘得差不多了<br>也应该补一补了<br>就当作学习c++的前置课程吧</p></blockquote><h1 id="第一部分–数据类型"><a href="#第一部分–数据类型" class="headerlink" title="第一部分–数据类型"></a>第一部分–数据类型</h1><p><img src="/img/cjiegou.jpg" alt="数据结构"></p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。</p><p>C 标识符内不允许出现标点字符，比如 @、$ 和 %。C 是区分大小写的编程语言。因此，在 C 中，Manpower 和 manpower 是两个不同的标识符。</p><p>在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。<br>C 中的类型可分为以下几种：</p><table><thead><tr><th>序号</th><th>类型与描述</th><th>基本</th></tr></thead><tbody><tr><td>1</td><td><strong>基本类型：</strong></td><td>它们是算术类型，包括两种类型：整数类型和浮点类型。</td></tr><tr><td>2</td><td><strong>枚举类型：</strong></td><td>它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</td></tr><tr><td>3</td><td><strong>void 类型：</strong></td><td>类型说明符 <em>void</em> 表明没有可用的值。</td></tr><tr><td>4</td><td><strong>派生类型：</strong></td><td>它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</td></tr></tbody></table><p>数组类型和结构类型统称为聚合类型。函数的类型指的是函数返回值的类型。在本章节接下来的部分我们将介绍基本类型，其他几种类型会在后边几个章节中进行讲解。</p><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><p>下表列出了关于标准整数类型的存储大小和值范围的细节：</p><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th></tr></thead><tbody><tr><td>char</td><td>1 字节</td><td>-128 到 127 或 0 到 255</td></tr><tr><td>unsigned char</td><td>1 字节</td><td>0 到 255</td></tr><tr><td>signed char</td><td>1 字节</td><td>-128 到 127</td></tr><tr><td>int</td><td>2 或 4 字节</td><td>-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned int</td><td>2 或 4 字节</td><td>0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td>short</td><td>2 字节</td><td>-32,768 到 32,767</td></tr><tr><td>unsigned short</td><td>2 字节</td><td>0 到 65,535</td></tr><tr><td>long</td><td>4 字节</td><td>-2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned long</td><td>4 字节</td><td>0 到 4,294,967,295</td></tr></tbody></table><p><em>注意，各种类型的存储大小与系统位数有关，但目前通用的以64位系统为主。</em><br><em>以下列出了32位系统与64位系统的存储大小的差别（windows 相同）：</em><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2681770/1628825864733-942f7080-73d2-4d1c-a3d7-8e66962c1340.jpeg#clientId=u237d3db4-ce40-4&from=paste&id=u7feb9afa&margin=%5Bobject%20Object%5D&originHeight=654&originWidth=808&originalType=url&ratio=1&status=done&style=none&taskId=udd74ce17-9ef1-4ff7-8fc2-79d1b4a4094"><br>为了得到某个类型或某个变量在特定平台上的准确大小，您可以使用 <strong>sizeof</strong> 运算符。表达式 <em>sizeof(type)</em> 得到对象或类型的存储字节大小。</p><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><p>下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：</p><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th><th>精度</th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td>1.2E-38 到 3.4E+38</td><td>6 位有效位</td></tr><tr><td>double</td><td>8 字节</td><td>2.3E-308 到 1.7E+308</td><td>15 位有效位</td></tr><tr><td>long double</td><td>16 字节</td><td>3.4E-4932 到 1.1E+4932</td><td>19 位有效位</td></tr></tbody></table><h2 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h2><p>void 类型指定没有可用的值。它通常用于以下三种情况下：</p><table><thead><tr><th>序号</th><th>类型与描述</th><th>具体</th></tr></thead><tbody><tr><td>1</td><td><strong>函数返回为空</strong></td><td>C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 <strong>void exit (int status);</strong></td></tr><tr><td>2</td><td><strong>函数参数为空</strong></td><td>C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 <strong>int rand(void);</strong></td></tr><tr><td>3</td><td><strong>指针指向 void</strong></td><td>类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 *<em>void <em>malloc( size_t size );</em></em> 返回指向 void 的指针，可以转换为任何数据类型。</td></tr></tbody></table><h1 id="变-量"><a href="#变-量" class="headerlink" title="变 量"></a>变 量</h1><p>变量其实只不过是程序可操作的存储区的名称。C 中每个变量都有特定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。<br>变量的名称可以由字母、数字和下划线字符组成。它必须以字母或下划线开头。大写字母和小写字母是不同的，因为 C 是大小写敏感的。基于前一章讲解的基本类型，有以下几种基本的变量类型：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>char</td><td>通常是一个字节（八位）, 这是一个整数类型。</td></tr><tr><td>int</td><td>整型，4 个字节，取值范围 -2147483648 到 2147483647。</td></tr><tr><td>float</td><td>单精度浮点值。单精度是这样的格式，1位符号，8位指数，23位小数。</td></tr><tr><td><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628841834762-28b0e9ab-cda4-4ab6-9a1e-67d71ca21ad4.png#clientId=u37333e03-257d-4&from=paste&id=u2309fc56&margin=%5Bobject%20Object%5D&originHeight=75&originWidth=590&originalType=url&ratio=1&status=done&style=none&taskId=ua6a45f1e-a8b6-4b8d-912b-65028f5baed"></td><td></td></tr><tr><td>double</td><td>双精度浮点值。双精度是1位符号，11位指数，52位小数。</td></tr><tr><td><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628841834691-c7724710-d54c-4152-9851-07e1864fd56f.png#clientId=u37333e03-257d-4&from=paste&id=u8f3dff3e&margin=%5Bobject%20Object%5D&originHeight=125&originWidth=618&originalType=url&ratio=1&status=done&style=none&taskId=u7bd1c2fa-1b70-4121-82ae-9a12ffd3432"></td><td></td></tr><tr><td>void</td><td>表示类型的缺失。</td></tr></tbody></table><p>C 语言也允许定义各种其他类型的变量，比如枚举、指针、数组、结构、共用体等等，这将会在后续的章节中进行讲解，本章节我们先讲解基本变量类型。</p><h2 id="C-中的变量定义"><a href="#C-中的变量定义" class="headerlink" title="C 中的变量定义"></a>C 中的变量定义</h2><p>变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表，如下所示：<br>type variable_list;<br>在这里，<strong>type</strong> 必须是一个有效的 C 数据类型，可以是 char、w_char、int、float、double 或任何用户自定义的对象，<strong>variable_list</strong> 可以由一个或多个标识符名称组成，多个标识符之间用逗号分隔。下面列出几个有效的声明：<br>  int    i, j, k;<br>  char   c, ch;<br>  float  f, salary;<br>  double d;<br>行 <strong>int i, j, k;</strong> 声明并定义了变量 i、j 和 k，这指示编译器创建类型为 int 的名为 i、j、k 的变量。<br>变量可以在声明的时候被初始化（指定一个初始值）。初始化器由一个等号，后跟一个常量表达式组成，如下所示：<br>  type variable_name = value;</p><h2 id="C-中的变量声明"><a href="#C-中的变量声明" class="headerlink" title="C 中的变量声明"></a>C 中的变量声明</h2><p>变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。<br>变量的声明有两种情况：</p><ul><li><p>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</p></li><li><p>2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。</p></li><li><p>除非有extern关键字，否则都是变量的定义。</p><p>  extern int i; //声明，不是定义<br>  int i; //声明，也是定义</p></li></ul><h2 id="C-中的左值（Lvalues）和右值（Rvalues）"><a href="#C-中的左值（Lvalues）和右值（Rvalues）" class="headerlink" title="C 中的左值（Lvalues）和右值（Rvalues）"></a>C 中的左值（Lvalues）和右值（Rvalues）</h2><p>C 中有两种类型的表达式：</p><ol><li><strong>左值（lvalue）：</strong>指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li><li><strong>右值（rvalue）：</strong>术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li></ol><p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。</p><h1 id="常-量"><a href="#常-量" class="headerlink" title="常 量"></a>常 量</h1><h2 id="整数常量"><a href="#整数常量" class="headerlink" title="整数常量"></a>整数常量</h2><p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。<br>整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意。<br>下面列举几个整数常量的实例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">212</span><span class="hljs-regexp">/* 合法的 */</span><br><span class="hljs-number">215</span>u<span class="hljs-regexp">/* 合法的 */</span><br><span class="hljs-number">0</span>xFeeL<span class="hljs-regexp">/* 合法的 */</span><span class="hljs-number">1</span><br><span class="hljs-number">078</span><span class="hljs-regexp">/* 非法的：8 不是八进制的数字 */</span><br><span class="hljs-number">032</span>UU<span class="hljs-regexp">/* 非法的：不能重复后缀 */</span><br>以下是各种类型的整数常量的实例：<br><span class="hljs-number">85</span><span class="hljs-regexp">/* 十进制 */</span><br><span class="hljs-number">0213</span><span class="hljs-regexp">/* 八进制 */</span><br><span class="hljs-number">0</span>x4b<span class="hljs-regexp">/* 十六进制 */</span><br><span class="hljs-number">30</span><span class="hljs-regexp">/* 整数 */</span><br><span class="hljs-number">30</span>u<span class="hljs-regexp">/* 无符号整数 */</span><br><span class="hljs-number">30</span>l<span class="hljs-regexp">/* 长整数 */</span><br><span class="hljs-number">30</span>ul<span class="hljs-regexp">/* 无符号长整数 */</span><br></code></pre></td></tr></table></figure><h2 id="浮点常量"><a href="#浮点常量" class="headerlink" title="浮点常量"></a>浮点常量</h2><p>浮点常量由整数部分、小数点、小数部分和指数部分组成。您可以使用小数形式或者指数形式来表示浮点常量。<br>当使用小数形式表示时，必须包含整数部分、小数部分，或同时包含两者。当使用指数形式表示时， 必须包含小数点、指数，或同时包含两者。带符号的指数是用 e 或 E 引入的。<br>下面列举几个浮点常量的实例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">3.14159</span><span class="hljs-regexp">/* 合法的 */</span><br><span class="hljs-number">314159</span>E-<span class="hljs-number">5</span>L<span class="hljs-regexp">/* 合法的 */</span><br><span class="hljs-number">510</span>E<span class="hljs-regexp">/* 非法的：不完整的指数 */</span><br><span class="hljs-number">210</span>f<span class="hljs-regexp">/* 非法的：没有小数或指数 */</span><br>.e55 <span class="hljs-regexp">/* 非法的：缺少整数或分数 */</span><br></code></pre></td></tr></table></figure><h2 id="字符常量"><a href="#字符常量" class="headerlink" title="字符常量"></a>字符常量</h2><p>字符常量是括在单引号中，例如，’x’ 可以存储在<strong>char</strong>类型的简单变量中。<br>字符常量可以是一个普通的字符（例如 ‘x’）、一个转义序列（例如’\t’），或一个通用的字符（例如 ‘\u02C0’）。<br>在 C 中，有一些特定的字符，当它们前面有反斜杠时，它们就具有特殊的含义，被用来表示如换行符（\n）或制表符（\t）等。<br>下表列出了一些这样的转义序列码:</p><table><thead><tr><th>转义序列</th><th>含义</th></tr></thead><tbody><tr><td>\</td><td>\ 字符</td></tr><tr><td>&#39;</td><td>‘ 字符</td></tr><tr><td>&quot;</td><td>“ 字符</td></tr><tr><td>?</td><td>? 字符</td></tr><tr><td>\a</td><td>警报铃声</td></tr><tr><td>\b</td><td>退格键</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>水平制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\ooo</td><td>一到三位的八进制数</td></tr><tr><td>\xhh . . .</td><td>一个或多个数字的十六进制数</td></tr></tbody></table><p>下面的实例显示了一些转义序列字符：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>​<br><br><span class="hljs-built_in">intmain</span>()<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello\tWorld\n\n&quot;</span>);<br>​<br><br>return0;<br>​<br><br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：<br>Hello World</p><h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><p>字符串字面值或常量是括在双引号 “” 中的。一个字符串包含类似于字符常量的字符：普通的字符、转义序列和通用的字符。<br>您可以使用空格做分隔符，把一个很长的字符串常量进行分行。<br>下面的实例显示了一些字符串常量。下面这三种形式所显示的字符串是相同的。<br>“hello, dear””hello, \ dear””hello, “”d””ear”</p><h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><p>在 C 中，有两种简单的定义常量的方式：</p><ol><li>使用**#define**预处理器。</li><li>使用<strong>const</strong>关键字。</li></ol><h3 id="define-预处理器"><a href="#define-预处理器" class="headerlink" title="#define 预处理器"></a>#define 预处理器</h3><p>下面是使用 #define 预处理器定义常量的形式：<br>#define identifier value</p><h3 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h3><p>您可以使用<strong>const</strong>前缀声明指定类型的常量，如下所示：<br>const type variable = value;<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628843047923-09fbe6b4-9f12-4c95-aeec-29f1bda13af5.png#clientId=ue46576e3-d36e-4&from=paste&id=ufc4f2133&margin=%5Bobject%20Object%5D&originHeight=401&originWidth=661&originalType=url&ratio=1&status=done&style=none&taskId=u193ee9c5-eba7-4d43-8773-6fda11040ac"></p><h1 id="C-存储类"><a href="#C-存储类" class="headerlink" title="C 存储类"></a>C 存储类</h1><p>存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类：</p><ul><li>auto</li><li>register</li><li>static</li><li>extern</li></ul><h2 id="auto-存储类"><a href="#auto-存储类" class="headerlink" title="auto 存储类"></a>auto 存储类</h2><p><strong>auto</strong> 存储类是所有局部变量默认的存储类。<br>{    int mount;    auto int month; }<br>上面的实例定义了两个带有相同存储类的变量，auto 只能用在函数内，即 auto 只能修饰局部变量。</p><h2 id="register-存储类"><a href="#register-存储类" class="headerlink" title="register 存储类"></a>register 存储类</h2><p><strong>register</strong> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。<br>{    register int  miles; }<br>寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p><h2 id="static-存储类"><a href="#static-存储类" class="headerlink" title="static 存储类"></a>static 存储类</h2><p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。<br>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。<br>全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。<br>以下实例演示了 static 修饰全局变量和局部变量的应用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">/* 函数声明 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br> <br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count=<span class="hljs-number">10</span>;        <span class="hljs-comment">/* 全局变量 - static 是默认的 */</span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">while</span> (count--) &#123;<br>      <span class="hljs-built_in">func1</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/* &#x27;thingy&#x27; 是 &#x27;func1&#x27; 的局部变量 - 只初始化一次</span><br><span class="hljs-comment"> * 每次调用函数 &#x27;func1&#x27; &#x27;thingy&#x27; 值不会被重置。</span><br><span class="hljs-comment"> */</span>                <br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> thingy=<span class="hljs-number">5</span>;<br>  thingy++;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; thingy 为 %d ， count 为 %d\n&quot;</span>, thingy, count);<br>&#125;<br></code></pre></td></tr></table></figure><p>实例中 count 作为全局变量可以在函数内使用，thingy 使用 static 修饰后，不会在每次调用时重置.</p><h2 id="extern-存储类"><a href="#extern-存储类" class="headerlink" title="extern 存储类"></a>extern 存储类</h2><p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 <strong>extern</strong> 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。<br>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。<br>extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候。</p><h1 id="C运算符"><a href="#C运算符" class="headerlink" title="C运算符"></a>C运算符</h1><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C 语言内置了丰富的运算符，并提供了以下类型的运算符：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>杂项运算符</li></ul><p>本章将逐一介绍算术运算符、关系运算符、逻辑运算符、位运算符、赋值运算符和其他运算符。</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>下表显示了 C 语言支持的所有算术运算符。假设变量<strong>A</strong>的值为 10，变量<strong>B</strong>的值为 20，则：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>把两个操作数相加</td><td>A + B 将得到 30</td></tr><tr><td>-</td><td>从第一个操作数中减去第二个操作数</td><td>A - B 将得到 -10</td></tr><tr><td>*</td><td>把两个操作数相乘</td><td>A * B 将得到 200</td></tr><tr><td>/</td><td>分子除以分母</td><td>B / A 将得到 2</td></tr><tr><td>%</td><td>取模运算符，整除后的余数</td><td>B % A 将得到 0</td></tr><tr><td>++</td><td>自增运算符，整数值增加 1</td><td>A++ 将得到 11</td></tr><tr><td>–</td><td>自减运算符，整数值减少 1</td><td>A– 将得到 9</td></tr></tbody></table><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br> <br><span class="hljs-keyword">int</span> main()<br>&#123;<br>   <span class="hljs-keyword">int</span> a = <span class="hljs-number">21</span>;<br>   <span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>;<br>   <span class="hljs-keyword">int</span> c ;<br> <br>   c = a + b;<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 1 - c 的值是 %d\n&quot;</span>, c );<br>   c = a - b;<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 2 - c 的值是 %d\n&quot;</span>, c );<br>   c = a * b;<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 3 - c 的值是 %d\n&quot;</span>, c );<br>   c = a / b;<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 4 - c 的值是 %d\n&quot;</span>, c );<br>   c = a % b;<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 5 - c 的值是 %d\n&quot;</span>, c );<br>   c = a++;  <span class="hljs-regexp">//</span> 赋值后再加 <span class="hljs-number">1</span> ，c 为 <span class="hljs-number">21</span>，a 为 <span class="hljs-number">22</span><br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 6 - c 的值是 %d\n&quot;</span>, c );<br>   c = a--;  <span class="hljs-regexp">//</span> 赋值后再减 <span class="hljs-number">1</span> ，c 为 <span class="hljs-number">22</span> ，a 为 <span class="hljs-number">21</span><br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 7 - c 的值是 %d\n&quot;</span>, c );<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Line</span> <span class="hljs-number">1</span> - c 的值是 <span class="hljs-number">31</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">2</span> - c 的值是 <span class="hljs-number">11</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">3</span> - c 的值是 <span class="hljs-number">210</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">4</span> - c 的值是 <span class="hljs-number">2</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">5</span> - c 的值是 <span class="hljs-number">1</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">6</span> - c 的值是 <span class="hljs-number">21</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">7</span> - c 的值是 <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p>以下实例演示了 a++ 与 ++a 的区别：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs perl">实例<br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br> <br><span class="hljs-keyword">int</span> main()<br>&#123;<br>   <span class="hljs-keyword">int</span> c;<br>   <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>   c = a++; <br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;先赋值后运算：\n&quot;</span>);<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 1 - c 的值是 %d\n&quot;</span>, c );<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 2 - a 的值是 %d\n&quot;</span>, a );<br>   a = <span class="hljs-number">10</span>;<br>   c = a--; <br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 3 - c 的值是 %d\n&quot;</span>, c );<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 4 - a 的值是 %d\n&quot;</span>, a );<br> <br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;先运算后赋值：\n&quot;</span>);<br>   a = <span class="hljs-number">10</span>;<br>   c = ++a; <br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 5 - c 的值是 %d\n&quot;</span>, c );<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 6 - a 的值是 %d\n&quot;</span>, a );<br>   a = <span class="hljs-number">10</span>;<br>   c = --a; <br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 7 - c 的值是 %d\n&quot;</span>, c );<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 8 - a 的值是 %d\n&quot;</span>, a );<br> <br>&#125;<br><br>先赋值后运算：<br>Line <span class="hljs-number">1</span> - c 的值是 <span class="hljs-number">10</span><br>Line <span class="hljs-number">2</span> - a 的值是 <span class="hljs-number">11</span><br>Line <span class="hljs-number">3</span> - c 的值是 <span class="hljs-number">10</span><br>Line <span class="hljs-number">4</span> - a 的值是 <span class="hljs-number">9</span><br>先运算后赋值：<br>Line <span class="hljs-number">5</span> - c 的值是 <span class="hljs-number">11</span><br>Line <span class="hljs-number">6</span> - a 的值是 <span class="hljs-number">11</span><br>Line <span class="hljs-number">7</span> - c 的值是 <span class="hljs-number">9</span><br>Line <span class="hljs-number">8</span> - a 的值是 <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>下表显示了 C 语言支持的所有关系运算符。假设变量<strong>A</strong>的值为 10，变量<strong>B</strong>的值为 20，则：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>检查两个操作数的值是否相等，如果相等则条件为真。</td><td>(A == B) 为假。</td></tr><tr><td>!=</td><td>检查两个操作数的值是否相等，如果不相等则条件为真。</td><td>(A != B) 为真。</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td>(A &gt; B) 为假。</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td>(A &lt; B) 为真。</td></tr><tr><td>&gt;=</td><td>检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td>(A &gt;= B) 为假。</td></tr><tr><td>&lt;=</td><td>检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td>(A &lt;= B) 为真。</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>下表显示了 C 语言支持的所有关系逻辑运算符。假设变量<strong>A</strong>的值为 1，变量<strong>B</strong>的值为 0，则：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td><td>(A &amp;&amp; B) 为假。</td></tr><tr><td></td><td></td><td></td></tr><tr><td>!</td><td>称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td><td>!(A &amp;&amp; B) 为真。</td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符作用于位，并逐位执行操作。&amp;、 | 和 ^ 的真值表如下所示：</p><table><thead><tr><th>p 或 q</th><th>p &amp; q</th><th>p</th><th>q</th><th>p ^ q</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr></tbody></table><p>假设如果 A = 60，且 B = 13，现在以二进制格式表示，它们如下所示：<br>A = 0011 1100<br>B = 0000 1101</p><hr><p>A&amp;B = 0000 1100<br>A|B = 0011 1101<br>A^B = 0011 0001<br>~A  = 1100 0011<br>下表显示了 C 语言支持的位运算符。假设变量<strong>A</strong>的值为 60，变量<strong>B</strong>的值为 13，则：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与操作，按二进制位进行”与”运算。运算规则：0&amp;0=0;0&amp;1=0;1&amp;0=0;1&amp;1=1;</td><td>(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td></td><td></td><td>按位或运算符，按二进制位进行”或”运算。运算规则：0</td></tr><tr><td>^</td><td>异或运算符，按二进制位进行”异或”运算。运算规则：0^0=0;0^1=1;1^0=1;1^1=0;</td><td>(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td>~</td><td>取反运算符，按二进制位进行”取反”运算。运算规则：<del>1=-2;</del>0=-1;</td><td>(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。</td></tr><tr><td>&lt;&lt;</td><td>二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</td><td>A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</td><td>A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table><p>请看下面的实例，了解 C 语言中所有可用的位运算符：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs llvm">#include &lt;stdio.h&gt;<br> <br>int main()<br>&#123;<br> <br>   unsigned int a <span class="hljs-operator">=</span> <span class="hljs-number">60</span><span class="hljs-comment">;    /* 60 = 0011 1100 */  </span><br>   unsigned int b <span class="hljs-operator">=</span> <span class="hljs-number">13</span><span class="hljs-comment">;    /* 13 = 0000 1101 */</span><br>   int <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;           </span><br><span class="hljs-comment"> </span><br>   <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> a &amp; b<span class="hljs-comment">;       /* 12 = 0000 1100 */ </span><br>   printf(<span class="hljs-string">&quot;Line 1 - c 的值是 %d\n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> )<span class="hljs-comment">;</span><br><span class="hljs-comment"> </span><br>   <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> a | b<span class="hljs-comment">;       /* 61 = 0011 1101 */</span><br>   printf(<span class="hljs-string">&quot;Line 2 - c 的值是 %d\n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> )<span class="hljs-comment">;</span><br><span class="hljs-comment"> </span><br>   <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> a ^ b<span class="hljs-comment">;       /* 49 = 0011 0001 */</span><br>   printf(<span class="hljs-string">&quot;Line 3 - c 的值是 %d\n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> )<span class="hljs-comment">;</span><br><span class="hljs-comment"> </span><br>   <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> ~a<span class="hljs-comment">;          /*-61 = 1100 0011 */</span><br>   printf(<span class="hljs-string">&quot;Line 4 - c 的值是 %d\n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> )<span class="hljs-comment">;</span><br><span class="hljs-comment"> </span><br>   <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> a &lt;&lt; <span class="hljs-number">2</span><span class="hljs-comment">;     /* 240 = 1111 0000 */</span><br>   printf(<span class="hljs-string">&quot;Line 5 - c 的值是 %d\n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> )<span class="hljs-comment">;</span><br><span class="hljs-comment"> </span><br>   <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> a &gt;&gt; <span class="hljs-number">2</span><span class="hljs-comment">;     /* 15 = 0000 1111 */</span><br>   printf(<span class="hljs-string">&quot;Line 6 - c 的值是 %d\n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> )<span class="hljs-comment">;</span><br>&#125;<br><br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>Line <span class="hljs-number">1</span> - <span class="hljs-keyword">c</span> 的值是 <span class="hljs-number">12</span><br>Line <span class="hljs-number">2</span> - <span class="hljs-keyword">c</span> 的值是 <span class="hljs-number">61</span><br>Line <span class="hljs-number">3</span> - <span class="hljs-keyword">c</span> 的值是 <span class="hljs-number">49</span><br>Line <span class="hljs-number">4</span> - <span class="hljs-keyword">c</span> 的值是 <span class="hljs-number">-61</span><br>Line <span class="hljs-number">5</span> - <span class="hljs-keyword">c</span> 的值是 <span class="hljs-number">240</span><br>Line <span class="hljs-number">6</span> - <span class="hljs-keyword">c</span> 的值是 <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>下表列出了 C 语言支持的赋值运算符：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符，把右边操作数的值赋给左边操作数</td><td>C = A + B 将把 A + B 的值赋给 C</td></tr><tr><td>+=</td><td>加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td>C += A 相当于 C = C + A</td></tr><tr><td>-=</td><td>减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td>C -= A 相当于 C = C - A</td></tr><tr><td>*=</td><td>乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td>C *= A 相当于 C = C * A</td></tr><tr><td>/=</td><td>除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td>C /= A 相当于 C = C / A</td></tr><tr><td>%=</td><td>求模且赋值运算符，求两个操作数的模赋值给左边操作数</td><td>C %= A 相当于 C = C % A</td></tr><tr><td>&lt;&lt;=</td><td>左移且赋值运算符</td><td>C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td></tr><tr><td>&gt;&gt;=</td><td>右移且赋值运算符</td><td>C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td></tr><tr><td>&amp;=</td><td>按位与且赋值运算符</td><td>C &amp;= 2 等同于 C = C &amp; 2</td></tr><tr><td>^=</td><td>按位异或且赋值运算符</td><td>C ^= 2 等同于 C = C ^ 2</td></tr><tr><td></td><td>=</td><td>按位或且赋值运算符</td></tr></tbody></table><h2 id="杂项运算符-↦-sizeof-amp-三元"><a href="#杂项运算符-↦-sizeof-amp-三元" class="headerlink" title="杂项运算符 ↦ sizeof &amp; 三元"></a>杂项运算符 ↦ sizeof &amp; 三元</h2><p>下表列出了 C 语言支持的其他一些重要的运算符，包括<strong>sizeof</strong>和**? :**。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>sizeof()</td><td>返回变量的大小。</td><td>sizeof(a) 将返回 4，其中 a 是整数。</td></tr><tr><td>&amp;</td><td>返回变量的地址。</td><td>&a; 将给出变量的实际地址。</td></tr><tr><td>*</td><td>指向一个变量。</td><td>*a; 将指向一个变量。</td></tr><tr><td>? :</td><td>条件表达式</td><td>如果条件为真 ? 则值为 X : 否则值为 Y</td></tr></tbody></table><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment">/* 三元运算符实例 */</span><br> <span class="hljs-attr">a</span> = <span class="hljs-number">10</span>;<br> <span class="hljs-attr">b</span> = (<span class="hljs-attr">a</span> == <span class="hljs-number">1</span>) ? <span class="hljs-number">20</span>: <span class="hljs-number">30</span>;<br> printf( <span class="hljs-string">&quot;b 的值是 %d\n&quot;</span>, b );<br></code></pre></td></tr></table></figure><h2 id="C-中的运算符优先级"><a href="#C-中的运算符优先级" class="headerlink" title="C 中的运算符优先级"></a>C 中的运算符优先级</h2><p>运算符的优先级确定表达式中项的组合。这会影响到一个表达式如何计算。某些运算符比其他运算符有更高的优先级，例如，乘除运算符具有比加减运算符更高的优先级。<br>例如 x = 7 + 3 * 2，在这里，x 被赋值为 13，而不是 20，因为运算符 * 具有比 + 更高的优先级，所以首先计算乘法 3*2，然后再加上 7。<br>下表将按运算符优先级从高到低列出各个运算符，具有较高优先级的运算符出现在表格的上面，具有较低优先级的运算符出现在表格的下面。在表达式中，较高优先级的运算符会优先被计算。</p><table><thead><tr><th>类别</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>后缀</td><td>() [] -&gt; . ++ - -</td><td>从左到右</td></tr><tr><td>一元</td><td>+ - ! ~ ++ - - (type)* &amp; sizeof</td><td>从右到左</td></tr><tr><td>乘除</td><td>* / %</td><td>从左到右</td></tr><tr><td>加减</td><td>+ -</td><td>从左到右</td></tr><tr><td>移位</td><td>&lt;&lt; &gt;&gt;</td><td>从左到右</td></tr><tr><td>关系</td><td>&lt; &lt;= &gt; &gt;=</td><td>从左到右</td></tr><tr><td>相等</td><td>== !=</td><td>从左到右</td></tr><tr><td>位与 AND</td><td>&amp;</td><td>从左到右</td></tr><tr><td>位异或 XOR</td><td>^</td><td>从左到右</td></tr><tr><td>位或 OR</td><td></td><td></td></tr><tr><td>逻辑与 AND</td><td>&amp;&amp;</td><td>从左到右</td></tr><tr><td>逻辑或 OR</td><td></td><td></td></tr><tr><td>条件</td><td>?:</td><td>从右到左</td></tr><tr><td>赋值</td><td>= += -= *= /= %=&gt;&gt;= &lt;&lt;= &amp;= ^=</td><td>=</td></tr><tr><td>逗号</td><td>,</td><td>从左到右</td></tr></tbody></table><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="C-判断"><a href="#C-判断" class="headerlink" title="C 判断"></a>C 判断</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/svg/2681770/1628870120500-01bc7933-9544-4d6e-aab4-c7c5313e1707.svg#clientId=ub6a93093-d6c0-4&from=paste&id=u5ad7f64f&margin=%5Bobject%20Object%5D&originHeight=475&originWidth=327&originalType=url&ratio=1&status=done&style=none&taskId=uf40a3388-61a6-445f-b841-c08bdc06ba0"><br>判断结构要求程序员指定一个或多个要评估或测试的条件，以及条件为真时要执行的语句（必需的）和条件为假时要执行的语句（可选的）。<br>C 语言把任何<strong>非零</strong>和<strong>非空</strong>的值假定为<strong>true</strong>，把<strong>零</strong>或<strong>null</strong>假定为<strong>false</strong>。<br>下面是大多数编程语言中典型的判断结构的一般形式：</p><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><p>C 语言提供了以下类型的判断语句。点击链接查看每个语句的细节。</p><table><thead><tr><th>语句</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-if.html">if 语句</a></td><td>一个<strong>if 语句</strong>由一个布尔表达式后跟一个或多个语句组成。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-if-else.html">if…else 语句</a></td><td>一个<strong>if 语句</strong>后可跟一个可选的<strong>else 语句</strong>，else 语句在布尔表达式为假时执行。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-nested-if.html">嵌套 if 语句</a></td><td>您可以在一个<strong>if</strong>或<strong>else if</strong>语句内使用另一个<strong>if</strong>或<strong>else if</strong>语句。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-switch.html">switch 语句</a></td><td>一个<strong>switch</strong>语句允许测试一个变量等于多个值时的情况。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-nested-switch.html">嵌套 switch 语句</a></td><td>您可以在一个<strong>switch</strong>语句内使用另一个<strong>switch</strong>语句。</td></tr></tbody></table><h2 id="运算符-三元运算符"><a href="#运算符-三元运算符" class="headerlink" title="? : 运算符(三元运算符)"></a>? : 运算符(三元运算符)</h2><p>我们已经在前面的章节中讲解了<strong>条件运算符 ? :<strong>，可以用来替代</strong>if…else</strong>语句。它的一般形式如下：<br>Exp1?Exp2:Exp3;<br>其中，Exp1、Exp2 和 Exp3 是表达式。请注意，冒号的使用和位置。<br>? 表达式的值是由 Exp1 决定的。如果 Exp1 为真，则计算 Exp2 的值，结果即为整个表达式的值。如果 Exp1 为假，则计算 Exp3 的值，结果即为整个表达式的值。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628870120610-dd7e8a3f-c3a3-4b6d-aef0-0f1855f5be49.png#clientId=ub6a93093-d6c0-4&from=paste&id=u1b2455fa&margin=%5Bobject%20Object%5D&originHeight=359&originWidth=449&originalType=url&ratio=1&status=done&style=none&taskId=ud265fe85-3ea6-4cfe-8a52-43e6917c8f8"></p><h1 id="C循环"><a href="#C循环" class="headerlink" title="C循环"></a>C循环</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628870163773-69017773-b9a3-4a62-bf5e-240d1ff9ff7b.png#clientId=ub6a93093-d6c0-4&from=paste&id=uc85faa2a&margin=%5Bobject%20Object%5D&originHeight=480&originWidth=450&originalType=url&ratio=1&status=done&style=none&taskId=uef8906b5-7282-4c7c-bd52-ca36917d848"><br>有的时候，我们可能需要多次执行同一块代码。一般情况下，语句是按顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。<br>编程语言提供了更为复杂执行路径的多种控制结构。<br>循环语句允许我们多次执行一个语句或语句组，下面是大多数编程语言中循环语句的流程图：</p><h2 id="循环类型"><a href="#循环类型" class="headerlink" title="循环类型"></a>循环类型</h2><p>C 语言提供了以下几种循环类型。点击链接查看每个类型的细节。</p><table><thead><tr><th>循环类型</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-while-loop.html">while 循环</a></td><td>当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-for-loop.html">for 循环</a></td><td>多次执行一个语句序列，简化管理循环变量的代码。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-do-while-loop.html">do…while 循环</a></td><td>除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-nested-loops.html">嵌套循环</a></td><td>您可以在 while、for 或 do..while 循环内使用一个或多个循环。</td></tr></tbody></table><h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2><p>循环控制语句改变你代码的执行顺序。通过它你可以实现代码的跳转。<br>C 提供了下列的循环控制语句。点击链接查看每个语句的细节。</p><table><thead><tr><th>控制语句</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-break-statement.html">break 语句</a></td><td>终止<strong>循环</strong>或<strong>switch</strong>语句，程序流将继续执行紧接着循环或 switch 的下一条语句。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-continue-statement.html">continue 语句</a></td><td>告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-goto-statement.html">goto 语句</a></td><td>将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句</td></tr></tbody></table><h1 id="C函数"><a href="#C函数" class="headerlink" title="C函数"></a>C函数</h1><p>函数是一组一起执行一个任务的语句。每个 C 程序都至少有一个函数，即主函数<strong>main()<strong>，所有简单的程序都可以定义其他额外的函数。<br>您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。<br>函数</strong>声明</strong>告诉编译器函数的名称、返回类型和参数。函数<strong>定义</strong>提供了函数的实际主体。<br>C 标准库提供了大量的程序可以调用的内置函数。例如，函数**strcat()<strong>用来连接两个字符串，函数</strong>memcpy()**用来复制内存到另一个位置。<br>函数还有很多叫法，比如方法、子例程或程序，等等。</p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>C 语言中的函数定义的一般形式如下：<br>return_type function_name( parameter list ) {    body of the function }<br>在 C 语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p><ul><li><strong>返回类型：</strong>一个函数可以返回一个值。<strong>return_type</strong>是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字<strong>void</strong>。</li><li><strong>函数名称：</strong>这是函数的实际名称。函数名和参数列表一起构成了函数签名。</li><li><strong>参数：</strong>参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。</li><li><strong>函数主体：</strong>函数主体包含一组定义函数执行任务的语句。</li></ul><p>以下是**max()**函数的源代码。该函数有两个参数 num1 和 num2，会返回这两个数中较大的那个数：</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nim">/* 函数返回两个数中较大的那个数 */<br><span class="hljs-built_in">int</span> max(<span class="hljs-built_in">int</span> num1, <span class="hljs-built_in">int</span> num2) <br>&#123;<br>   /* 局部变量声明 */<br>   <span class="hljs-built_in">int</span> <span class="hljs-literal">result</span>;<br> <br>   <span class="hljs-keyword">if</span> (num1 &gt; num2)<br>      <span class="hljs-literal">result</span> = num1;<br>   <span class="hljs-keyword">else</span><br>      <span class="hljs-literal">result</span> = num2;<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">result</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>函数<strong>声明</strong>会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。<br>函数声明包括以下几个部分：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">return_type <span class="hljs-keyword">function</span><span class="hljs-constructor">_name( <span class="hljs-params">parameter</span> <span class="hljs-params">list</span> )</span>; <br></code></pre></td></tr></table></figure><p>针对上面定义的函数 max()，以下是函数声明：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-type">int</span> <span class="hljs-built_in">max</span>(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2); <br></code></pre></td></tr></table></figure><p>在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-type">int</span> <span class="hljs-built_in">max</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>);<br></code></pre></td></tr></table></figure><p>当您在一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。</p><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>创建 C 函数时，会定义函数做什么，然后通过调用函数来完成已定义的任务。<br>当程序调用函数时，程序控制权会转移给被调用的函数。被调用的函数执行已定义的任务，当函数的返回语句被执行时，或到达函数的结束括号时，会把程序控制权交还给主程序。<br>调用函数时，传递所需参数，如果函数返回一个值，则可以存储返回值。例如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">/* 函数声明 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span></span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">/* 局部变量定义 */</span><br>   <span class="hljs-keyword">int</span> a = <span class="hljs-number">100</span>;<br>   <span class="hljs-keyword">int</span> b = <span class="hljs-number">200</span>;<br>   <span class="hljs-keyword">int</span> ret;<br> <br>   <span class="hljs-comment">/* 调用函数来获取最大值 */</span><br>   ret = <span class="hljs-built_in">max</span>(a, b);<br> <br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Max value is : %d\n&quot;</span>, ret );<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-comment">/* 函数返回两个数中较大的那个数 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span> </span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">/* 局部变量声明 */</span><br>   <span class="hljs-keyword">int</span> result;<br> <br>   <span class="hljs-keyword">if</span> (num1 &gt; num2)<br>      result = num1;<br>   <span class="hljs-keyword">else</span><br>      result = num2;<br> <br>   <span class="hljs-keyword">return</span> result; <br>&#125;<br><br><br>把 <span class="hljs-built_in">max</span>() 函数和 <span class="hljs-built_in">main</span>() 函数放一块，编译源代码。当运行最后的可执行文件时，会产生下列结果：<br><br>Max value is : <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><p>把 max() 函数和 main() 函数放一块，编译源代码。当运行最后的可执行文件时，会产生下列结果：<br>Max value is : 200 </p><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的<strong>形式参数</strong>。<br>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。<br>当调用函数时，有两种向函数传递参数的方式：</p><table><thead><tr><th>调用类型</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-function-call-by-value.html">传值调用</a></td><td>该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-call-by-pointer.html">引用调用</a></td><td>通过指针传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。</td></tr></tbody></table><p>默认情况下，C 使用<strong>传值调用</strong>来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的实际参数。<br>​</p><h1 id="C-作用域规则"><a href="#C-作用域规则" class="headerlink" title="C 作用域规则"></a>C 作用域规则</h1><p>任何一种编程中，作用域是程序中定义的变量所存在的区域，超过该区域变量就不能被访问。C 语言中有三个地方可以声明变量：</p><ol><li>在函数或块内部的<strong>局部</strong>变量</li><li>在所有函数外部的<strong>全局</strong>变量</li><li>在<strong>形式</strong>参数的函数参数定义中</li></ol><p>让我们来看看什么是<strong>局部</strong>变量、<strong>全局</strong>变量和<strong>形式</strong>参数。</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>在某个函数或块的内部声明的变量称为局部变量。它们只能被该函数或该代码块内部的语句使用。局部变量在函数外部是不可知的。下面是使用局部变量的实例。在这里，所有的变量 a、b 和 c 是 main() 函数的局部变量。<strong>​</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* 局部变量声明 */</span><br>  <span class="hljs-keyword">int</span> a, b;<br>  <span class="hljs-keyword">int</span> c;<br> <br>  <span class="hljs-comment">/* 实际初始化 */</span><br>  a = <span class="hljs-number">10</span>;<br>  b = <span class="hljs-number">20</span>;<br>  c = a + b;<br> <br>  <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of a = %d, b = %d and c = %d\n&quot;</span>, a, b, c);<br> <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>全局变量是定义在函数外部，通常是在程序的顶部。全局变量在整个程序生命周期内都是有效的，在任意的函数内部能访问全局变量。<br>全局变量可以被任何函数访问。也就是说，全局变量在声明后整个程序中都是可用的。下面是使用全局变量和局部变量的实例：<br>​</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">/* 全局变量声明 */</span><br><span class="hljs-keyword">int</span> g;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* 局部变量声明 */</span><br>  <span class="hljs-keyword">int</span> a, b;<br> <br>  <span class="hljs-comment">/* 实际初始化 */</span><br>  a = <span class="hljs-number">10</span>;<br>  b = <span class="hljs-number">20</span>;<br>  g = a + b;<br> <br>  <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of a = %d, b = %d and g = %d\n&quot;</span>, a, b, g);<br> <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在程序中，局部变量和全局变量的名称可以相同，但是在函数内，如果两个名字相同，会使用局部变量值，全局变量不会被使用。下面是一个实例：<br>​</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">/* 全局变量声明 */</span><br><span class="hljs-keyword">int</span> g = <span class="hljs-number">20</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* 局部变量声明 */</span><br>  <span class="hljs-keyword">int</span> g = <span class="hljs-number">10</span>;<br> <br>  <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of g = %d\n&quot;</span>,  g);<br> <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>value of g = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="形式参数"><a href="#形式参数" class="headerlink" title="形式参数"></a>形式参数</h2><p>函数的参数，形式参数，被当作该函数内的局部变量，如果与全局变量同名它们会优先使用。下面是一个实例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">/* 全局变量声明 */</span><br><span class="hljs-keyword">int</span> a = <span class="hljs-number">20</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* 在主函数中的局部变量声明 */</span><br>  <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>  <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span>;<br> <br>  <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of a in main() = %d\n&quot;</span>,  a);<br>  c = <span class="hljs-built_in">sum</span>( a, b);<br>  <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of c in main() = %d\n&quot;</span>,  c);<br> <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-comment">/* 添加两个整数的函数 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of a in sum() = %d\n&quot;</span>,  a);<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of b in sum() = %d\n&quot;</span>,  b);<br> <br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br>当上面的代码被编译和执行时，它会产生下列结果：<br><br><span class="hljs-function">value of a in <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">10</span><br><span class="hljs-function">value of a in <span class="hljs-title">sum</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">10</span><br><span class="hljs-function">value of b in <span class="hljs-title">sum</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">20</span><br><span class="hljs-function">value of c in <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">全局变量与局部变量在内存中的区别：<br>全局变量保存在内存的全局存储区中，占用静态的存储单元；<br>局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。<br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/w3cnote/cpp-static-usage.html">C/C++ 中 static 的用法全局变量与局部变量</a><br>​</p><h2 id="初始化局部变量和全局变量"><a href="#初始化局部变量和全局变量" class="headerlink" title="初始化局部变量和全局变量"></a>初始化局部变量和全局变量</h2><p>当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。定义全局变量时，系统会自动对其初始化，如下所示：</p><table><thead><tr><th>数据类型</th><th>初始化默认值</th></tr></thead><tbody><tr><td>int</td><td>0</td></tr><tr><td>char</td><td>‘\0’</td></tr><tr><td>float</td><td>0</td></tr><tr><td>double</td><td>0</td></tr><tr><td>pointer</td><td>NULL</td></tr></tbody></table><p>正确地初始化变量是一个良好的编程习惯，否则有时候程序可能会产生意想不到的结果，因为未初始化的变量会导致一些在内存位置中已经可用的垃圾值。</p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能车总结-Aurora队</title>
    <link href="/2021/08/12/Aurora/"/>
    <url>/2021/08/12/Aurora/</url>
    
    <content type="html"><![CDATA[<p><a name="ZVacC"></a></p><h1 id="备赛历程2021年8月12日夜"><a href="#备赛历程2021年8月12日夜" class="headerlink" title="备赛历程2021年8月12日夜"></a>备赛历程2021年8月12日夜</h1><p>   首先就是寒假学习了一些基本的知识，然后把需要的板子都画了一下<del>（只是画了）</del>，最开始采用了供电与其他的部分分离的方案，但是由于最初缺乏经验，没有寻找和解决问题的能力，所以一开始磕磕绊绊的，烧了不少东西，最终有了一块勉强可以用的板子，然后是漫长的等待，因为回来的时候有一版板子忘带了，等快递等了10天（大家千万不要发申通快递，忙的时候要人命）等待的时候去焊接了电驱板，，发现板子一接电就烧驱动芯片，找了十天之后最后发现封装（ir2104与ir2184的引脚不同，不可以通用）选错了，于是重新画了电驱，兴冲冲拿回来按模块焊接测试，一接电又烧了，在仔细对照了封装之后，发现没有问题，于是仔细把数据手册又读了一遍，发现了些许的不同，ir2184的SD引脚要求输入电压最大是逻辑地＋5V，也就是5v，而ir2104没这个限制，它可以达到vcc，也就是我板子上的12v。于又重新画了一版。<br />   这个时候到了主控板，发现主控板的晶振选型不对，把无源晶振买成了有源的，板子上画的是无源的（吐血），然后准备重画一版，而且由于焊接技术的问题，我焊废了好几块板子，焊废了几个芯片。这个时候我的队友提议换芯片，决定采用另一款芯片，我决定不影响队伍进度，直接是使用核心板，然后由于电源板比较费，最后决定废弃这个方案，将电源集中到主控板上，在画好焊接过程中一切安稳，于是这个板子到最后都没有进行更改，只是选用的稳压芯片出现了负载过多降压的问题，最后发觉应该和电感有关，查阅后发现这个电感的额定电流为800mA，而我的DC芯片输出最大电流为3A，更换了电感比较良好，然后过了一段时间，发现又出现了这个问题，对比另一辆车的板子，在外设相符的情况下，没有出现这种问题，于是看了看芯片的厂商，发现贵的那个反而出问题多，果断换成另一个，再没出现过这个问题。<br />   然后到了运放板上，一开始采用了lmv358一级放大的方案，后面才发觉它的增益带宽积其实不足以支持20Khz的电磁波信号放大多少的，会失真，而且在和队友商议一段时间以后，决定换成运放与电感分离的方案。，然后发觉这个方案不是很理想，最后将谐振放大电路放在一个单独的电感板上，采用了gh1.25的接口（记住这玩意，我后头要吐槽），然后第一个比较正确的运放就出现了，可以正常使用，然后开始了其他的改装，观察其他的同学的板子，发现其上一级放大与二级放大中间有一个串联的电容，在查询一些资料并询问同学后，没有得到很好的解释，最后还是尝试画了一个试一试效果，结果完全没法导通，于是最后就放弃了。期间更换了很多的运放芯片，有5种左右吧，然出现了问题，运放芯片经常性的烧毁，在和学长简单的交流后，发现运放输入端其实可以加入保护的，尤其各种运放的输入其实负电压最多是-0.3V，也就是输入过多的可能会烧毁，于是加了钳位保护（期前尝试将整流搬到第一级输入端，发现二极管管压降不允许），奇特的是lm358没有烧毁过（lm358yyds）。然后gh1.25就比较内啥了，队友使用车辆下手比较重（doge），接口很容易松，而且由于焊盘的面积不够大了，焊接过后其实很容易被扯下来，最后由于焊盘被扯掉，我重焊了好几次，后期大部分的问题就是焊盘和接口松了然后接触不良的问题，比较容易解决但是很烦人，以后再也不用这玩意了，主控板的开关也是很令人头疼的问题，多次开关之后就会断掉，后期调车比较频繁，隔几天就坏了，就要更换。<br />  然后等了零件，给直立车用的电驱出了问题，硬件mos管开关的时间问题，导致直立环很软，在行驶过程中很容易坏掉，再经过测量后发现还是有所差距，而且这个量无法进行准确预算，只能多找几种mos管进行测试，最后盯上了新生板的mos管，使用后很不错，但是由于立创没货，只能从新生板上拆了_<strong>（被迫）。</strong><em><br /></em>**  **_以上就是画板子的经历，然后说说队友吧，我组队的都是很强的软件选手，当时做硬件也是觉得自己能力不太够去替代他们做软件，事实也证明了这一点，他们总是会想出一些比较新奇但却又符合规律的想法，然后付诸实践，而且调试能力都很强，因为我个人原因对于进度拖延而不怪罪，和我一起做智能车，实属不易，在此感谢。对于队友间的交流，还是很融洽的，但是由于软硬分的比较开，导致很多时候我说的他们听不明白，他们说的我听不明白，间隔还是比较大的，但是这也更考验了队友间的信任，再次感谢吧。</p><p><a name="WjgxJ"></a></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><a name="WfusG"></a></p><h1 id="对实验室的建议（待完善）"><a href="#对实验室的建议（待完善）" class="headerlink" title="对实验室的建议（待完善）"></a>对实验室的建议（待完善）</h1><p>  一个就是例会，我觉得现在的例会可能有点水了，大家大部分只是说说近期干了什么，好像例会只是一个检查，大家说一些事情证明自己没划水，首先我觉得目前智能车各组分的比较开，而公共的知识点大家可能也不太用交流，我觉可以变成大家总结自己的学习内容并应用，然后在例会上简短说明可以应用的方向，并总结在语雀上供大家学习。<br />​</p><p>​<br /><br><a name="Gm4vC"></a></p><h1 id="未来规划"><a href="#未来规划" class="headerlink" title="未来规划"></a>未来规划</h1><p>  还是决定跟着实验室的培训走，然后发觉自己的嵌入式写代码的能力有些欠缺，还是要提高一下，至少能够写一些简单的测试程序去测试板子。<br />  然后跟着自己的兴趣走吧。<br><a name="RbzLE"></a></p><h1 id="技术个人总结（13号再补充，累了）"><a href="#技术个人总结（13号再补充，累了）" class="headerlink" title="技术个人总结（13号再补充，累了）"></a>技术个人总结（13号再补充，累了）</h1>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vanassian</title>
    <link href="/2021/08/12/xx/"/>
    <url>/2021/08/12/xx/</url>
    
    <content type="html"><![CDATA[<h1 id="目前菜狗一只"><a href="#目前菜狗一只" class="headerlink" title="目前菜狗一只"></a>目前菜狗一只</h1><p>跪拜绍俊巨巨</p><h1 id="目前任务"><a href="#目前任务" class="headerlink" title="目前任务"></a>目前任务</h1><p>1.软件<br>     - 学习学习单片机，提高调试能力<br>     - 学c++，python<br>     - 学学linux<br>2.硬件<br>     - 学学各种运放<br>     - 画点系统板<br>     - 学学电机相关的知识</p>]]></content>
    
    
    <categories>
      
      <category>无意义狂怒</category>
      
    </categories>
    
    
    <tags>
      
      <tag>菜狗介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对于FOC的探索</title>
    <link href="/2021/08/12/%E6%8A%80%E6%9C%AF-1/"/>
    <url>/2021/08/12/%E6%8A%80%E6%9C%AF-1/</url>
    
    <content type="html"><![CDATA[<h1 id="供上稚辉君神文"><a href="#供上稚辉君神文" class="headerlink" title="供上稚辉君神文"></a><a href="https://zhuanlan.zhihu.com/p/147659820">供上稚辉君神文</a></h1>]]></content>
    
    
    <categories>
      
      <category>软硬</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电机驱动</tag>
      
      <tag>PCB</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
