<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言的复习</title>
    <link href="/2021/08/13/C%E8%AF%AD%E8%A8%80/"/>
    <url>/2021/08/13/C%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p>上一次使用C语言已经不知道是什么时候了。。。。。。。<br>感觉大部分语法已经忘得差不多了<br>也应该补一补了<br>就当作学习c++的前置课程吧</p></blockquote><h1 id="第一部分–数据类型"><a href="#第一部分–数据类型" class="headerlink" title="第一部分–数据类型"></a>第一部分–数据类型</h1><p><img src="/img/cjiegou.jpg" alt="数据结构"></p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。</p><p>C 标识符内不允许出现标点字符，比如 @、$ 和 %。C 是区分大小写的编程语言。因此，在 C 中，Manpower 和 manpower 是两个不同的标识符。</p><p>在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。<br>C 中的类型可分为以下几种：</p><table><thead><tr><th>序号</th><th>类型与描述</th><th>基本</th></tr></thead><tbody><tr><td>1</td><td><strong>基本类型：</strong></td><td>它们是算术类型，包括两种类型：整数类型和浮点类型。</td></tr><tr><td>2</td><td><strong>枚举类型：</strong></td><td>它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</td></tr><tr><td>3</td><td><strong>void 类型：</strong></td><td>类型说明符 <em>void</em> 表明没有可用的值。</td></tr><tr><td>4</td><td><strong>派生类型：</strong></td><td>它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</td></tr></tbody></table><p>数组类型和结构类型统称为聚合类型。函数的类型指的是函数返回值的类型。在本章节接下来的部分我们将介绍基本类型，其他几种类型会在后边几个章节中进行讲解。</p><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><p>下表列出了关于标准整数类型的存储大小和值范围的细节：</p><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th></tr></thead><tbody><tr><td>char</td><td>1 字节</td><td>-128 到 127 或 0 到 255</td></tr><tr><td>unsigned char</td><td>1 字节</td><td>0 到 255</td></tr><tr><td>signed char</td><td>1 字节</td><td>-128 到 127</td></tr><tr><td>int</td><td>2 或 4 字节</td><td>-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned int</td><td>2 或 4 字节</td><td>0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td>short</td><td>2 字节</td><td>-32,768 到 32,767</td></tr><tr><td>unsigned short</td><td>2 字节</td><td>0 到 65,535</td></tr><tr><td>long</td><td>4 字节</td><td>-2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned long</td><td>4 字节</td><td>0 到 4,294,967,295</td></tr></tbody></table><p><em>注意，各种类型的存储大小与系统位数有关，但目前通用的以64位系统为主。</em><br><em>以下列出了32位系统与64位系统的存储大小的差别（windows 相同）：</em><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2681770/1628825864733-942f7080-73d2-4d1c-a3d7-8e66962c1340.jpeg#clientId=u237d3db4-ce40-4&from=paste&id=u7feb9afa&margin=%5Bobject%20Object%5D&originHeight=654&originWidth=808&originalType=url&ratio=1&status=done&style=none&taskId=udd74ce17-9ef1-4ff7-8fc2-79d1b4a4094"><br>为了得到某个类型或某个变量在特定平台上的准确大小，您可以使用 <strong>sizeof</strong> 运算符。表达式 <em>sizeof(type)</em> 得到对象或类型的存储字节大小。</p><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><p>下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：</p><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th><th>精度</th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td>1.2E-38 到 3.4E+38</td><td>6 位有效位</td></tr><tr><td>double</td><td>8 字节</td><td>2.3E-308 到 1.7E+308</td><td>15 位有效位</td></tr><tr><td>long double</td><td>16 字节</td><td>3.4E-4932 到 1.1E+4932</td><td>19 位有效位</td></tr></tbody></table><h2 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h2><p>void 类型指定没有可用的值。它通常用于以下三种情况下：</p><table><thead><tr><th>序号</th><th>类型与描述</th><th>具体</th></tr></thead><tbody><tr><td>1</td><td><strong>函数返回为空</strong></td><td>C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 <strong>void exit (int status);</strong></td></tr><tr><td>2</td><td><strong>函数参数为空</strong></td><td>C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 <strong>int rand(void);</strong></td></tr><tr><td>3</td><td><strong>指针指向 void</strong></td><td>类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 *<em>void <em>malloc( size_t size );</em></em> 返回指向 void 的指针，可以转换为任何数据类型。</td></tr></tbody></table><h1 id="变-量"><a href="#变-量" class="headerlink" title="变 量"></a>变 量</h1><p>变量其实只不过是程序可操作的存储区的名称。C 中每个变量都有特定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。<br>变量的名称可以由字母、数字和下划线字符组成。它必须以字母或下划线开头。大写字母和小写字母是不同的，因为 C 是大小写敏感的。基于前一章讲解的基本类型，有以下几种基本的变量类型：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>char</td><td>通常是一个字节（八位）, 这是一个整数类型。</td></tr><tr><td>int</td><td>整型，4 个字节，取值范围 -2147483648 到 2147483647。</td></tr><tr><td>float</td><td>单精度浮点值。单精度是这样的格式，1位符号，8位指数，23位小数。</td></tr><tr><td><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628841834762-28b0e9ab-cda4-4ab6-9a1e-67d71ca21ad4.png#clientId=u37333e03-257d-4&from=paste&id=u2309fc56&margin=%5Bobject%20Object%5D&originHeight=75&originWidth=590&originalType=url&ratio=1&status=done&style=none&taskId=ua6a45f1e-a8b6-4b8d-912b-65028f5baed"></td><td></td></tr><tr><td>double</td><td>双精度浮点值。双精度是1位符号，11位指数，52位小数。</td></tr><tr><td><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628841834691-c7724710-d54c-4152-9851-07e1864fd56f.png#clientId=u37333e03-257d-4&from=paste&id=u8f3dff3e&margin=%5Bobject%20Object%5D&originHeight=125&originWidth=618&originalType=url&ratio=1&status=done&style=none&taskId=u7bd1c2fa-1b70-4121-82ae-9a12ffd3432"></td><td></td></tr><tr><td>void</td><td>表示类型的缺失。</td></tr></tbody></table><p>C 语言也允许定义各种其他类型的变量，比如枚举、指针、数组、结构、共用体等等，这将会在后续的章节中进行讲解，本章节我们先讲解基本变量类型。</p><h2 id="C-中的变量定义"><a href="#C-中的变量定义" class="headerlink" title="C 中的变量定义"></a>C 中的变量定义</h2><p>变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表，如下所示：<br>type variable_list;<br>在这里，<strong>type</strong> 必须是一个有效的 C 数据类型，可以是 char、w_char、int、float、double 或任何用户自定义的对象，<strong>variable_list</strong> 可以由一个或多个标识符名称组成，多个标识符之间用逗号分隔。下面列出几个有效的声明：<br>  int    i, j, k;<br>  char   c, ch;<br>  float  f, salary;<br>  double d;<br>行 <strong>int i, j, k;</strong> 声明并定义了变量 i、j 和 k，这指示编译器创建类型为 int 的名为 i、j、k 的变量。<br>变量可以在声明的时候被初始化（指定一个初始值）。初始化器由一个等号，后跟一个常量表达式组成，如下所示：<br>  type variable_name = value;</p><h2 id="C-中的变量声明"><a href="#C-中的变量声明" class="headerlink" title="C 中的变量声明"></a>C 中的变量声明</h2><p>变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。<br>变量的声明有两种情况：</p><ul><li><p>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</p></li><li><p>2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。</p></li><li><p>除非有extern关键字，否则都是变量的定义。</p><p>  extern int i; //声明，不是定义<br>  int i; //声明，也是定义</p><h2 id="C-中的左值（Lvalues）和右值（Rvalues）"><a href="#C-中的左值（Lvalues）和右值（Rvalues）" class="headerlink" title="C 中的左值（Lvalues）和右值（Rvalues）"></a>C 中的左值（Lvalues）和右值（Rvalues）</h2></li></ul><p>C 中有两种类型的表达式：</p><ol><li><strong>左值（lvalue）：</strong>指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li><li><strong>右值（rvalue）：</strong>术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li></ol><p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。</p><h1 id="常-量"><a href="#常-量" class="headerlink" title="常 量"></a>常 量</h1><h2 id="整数常量"><a href="#整数常量" class="headerlink" title="整数常量"></a>整数常量</h2><p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。<br>整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意。<br>下面列举几个整数常量的实例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">212</span><span class="hljs-regexp">/* 合法的 */</span><br><span class="hljs-number">215</span>u<span class="hljs-regexp">/* 合法的 */</span><br><span class="hljs-number">0</span>xFeeL<span class="hljs-regexp">/* 合法的 */</span><span class="hljs-number">1</span><br><span class="hljs-number">078</span><span class="hljs-regexp">/* 非法的：8 不是八进制的数字 */</span><br><span class="hljs-number">032</span>UU<span class="hljs-regexp">/* 非法的：不能重复后缀 */</span><br>以下是各种类型的整数常量的实例：<br><span class="hljs-number">85</span><span class="hljs-regexp">/* 十进制 */</span><br><span class="hljs-number">0213</span><span class="hljs-regexp">/* 八进制 */</span><br><span class="hljs-number">0</span>x4b<span class="hljs-regexp">/* 十六进制 */</span><br><span class="hljs-number">30</span><span class="hljs-regexp">/* 整数 */</span><br><span class="hljs-number">30</span>u<span class="hljs-regexp">/* 无符号整数 */</span><br><span class="hljs-number">30</span>l<span class="hljs-regexp">/* 长整数 */</span><br><span class="hljs-number">30</span>ul<span class="hljs-regexp">/* 无符号长整数 */</span><br></code></pre></td></tr></table></figure><h2 id="浮点常量"><a href="#浮点常量" class="headerlink" title="浮点常量"></a>浮点常量</h2><p>浮点常量由整数部分、小数点、小数部分和指数部分组成。您可以使用小数形式或者指数形式来表示浮点常量。<br>当使用小数形式表示时，必须包含整数部分、小数部分，或同时包含两者。当使用指数形式表示时， 必须包含小数点、指数，或同时包含两者。带符号的指数是用 e 或 E 引入的。<br>下面列举几个浮点常量的实例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">3.14159</span><span class="hljs-regexp">/* 合法的 */</span><br><span class="hljs-number">314159</span>E-<span class="hljs-number">5</span>L<span class="hljs-regexp">/* 合法的 */</span><br><span class="hljs-number">510</span>E<span class="hljs-regexp">/* 非法的：不完整的指数 */</span><br><span class="hljs-number">210</span>f<span class="hljs-regexp">/* 非法的：没有小数或指数 */</span><br>.e55 <span class="hljs-regexp">/* 非法的：缺少整数或分数 */</span><br></code></pre></td></tr></table></figure><h2 id="字符常量"><a href="#字符常量" class="headerlink" title="字符常量"></a>字符常量</h2><p>字符常量是括在单引号中，例如，’x’ 可以存储在<strong>char</strong>类型的简单变量中。<br>字符常量可以是一个普通的字符（例如 ‘x’）、一个转义序列（例如’\t’），或一个通用的字符（例如 ‘\u02C0’）。<br>在 C 中，有一些特定的字符，当它们前面有反斜杠时，它们就具有特殊的含义，被用来表示如换行符（\n）或制表符（\t）等。<br>下表列出了一些这样的转义序列码：<br>| 转义序列 | 含义 |<br>| — | — |<br>| \ | \ 字符 |<br>| &#39; | ‘ 字符 |<br>| &quot; | “ 字符 |<br>| ? | ? 字符 |<br>| \a | 警报铃声 |<br>| \b | 退格键 |<br>| \f | 换页符 |<br>| \n | 换行符 |<br>| \r | 回车 |<br>| \t | 水平制表符 |<br>| \v | 垂直制表符 |<br>| \ooo | 一到三位的八进制数 |<br>| \xhh . . . | 一个或多个数字的十六进制数 |</p><p>下面的实例显示了一些转义序列字符：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>​<br><br><span class="hljs-built_in">intmain</span>()<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello\tWorld\n\n&quot;</span>);<br>​<br><br>return0;<br>​<br><br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：<br>Hello World</p><h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><p>字符串字面值或常量是括在双引号 “” 中的。一个字符串包含类似于字符常量的字符：普通的字符、转义序列和通用的字符。<br>您可以使用空格做分隔符，把一个很长的字符串常量进行分行。<br>下面的实例显示了一些字符串常量。下面这三种形式所显示的字符串是相同的。<br>“hello, dear””hello, \ dear””hello, “”d””ear”</p><h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><p>在 C 中，有两种简单的定义常量的方式：</p><ol><li>使用**#define**预处理器。</li><li>使用<strong>const</strong>关键字。</li></ol><h3 id="define-预处理器"><a href="#define-预处理器" class="headerlink" title="#define 预处理器"></a>#define 预处理器</h3><p>下面是使用 #define 预处理器定义常量的形式：<br>#define identifier value</p><h3 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h3><p>您可以使用<strong>const</strong>前缀声明指定类型的常量，如下所示：<br>const type variable = value;<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628843047923-09fbe6b4-9f12-4c95-aeec-29f1bda13af5.png#clientId=ue46576e3-d36e-4&from=paste&id=ufc4f2133&margin=%5Bobject%20Object%5D&originHeight=401&originWidth=661&originalType=url&ratio=1&status=done&style=none&taskId=u193ee9c5-eba7-4d43-8773-6fda11040ac"></p>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能车总结-Aurora队</title>
    <link href="/2021/08/12/Aurora/"/>
    <url>/2021/08/12/Aurora/</url>
    
    <content type="html"><![CDATA[<p><a name="ZVacC"></a></p><h1 id="备赛历程2021年8月12日夜"><a href="#备赛历程2021年8月12日夜" class="headerlink" title="备赛历程2021年8月12日夜"></a>备赛历程2021年8月12日夜</h1><p>   首先就是寒假学习了一些基本的知识，然后把需要的板子都画了一下<del>（只是画了）</del>，最开始采用了供电与其他的部分分离的方案，但是由于最初缺乏经验，没有寻找和解决问题的能力，所以一开始磕磕绊绊的，烧了不少东西，最终有了一块勉强可以用的板子，然后是漫长的等待，因为回来的时候有一版板子忘带了，等快递等了10天（大家千万不要发申通快递，忙的时候要人命）等待的时候去焊接了电驱板，，发现板子一接电就烧驱动芯片，找了十天之后最后发现封装（ir2104与ir2184的引脚不同，不可以通用）选错了，于是重新画了电驱，兴冲冲拿回来按模块焊接测试，一接电又烧了，在仔细对照了封装之后，发现没有问题，于是仔细把数据手册又读了一遍，发现了些许的不同，ir2184的SD引脚要求输入电压最大是逻辑地＋5V，也就是5v，而ir2104没这个限制，它可以达到vcc，也就是我板子上的12v。于又重新画了一版。<br />   这个时候到了主控板，发现主控板的晶振选型不对，把无源晶振买成了有源的，板子上画的是无源的（吐血），然后准备重画一版，而且由于焊接技术的问题，我焊废了好几块板子，焊废了几个芯片。这个时候我的队友提议换芯片，决定采用另一款芯片，我决定不影响队伍进度，直接是使用核心板，然后由于电源板比较费，最后决定废弃这个方案，将电源集中到主控板上，在画好焊接过程中一切安稳，于是这个板子到最后都没有进行更改，只是选用的稳压芯片出现了负载过多降压的问题，最后发觉应该和电感有关，查阅后发现这个电感的额定电流为800mA，而我的DC芯片输出最大电流为3A，更换了电感比较良好，然后过了一段时间，发现又出现了这个问题，对比另一辆车的板子，在外设相符的情况下，没有出现这种问题，于是看了看芯片的厂商，发现贵的那个反而出问题多，果断换成另一个，再没出现过这个问题。<br />   然后到了运放板上，一开始采用了lmv358一级放大的方案，后面才发觉它的增益带宽积其实不足以支持20Khz的电磁波信号放大多少的，会失真，而且在和队友商议一段时间以后，决定换成运放与电感分离的方案。，然后发觉这个方案不是很理想，最后将谐振放大电路放在一个单独的电感板上，采用了gh1.25的接口（记住这玩意，我后头要吐槽），然后第一个比较正确的运放就出现了，可以正常使用，然后开始了其他的改装，观察其他的同学的板子，发现其上一级放大与二级放大中间有一个串联的电容，在查询一些资料并询问同学后，没有得到很好的解释，最后还是尝试画了一个试一试效果，结果完全没法导通，于是最后就放弃了。期间更换了很多的运放芯片，有5种左右吧，然出现了问题，运放芯片经常性的烧毁，在和学长简单的交流后，发现运放输入端其实可以加入保护的，尤其各种运放的输入其实负电压最多是-0.3V，也就是输入过多的可能会烧毁，于是加了钳位保护（期前尝试将整流搬到第一级输入端，发现二极管管压降不允许），奇特的是lm358没有烧毁过（lm358yyds）。然后gh1.25就比较内啥了，队友使用车辆下手比较重（doge），接口很容易松，而且由于焊盘的面积不够大了，焊接过后其实很容易被扯下来，最后由于焊盘被扯掉，我重焊了好几次，后期大部分的问题就是焊盘和接口松了然后接触不良的问题，比较容易解决但是很烦人，以后再也不用这玩意了，主控板的开关也是很令人头疼的问题，多次开关之后就会断掉，后期调车比较频繁，隔几天就坏了，就要更换。<br />  然后等了零件，给直立车用的电驱出了问题，硬件mos管开关的时间问题，导致直立环很软，在行驶过程中很容易坏掉，再经过测量后发现还是有所差距，而且这个量无法进行准确预算，只能多找几种mos管进行测试，最后盯上了新生板的mos管，使用后很不错，但是由于立创没货，只能从新生板上拆了_<strong>（被迫）。</strong><em><br /></em>**  **_以上就是画板子的经历，然后说说队友吧，我组队的都是很强的软件选手，当时做硬件也是觉得自己能力不太够去替代他们做软件，事实也证明了这一点，他们总是会想出一些比较新奇但却又符合规律的想法，然后付诸实践，而且调试能力都很强，因为我个人原因对于进度拖延而不怪罪，和我一起做智能车，实属不易，在此感谢。对于队友间的交流，还是很融洽的，但是由于软硬分的比较开，导致很多时候我说的他们听不明白，他们说的我听不明白，间隔还是比较大的，但是这也更考验了队友间的信任，再次感谢吧。</p><p><a name="WjgxJ"></a></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><a name="WfusG"></a></p><h1 id="对实验室的建议（待完善）"><a href="#对实验室的建议（待完善）" class="headerlink" title="对实验室的建议（待完善）"></a>对实验室的建议（待完善）</h1><p>  一个就是例会，我觉得现在的例会可能有点水了，大家大部分只是说说近期干了什么，好像例会只是一个检查，大家说一些事情证明自己没划水，首先我觉得目前智能车各组分的比较开，而公共的知识点大家可能也不太用交流，我觉可以变成大家总结自己的学习内容并应用，然后在例会上简短说明可以应用的方向，并总结在语雀上供大家学习。<br />​</p><p>​<br /><br><a name="Gm4vC"></a></p><h1 id="未来规划"><a href="#未来规划" class="headerlink" title="未来规划"></a>未来规划</h1><p>  还是决定跟着实验室的培训走，然后发觉自己的嵌入式写代码的能力有些欠缺，还是要提高一下，至少能够写一些简单的测试程序去测试板子。<br />  然后跟着自己的兴趣走吧。<br><a name="RbzLE"></a></p><h1 id="技术个人总结（13号再补充，累了）"><a href="#技术个人总结（13号再补充，累了）" class="headerlink" title="技术个人总结（13号再补充，累了）"></a>技术个人总结（13号再补充，累了）</h1>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vanassian</title>
    <link href="/2021/08/12/xx/"/>
    <url>/2021/08/12/xx/</url>
    
    <content type="html"><![CDATA[<h1 id="目前菜狗一只"><a href="#目前菜狗一只" class="headerlink" title="目前菜狗一只"></a>目前菜狗一只</h1><p>跪拜绍俊巨巨</p><h1 id="目前任务"><a href="#目前任务" class="headerlink" title="目前任务"></a>目前任务</h1><p>1.软件<br>     - 学习学习单片机，提高调试能力<br>     - 学c++，python<br>     - 学学linux<br>2.硬件<br>     - 学学各种运放<br>     - 画点系统板<br>     - 学学电机相关的知识</p>]]></content>
    
    
    <categories>
      
      <category>无意义狂怒</category>
      
    </categories>
    
    
    <tags>
      
      <tag>菜狗介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对于FOC的探索</title>
    <link href="/2021/08/12/%E6%8A%80%E6%9C%AF-1/"/>
    <url>/2021/08/12/%E6%8A%80%E6%9C%AF-1/</url>
    
    <content type="html"><![CDATA[<h1 id="供上稚辉君神文"><a href="#供上稚辉君神文" class="headerlink" title="供上稚辉君神文"></a><a href="https://zhuanlan.zhihu.com/p/147659820">供上稚辉君神文</a></h1>]]></content>
    
    
    <categories>
      
      <category>软硬</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电机驱动</tag>
      
      <tag>PCB</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
