<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言的复习</title>
    <link href="/2021/08/13/C%E8%AF%AD%E8%A8%80/"/>
    <url>/2021/08/13/C%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<blockquote><p>上一次使用C语言已经不知道是什么时候了。。。。。。。<br>感觉大部分语法已经忘得差不多了<br>也应该补一补了<br>就当作学习c++的前置课程吧</p></blockquote><h1 id="放一点学习网网站吧"><a href="#放一点学习网网站吧" class="headerlink" title="放一点学习网网站吧"></a>放一点学习网网站吧</h1><h2 id="C语言中文网"><a href="#C语言中文网" class="headerlink" title="C语言中文网"></a><a href="http://c.biancheng.net/c/">C语言中文网</a></h2><h2 id="BUNOOB-COM"><a href="#BUNOOB-COM" class="headerlink" title="BUNOOB.COM"></a><a href="https://www.runoob.com/cprogramming/c-tutorial.html">BUNOOB.COM</a></h2><h1 id="第一部分–数据类型"><a href="#第一部分–数据类型" class="headerlink" title="第一部分–数据类型"></a>第一部分–数据类型</h1><p><img src="/img/cjiegou.jpg" alt="数据结构"></p><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><p>C 标识符是用来标识变量、函数，或任何其他用户自定义项目的名称。一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。</p><p>C 标识符内不允许出现标点字符，比如 @、$ 和 %。C 是区分大小写的编程语言。因此，在 C 中，Manpower 和 manpower 是两个不同的标识符。</p><p>在 C 语言中，数据类型指的是用于声明不同类型的变量或函数的一个广泛的系统。变量的类型决定了变量存储占用的空间，以及如何解释存储的位模式。<br>C 中的类型可分为以下几种：</p><table><thead><tr><th>序号</th><th>类型与描述</th><th>基本</th></tr></thead><tbody><tr><td>1</td><td><strong>基本类型：</strong></td><td>它们是算术类型，包括两种类型：整数类型和浮点类型。</td></tr><tr><td>2</td><td><strong>枚举类型：</strong></td><td>它们也是算术类型，被用来定义在程序中只能赋予其一定的离散整数值的变量。</td></tr><tr><td>3</td><td><strong>void 类型：</strong></td><td>类型说明符 <em>void</em> 表明没有可用的值。</td></tr><tr><td>4</td><td><strong>派生类型：</strong></td><td>它们包括：指针类型、数组类型、结构类型、共用体类型和函数类型。</td></tr></tbody></table><p>数组类型和结构类型统称为聚合类型。函数的类型指的是函数返回值的类型。在本章节接下来的部分我们将介绍基本类型，其他几种类型会在后边几个章节中进行讲解。</p><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><p>下表列出了关于标准整数类型的存储大小和值范围的细节：</p><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th></tr></thead><tbody><tr><td>char</td><td>1 字节</td><td>-128 到 127 或 0 到 255</td></tr><tr><td>unsigned char</td><td>1 字节</td><td>0 到 255</td></tr><tr><td>signed char</td><td>1 字节</td><td>-128 到 127</td></tr><tr><td>int</td><td>2 或 4 字节</td><td>-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned int</td><td>2 或 4 字节</td><td>0 到 65,535 或 0 到 4,294,967,295</td></tr><tr><td>short</td><td>2 字节</td><td>-32,768 到 32,767</td></tr><tr><td>unsigned short</td><td>2 字节</td><td>0 到 65,535</td></tr><tr><td>long</td><td>4 字节</td><td>-2,147,483,648 到 2,147,483,647</td></tr><tr><td>unsigned long</td><td>4 字节</td><td>0 到 4,294,967,295</td></tr></tbody></table><p><em>注意，各种类型的存储大小与系统位数有关，但目前通用的以64位系统为主。</em><br><em>以下列出了32位系统与64位系统的存储大小的差别（windows 相同）：</em><br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2681770/1628825864733-942f7080-73d2-4d1c-a3d7-8e66962c1340.jpeg#clientId=u237d3db4-ce40-4&from=paste&id=u7feb9afa&margin=%5Bobject%20Object%5D&originHeight=654&originWidth=808&originalType=url&ratio=1&status=done&style=none&taskId=udd74ce17-9ef1-4ff7-8fc2-79d1b4a4094"><br>为了得到某个类型或某个变量在特定平台上的准确大小，您可以使用 <strong>sizeof</strong> 运算符。表达式 <em>sizeof(type)</em> 得到对象或类型的存储字节大小。</p><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><p>下表列出了关于标准浮点类型的存储大小、值范围和精度的细节：</p><table><thead><tr><th>类型</th><th>存储大小</th><th>值范围</th><th>精度</th></tr></thead><tbody><tr><td>float</td><td>4 字节</td><td>1.2E-38 到 3.4E+38</td><td>6 位有效位</td></tr><tr><td>double</td><td>8 字节</td><td>2.3E-308 到 1.7E+308</td><td>15 位有效位</td></tr><tr><td>long double</td><td>16 字节</td><td>3.4E-4932 到 1.1E+4932</td><td>19 位有效位</td></tr></tbody></table><h2 id="void-类型"><a href="#void-类型" class="headerlink" title="void 类型"></a>void 类型</h2><p>void 类型指定没有可用的值。它通常用于以下三种情况下：</p><table><thead><tr><th>序号</th><th>类型与描述</th><th>具体</th></tr></thead><tbody><tr><td>1</td><td><strong>函数返回为空</strong></td><td>C 中有各种函数都不返回值，或者您可以说它们返回空。不返回值的函数的返回类型为空。例如 <strong>void exit (int status);</strong></td></tr><tr><td>2</td><td><strong>函数参数为空</strong></td><td>C 中有各种函数不接受任何参数。不带参数的函数可以接受一个 void。例如 <strong>int rand(void);</strong></td></tr><tr><td>3</td><td><strong>指针指向 void</strong></td><td>类型为 void * 的指针代表对象的地址，而不是类型。例如，内存分配函数 *<em>void <em>malloc( size_t size );</em></em> 返回指向 void 的指针，可以转换为任何数据类型。</td></tr></tbody></table><h1 id="变-量"><a href="#变-量" class="headerlink" title="变 量"></a>变 量</h1><p>变量其实只不过是程序可操作的存储区的名称。C 中每个变量都有特定的类型，类型决定了变量存储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。<br>变量的名称可以由字母、数字和下划线字符组成。它必须以字母或下划线开头。大写字母和小写字母是不同的，因为 C 是大小写敏感的。基于前一章讲解的基本类型，有以下几种基本的变量类型：</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>char</td><td>通常是一个字节（八位）, 这是一个整数类型。</td></tr><tr><td>int</td><td>整型，4 个字节，取值范围 -2147483648 到 2147483647。</td></tr><tr><td>float</td><td>单精度浮点值。单精度是这样的格式，1位符号，8位指数，23位小数。</td></tr><tr><td><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628841834762-28b0e9ab-cda4-4ab6-9a1e-67d71ca21ad4.png#clientId=u37333e03-257d-4&from=paste&id=u2309fc56&margin=%5Bobject%20Object%5D&originHeight=75&originWidth=590&originalType=url&ratio=1&status=done&style=none&taskId=ua6a45f1e-a8b6-4b8d-912b-65028f5baed"></td><td></td></tr><tr><td>double</td><td>双精度浮点值。双精度是1位符号，11位指数，52位小数。</td></tr><tr><td><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628841834691-c7724710-d54c-4152-9851-07e1864fd56f.png#clientId=u37333e03-257d-4&from=paste&id=u8f3dff3e&margin=%5Bobject%20Object%5D&originHeight=125&originWidth=618&originalType=url&ratio=1&status=done&style=none&taskId=u7bd1c2fa-1b70-4121-82ae-9a12ffd3432"></td><td></td></tr><tr><td>void</td><td>表示类型的缺失。</td></tr></tbody></table><p>C 语言也允许定义各种其他类型的变量，比如枚举、指针、数组、结构、共用体等等，这将会在后续的章节中进行讲解，本章节我们先讲解基本变量类型。</p><h2 id="C-中的变量定义"><a href="#C-中的变量定义" class="headerlink" title="C 中的变量定义"></a>C 中的变量定义</h2><p>变量定义就是告诉编译器在何处创建变量的存储，以及如何创建变量的存储。变量定义指定一个数据类型，并包含了该类型的一个或多个变量的列表，如下所示：<br>type variable_list;<br>在这里，<strong>type</strong> 必须是一个有效的 C 数据类型，可以是 char、w_char、int、float、double 或任何用户自定义的对象，<strong>variable_list</strong> 可以由一个或多个标识符名称组成，多个标识符之间用逗号分隔。下面列出几个有效的声明：<br>  int    i, j, k;<br>  char   c, ch;<br>  float  f, salary;<br>  double d;<br>行 <strong>int i, j, k;</strong> 声明并定义了变量 i、j 和 k，这指示编译器创建类型为 int 的名为 i、j、k 的变量。<br>变量可以在声明的时候被初始化（指定一个初始值）。初始化器由一个等号，后跟一个常量表达式组成，如下所示：<br>  type variable_name = value;</p><h2 id="C-中的变量声明"><a href="#C-中的变量声明" class="headerlink" title="C 中的变量声明"></a>C 中的变量声明</h2><p>变量声明向编译器保证变量以指定的类型和名称存在，这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。变量声明只在编译时有它的意义，在程序连接时编译器需要实际的变量声明。<br>变量的声明有两种情况：</p><ul><li><p>1、一种是需要建立存储空间的。例如：int a 在声明的时候就已经建立了存储空间。</p></li><li><p>2、另一种是不需要建立存储空间的，通过使用extern关键字声明变量名而不定义它。 例如：extern int a 其中变量 a 可以在别的文件中定义的。</p></li><li><p>除非有extern关键字，否则都是变量的定义。</p><p>  extern int i; //声明，不是定义<br>  int i; //声明，也是定义</p></li></ul><h2 id="C-中的左值（Lvalues）和右值（Rvalues）"><a href="#C-中的左值（Lvalues）和右值（Rvalues）" class="headerlink" title="C 中的左值（Lvalues）和右值（Rvalues）"></a>C 中的左值（Lvalues）和右值（Rvalues）</h2><p>C 中有两种类型的表达式：</p><ol><li><strong>左值（lvalue）：</strong>指向内存位置的表达式被称为左值（lvalue）表达式。左值可以出现在赋值号的左边或右边。</li><li><strong>右值（rvalue）：</strong>术语右值（rvalue）指的是存储在内存中某些地址的数值。右值是不能对其进行赋值的表达式，也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。</li></ol><p>变量是左值，因此可以出现在赋值号的左边。数值型的字面值是右值，因此不能被赋值，不能出现在赋值号的左边。</p><h1 id="常-量"><a href="#常-量" class="headerlink" title="常 量"></a>常 量</h1><h2 id="整数常量"><a href="#整数常量" class="headerlink" title="整数常量"></a>整数常量</h2><p>整数常量可以是十进制、八进制或十六进制的常量。前缀指定基数：0x 或 0X 表示十六进制，0 表示八进制，不带前缀则默认表示十进制。<br>整数常量也可以带一个后缀，后缀是 U 和 L 的组合，U 表示无符号整数（unsigned），L 表示长整数（long）。后缀可以是大写，也可以是小写，U 和 L 的顺序任意。<br>下面列举几个整数常量的实例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">212</span><span class="hljs-regexp">/* 合法的 */</span><br><span class="hljs-number">215</span>u<span class="hljs-regexp">/* 合法的 */</span><br><span class="hljs-number">0</span>xFeeL<span class="hljs-regexp">/* 合法的 */</span><span class="hljs-number">1</span><br><span class="hljs-number">078</span><span class="hljs-regexp">/* 非法的：8 不是八进制的数字 */</span><br><span class="hljs-number">032</span>UU<span class="hljs-regexp">/* 非法的：不能重复后缀 */</span><br>以下是各种类型的整数常量的实例：<br><span class="hljs-number">85</span><span class="hljs-regexp">/* 十进制 */</span><br><span class="hljs-number">0213</span><span class="hljs-regexp">/* 八进制 */</span><br><span class="hljs-number">0</span>x4b<span class="hljs-regexp">/* 十六进制 */</span><br><span class="hljs-number">30</span><span class="hljs-regexp">/* 整数 */</span><br><span class="hljs-number">30</span>u<span class="hljs-regexp">/* 无符号整数 */</span><br><span class="hljs-number">30</span>l<span class="hljs-regexp">/* 长整数 */</span><br><span class="hljs-number">30</span>ul<span class="hljs-regexp">/* 无符号长整数 */</span><br></code></pre></td></tr></table></figure><h2 id="浮点常量"><a href="#浮点常量" class="headerlink" title="浮点常量"></a>浮点常量</h2><p>浮点常量由整数部分、小数点、小数部分和指数部分组成。您可以使用小数形式或者指数形式来表示浮点常量。<br>当使用小数形式表示时，必须包含整数部分、小数部分，或同时包含两者。当使用指数形式表示时， 必须包含小数点、指数，或同时包含两者。带符号的指数是用 e 或 E 引入的。<br>下面列举几个浮点常量的实例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-number">3.14159</span><span class="hljs-regexp">/* 合法的 */</span><br><span class="hljs-number">314159</span>E-<span class="hljs-number">5</span>L<span class="hljs-regexp">/* 合法的 */</span><br><span class="hljs-number">510</span>E<span class="hljs-regexp">/* 非法的：不完整的指数 */</span><br><span class="hljs-number">210</span>f<span class="hljs-regexp">/* 非法的：没有小数或指数 */</span><br>.e55 <span class="hljs-regexp">/* 非法的：缺少整数或分数 */</span><br></code></pre></td></tr></table></figure><h2 id="字符常量"><a href="#字符常量" class="headerlink" title="字符常量"></a>字符常量</h2><p>字符常量是括在单引号中，例如，’x’ 可以存储在<strong>char</strong>类型的简单变量中。<br>字符常量可以是一个普通的字符（例如 ‘x’）、一个转义序列（例如’\t’），或一个通用的字符（例如 ‘\u02C0’）。<br>在 C 中，有一些特定的字符，当它们前面有反斜杠时，它们就具有特殊的含义，被用来表示如换行符（\n）或制表符（\t）等。<br>下表列出了一些这样的转义序列码:</p><table><thead><tr><th>转义序列</th><th>含义</th></tr></thead><tbody><tr><td>\</td><td>\ 字符</td></tr><tr><td>&#39;</td><td>‘ 字符</td></tr><tr><td>&quot;</td><td>“ 字符</td></tr><tr><td>?</td><td>? 字符</td></tr><tr><td>\a</td><td>警报铃声</td></tr><tr><td>\b</td><td>退格键</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>水平制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\ooo</td><td>一到三位的八进制数</td></tr><tr><td>\xhh . . .</td><td>一个或多个数字的十六进制数</td></tr></tbody></table><p>下面的实例显示了一些转义序列字符：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>​<br><br><span class="hljs-built_in">intmain</span>()<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello\tWorld\n\n&quot;</span>);<br>​<br><br>return0;<br>​<br><br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：<br>Hello World</p><h2 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h2><p>字符串字面值或常量是括在双引号 “” 中的。一个字符串包含类似于字符常量的字符：普通的字符、转义序列和通用的字符。<br>您可以使用空格做分隔符，把一个很长的字符串常量进行分行。<br>下面的实例显示了一些字符串常量。下面这三种形式所显示的字符串是相同的。<br>“hello, dear””hello, \ dear””hello, “”d””ear”</p><h2 id="定义常量"><a href="#定义常量" class="headerlink" title="定义常量"></a>定义常量</h2><p>在 C 中，有两种简单的定义常量的方式：</p><ol><li>使用**#define**预处理器。</li><li>使用<strong>const</strong>关键字。</li></ol><h3 id="define-预处理器"><a href="#define-预处理器" class="headerlink" title="#define 预处理器"></a>#define 预处理器</h3><p>下面是使用 #define 预处理器定义常量的形式：<br>#define identifier value</p><h3 id="const-关键字"><a href="#const-关键字" class="headerlink" title="const 关键字"></a>const 关键字</h3><p>您可以使用<strong>const</strong>前缀声明指定类型的常量，如下所示：<br>const type variable = value;<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628843047923-09fbe6b4-9f12-4c95-aeec-29f1bda13af5.png#clientId=ue46576e3-d36e-4&from=paste&id=ufc4f2133&margin=%5Bobject%20Object%5D&originHeight=401&originWidth=661&originalType=url&ratio=1&status=done&style=none&taskId=u193ee9c5-eba7-4d43-8773-6fda11040ac"></p><h1 id="C-存储类"><a href="#C-存储类" class="headerlink" title="C 存储类"></a>C 存储类</h1><p>存储类定义 C 程序中变量/函数的范围（可见性）和生命周期。这些说明符放置在它们所修饰的类型之前。下面列出 C 程序中可用的存储类：</p><ul><li>auto</li><li>register</li><li>static</li><li>extern</li></ul><h2 id="auto-存储类"><a href="#auto-存储类" class="headerlink" title="auto 存储类"></a>auto 存储类</h2><p><strong>auto</strong> 存储类是所有局部变量默认的存储类。<br>{    int mount;    auto int month; }<br>上面的实例定义了两个带有相同存储类的变量，auto 只能用在函数内，即 auto 只能修饰局部变量。</p><h2 id="register-存储类"><a href="#register-存储类" class="headerlink" title="register 存储类"></a>register 存储类</h2><p><strong>register</strong> 存储类用于定义存储在寄存器中而不是 RAM 中的局部变量。这意味着变量的最大尺寸等于寄存器的大小（通常是一个词），且不能对它应用一元的 ‘&amp;’ 运算符（因为它没有内存位置）。<br>{    register int  miles; }<br>寄存器只用于需要快速访问的变量，比如计数器。还应注意的是，定义 ‘register’ 并不意味着变量将被存储在寄存器中，它意味着变量可能存储在寄存器中，这取决于硬件和实现的限制。</p><h2 id="static-存储类"><a href="#static-存储类" class="headerlink" title="static 存储类"></a>static 存储类</h2><p><strong>static</strong> 存储类指示编译器在程序的生命周期内保持局部变量的存在，而不需要在每次它进入和离开作用域时进行创建和销毁。因此，使用 static 修饰局部变量可以在函数调用之间保持局部变量的值。<br>static 修饰符也可以应用于全局变量。当 static 修饰全局变量时，会使变量的作用域限制在声明它的文件内。<br>全局声明的一个 static 变量或方法可以被任何函数或方法调用，只要这些方法出现在跟 static 变量或方法同一个文件中。<br>以下实例演示了 static 修饰全局变量和局部变量的应用：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">/* 函数声明 */</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br> <br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> count=<span class="hljs-number">10</span>;        <span class="hljs-comment">/* 全局变量 - static 是默认的 */</span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">while</span> (count--) &#123;<br>      <span class="hljs-built_in">func1</span>();<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">func1</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">/* &#x27;thingy&#x27; 是 &#x27;func1&#x27; 的局部变量 - 只初始化一次</span><br><span class="hljs-comment"> * 每次调用函数 &#x27;func1&#x27; &#x27;thingy&#x27; 值不会被重置。</span><br><span class="hljs-comment"> */</span>                <br>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> thingy=<span class="hljs-number">5</span>;<br>  thingy++;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; thingy 为 %d ， count 为 %d\n&quot;</span>, thingy, count);<br>&#125;<br></code></pre></td></tr></table></figure><p>实例中 count 作为全局变量可以在函数内使用，thingy 使用 static 修饰后，不会在每次调用时重置.</p><h2 id="extern-存储类"><a href="#extern-存储类" class="headerlink" title="extern 存储类"></a>extern 存储类</h2><p><strong>extern</strong> 存储类用于提供一个全局变量的引用，全局变量对所有的程序文件都是可见的。当您使用 <strong>extern</strong> 时，对于无法初始化的变量，会把变量名指向一个之前定义过的存储位置。<br>当您有多个文件且定义了一个可以在其他文件中使用的全局变量或函数时，可以在其他文件中使用 <em>extern</em> 来得到已定义的变量或函数的引用。可以这么理解，<em>extern</em> 是用来在另一个文件中声明一个全局变量或函数。<br>extern 修饰符通常用于当有两个或多个文件共享相同的全局变量或函数的时候。</p><h1 id="C运算符"><a href="#C运算符" class="headerlink" title="C运算符"></a>C运算符</h1><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C 语言内置了丰富的运算符，并提供了以下类型的运算符：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>杂项运算符</li></ul><p>本章将逐一介绍算术运算符、关系运算符、逻辑运算符、位运算符、赋值运算符和其他运算符。</p><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>下表显示了 C 语言支持的所有算术运算符。假设变量<strong>A</strong>的值为 10，变量<strong>B</strong>的值为 20，则：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>+</td><td>把两个操作数相加</td><td>A + B 将得到 30</td></tr><tr><td>-</td><td>从第一个操作数中减去第二个操作数</td><td>A - B 将得到 -10</td></tr><tr><td>*</td><td>把两个操作数相乘</td><td>A * B 将得到 200</td></tr><tr><td>/</td><td>分子除以分母</td><td>B / A 将得到 2</td></tr><tr><td>%</td><td>取模运算符，整除后的余数</td><td>B % A 将得到 0</td></tr><tr><td>++</td><td>自增运算符，整数值增加 1</td><td>A++ 将得到 11</td></tr><tr><td>–</td><td>自减运算符，整数值减少 1</td><td>A– 将得到 9</td></tr></tbody></table><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br> <br><span class="hljs-keyword">int</span> main()<br>&#123;<br>   <span class="hljs-keyword">int</span> a = <span class="hljs-number">21</span>;<br>   <span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>;<br>   <span class="hljs-keyword">int</span> c ;<br> <br>   c = a + b;<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 1 - c 的值是 %d\n&quot;</span>, c );<br>   c = a - b;<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 2 - c 的值是 %d\n&quot;</span>, c );<br>   c = a * b;<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 3 - c 的值是 %d\n&quot;</span>, c );<br>   c = a / b;<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 4 - c 的值是 %d\n&quot;</span>, c );<br>   c = a % b;<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 5 - c 的值是 %d\n&quot;</span>, c );<br>   c = a++;  <span class="hljs-regexp">//</span> 赋值后再加 <span class="hljs-number">1</span> ，c 为 <span class="hljs-number">21</span>，a 为 <span class="hljs-number">22</span><br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 6 - c 的值是 %d\n&quot;</span>, c );<br>   c = a--;  <span class="hljs-regexp">//</span> 赋值后再减 <span class="hljs-number">1</span> ，c 为 <span class="hljs-number">22</span> ，a 为 <span class="hljs-number">21</span><br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 7 - c 的值是 %d\n&quot;</span>, c );<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Line</span> <span class="hljs-number">1</span> - c 的值是 <span class="hljs-number">31</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">2</span> - c 的值是 <span class="hljs-number">11</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">3</span> - c 的值是 <span class="hljs-number">210</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">4</span> - c 的值是 <span class="hljs-number">2</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">5</span> - c 的值是 <span class="hljs-number">1</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">6</span> - c 的值是 <span class="hljs-number">21</span><br><span class="hljs-attribute">Line</span> <span class="hljs-number">7</span> - c 的值是 <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><p>以下实例演示了 a++ 与 ++a 的区别：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs perl">实例<br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br> <br><span class="hljs-keyword">int</span> main()<br>&#123;<br>   <span class="hljs-keyword">int</span> c;<br>   <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>   c = a++; <br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;先赋值后运算：\n&quot;</span>);<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 1 - c 的值是 %d\n&quot;</span>, c );<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 2 - a 的值是 %d\n&quot;</span>, a );<br>   a = <span class="hljs-number">10</span>;<br>   c = a--; <br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 3 - c 的值是 %d\n&quot;</span>, c );<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 4 - a 的值是 %d\n&quot;</span>, a );<br> <br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;先运算后赋值：\n&quot;</span>);<br>   a = <span class="hljs-number">10</span>;<br>   c = ++a; <br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 5 - c 的值是 %d\n&quot;</span>, c );<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 6 - a 的值是 %d\n&quot;</span>, a );<br>   a = <span class="hljs-number">10</span>;<br>   c = --a; <br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 7 - c 的值是 %d\n&quot;</span>, c );<br>   <span class="hljs-keyword">printf</span>(<span class="hljs-string">&quot;Line 8 - a 的值是 %d\n&quot;</span>, a );<br> <br>&#125;<br><br>先赋值后运算：<br>Line <span class="hljs-number">1</span> - c 的值是 <span class="hljs-number">10</span><br>Line <span class="hljs-number">2</span> - a 的值是 <span class="hljs-number">11</span><br>Line <span class="hljs-number">3</span> - c 的值是 <span class="hljs-number">10</span><br>Line <span class="hljs-number">4</span> - a 的值是 <span class="hljs-number">9</span><br>先运算后赋值：<br>Line <span class="hljs-number">5</span> - c 的值是 <span class="hljs-number">11</span><br>Line <span class="hljs-number">6</span> - a 的值是 <span class="hljs-number">11</span><br>Line <span class="hljs-number">7</span> - c 的值是 <span class="hljs-number">9</span><br>Line <span class="hljs-number">8</span> - a 的值是 <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>下表显示了 C 语言支持的所有关系运算符。假设变量<strong>A</strong>的值为 10，变量<strong>B</strong>的值为 20，则：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>==</td><td>检查两个操作数的值是否相等，如果相等则条件为真。</td><td>(A == B) 为假。</td></tr><tr><td>!=</td><td>检查两个操作数的值是否相等，如果不相等则条件为真。</td><td>(A != B) 为真。</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否大于右操作数的值，如果是则条件为真。</td><td>(A &gt; B) 为假。</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否小于右操作数的值，如果是则条件为真。</td><td>(A &lt; B) 为真。</td></tr><tr><td>&gt;=</td><td>检查左操作数的值是否大于或等于右操作数的值，如果是则条件为真。</td><td>(A &gt;= B) 为假。</td></tr><tr><td>&lt;=</td><td>检查左操作数的值是否小于或等于右操作数的值，如果是则条件为真。</td><td>(A &lt;= B) 为真。</td></tr></tbody></table><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>下表显示了 C 语言支持的所有关系逻辑运算符。假设变量<strong>A</strong>的值为 1，变量<strong>B</strong>的值为 0，则：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。如果两个操作数都非零，则条件为真。</td><td>(A &amp;&amp; B) 为假。</td></tr><tr><td></td><td></td><td></td></tr><tr><td>!</td><td>称为逻辑非运算符。用来逆转操作数的逻辑状态。如果条件为真则逻辑非运算符将使其为假。</td><td>!(A &amp;&amp; B) 为真。</td></tr></tbody></table><h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算符作用于位，并逐位执行操作。&amp;、 | 和 ^ 的真值表如下所示：</p><table><thead><tr><th>p 或 q</th><th>p &amp; q</th><th>p</th><th>q</th><th>p ^ q</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td><td>1</td><td>1</td></tr></tbody></table><p>假设如果 A = 60，且 B = 13，现在以二进制格式表示，它们如下所示：<br>A = 0011 1100<br>B = 0000 1101</p><hr><p>A&amp;B = 0000 1100<br>A|B = 0011 1101<br>A^B = 0011 0001<br>~A  = 1100 0011<br>下表显示了 C 语言支持的位运算符。假设变量<strong>A</strong>的值为 60，变量<strong>B</strong>的值为 13，则：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与操作，按二进制位进行”与”运算。运算规则：0&amp;0=0;0&amp;1=0;1&amp;0=0;1&amp;1=1;</td><td>(A &amp; B) 将得到 12，即为 0000 1100</td></tr><tr><td>竖线</td><td>按位或运算符，按二进制位进行”或”运算。运算规则：0或0=0;0或1=1;1或0=1;1或1=1;</td><td>(A 或 B) 将得到 61，即为 0011 1101</td></tr><tr><td>^</td><td>异或运算符，按二进制位进行”异或”运算。运算规则：0^0=0;0^1=1;1^0=1;1^1=0;</td><td>(A ^ B) 将得到 49，即为 0011 0001</td></tr><tr><td>~</td><td>取反运算符，按二进制位进行”取反”运算。运算规则：<del>1=-2;</del>0=-1;</td><td>(~A ) 将得到 -61，即为 1100 0011，一个有符号二进制数的补码形式。</td></tr><tr><td>&lt;&lt;</td><td>二进制左移运算符。将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</td><td>A &lt;&lt; 2 将得到 240，即为 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>二进制右移运算符。将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</td><td>A &gt;&gt; 2 将得到 15，即为 0000 1111</td></tr></tbody></table><p>请看下面的实例，了解 C 语言中所有可用的位运算符：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs llvm">#include &lt;stdio.h&gt;<br> <br>int main()<br>&#123;<br> <br>   unsigned int a <span class="hljs-operator">=</span> <span class="hljs-number">60</span><span class="hljs-comment">;    /* 60 = 0011 1100 */  </span><br>   unsigned int b <span class="hljs-operator">=</span> <span class="hljs-number">13</span><span class="hljs-comment">;    /* 13 = 0000 1101 */</span><br>   int <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;           </span><br><span class="hljs-comment"> </span><br>   <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> a &amp; b<span class="hljs-comment">;       /* 12 = 0000 1100 */ </span><br>   printf(<span class="hljs-string">&quot;Line 1 - c 的值是 %d\n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> )<span class="hljs-comment">;</span><br><span class="hljs-comment"> </span><br>   <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> a | b<span class="hljs-comment">;       /* 61 = 0011 1101 */</span><br>   printf(<span class="hljs-string">&quot;Line 2 - c 的值是 %d\n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> )<span class="hljs-comment">;</span><br><span class="hljs-comment"> </span><br>   <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> a ^ b<span class="hljs-comment">;       /* 49 = 0011 0001 */</span><br>   printf(<span class="hljs-string">&quot;Line 3 - c 的值是 %d\n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> )<span class="hljs-comment">;</span><br><span class="hljs-comment"> </span><br>   <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> ~a<span class="hljs-comment">;          /*-61 = 1100 0011 */</span><br>   printf(<span class="hljs-string">&quot;Line 4 - c 的值是 %d\n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> )<span class="hljs-comment">;</span><br><span class="hljs-comment"> </span><br>   <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> a &lt;&lt; <span class="hljs-number">2</span><span class="hljs-comment">;     /* 240 = 1111 0000 */</span><br>   printf(<span class="hljs-string">&quot;Line 5 - c 的值是 %d\n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> )<span class="hljs-comment">;</span><br><span class="hljs-comment"> </span><br>   <span class="hljs-keyword">c</span> <span class="hljs-operator">=</span> a &gt;&gt; <span class="hljs-number">2</span><span class="hljs-comment">;     /* 15 = 0000 1111 */</span><br>   printf(<span class="hljs-string">&quot;Line 6 - c 的值是 %d\n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">c</span> )<span class="hljs-comment">;</span><br>&#125;<br><br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>Line <span class="hljs-number">1</span> - <span class="hljs-keyword">c</span> 的值是 <span class="hljs-number">12</span><br>Line <span class="hljs-number">2</span> - <span class="hljs-keyword">c</span> 的值是 <span class="hljs-number">61</span><br>Line <span class="hljs-number">3</span> - <span class="hljs-keyword">c</span> 的值是 <span class="hljs-number">49</span><br>Line <span class="hljs-number">4</span> - <span class="hljs-keyword">c</span> 的值是 <span class="hljs-number">-61</span><br>Line <span class="hljs-number">5</span> - <span class="hljs-keyword">c</span> 的值是 <span class="hljs-number">240</span><br>Line <span class="hljs-number">6</span> - <span class="hljs-keyword">c</span> 的值是 <span class="hljs-number">15</span><br></code></pre></td></tr></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>下表列出了 C 语言支持的赋值运算符：</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>=</td><td>简单的赋值运算符，把右边操作数的值赋给左边操作数</td><td>C = A + B 将把 A + B 的值赋给 C</td></tr><tr><td>+=</td><td>加且赋值运算符，把右边操作数加上左边操作数的结果赋值给左边操作数</td><td>C += A 相当于 C = C + A</td></tr><tr><td>-=</td><td>减且赋值运算符，把左边操作数减去右边操作数的结果赋值给左边操作数</td><td>C -= A 相当于 C = C - A</td></tr><tr><td>*=</td><td>乘且赋值运算符，把右边操作数乘以左边操作数的结果赋值给左边操作数</td><td>C *= A 相当于 C = C * A</td></tr><tr><td>/=</td><td>除且赋值运算符，把左边操作数除以右边操作数的结果赋值给左边操作数</td><td>C /= A 相当于 C = C / A</td></tr><tr><td>%=</td><td>求模且赋值运算符，求两个操作数的模赋值给左边操作数</td><td>C %= A 相当于 C = C % A</td></tr><tr><td>&lt;&lt;=</td><td>左移且赋值运算符</td><td>C &lt;&lt;= 2 等同于 C = C &lt;&lt; 2</td></tr><tr><td>&gt;&gt;=</td><td>右移且赋值运算符</td><td>C &gt;&gt;= 2 等同于 C = C &gt;&gt; 2</td></tr><tr><td>&amp;=</td><td>按位与且赋值运算符</td><td>C &amp;= 2 等同于 C = C &amp; 2</td></tr><tr><td>^=</td><td>按位异或且赋值运算符</td><td>C ^= 2 等同于 C = C ^ 2</td></tr><tr><td></td><td>=</td><td>按位或且赋值运算符</td></tr></tbody></table><h2 id="杂项运算符-↦-sizeof-amp-三元"><a href="#杂项运算符-↦-sizeof-amp-三元" class="headerlink" title="杂项运算符 ↦ sizeof &amp; 三元"></a>杂项运算符 ↦ sizeof &amp; 三元</h2><p>下表列出了 C 语言支持的其他一些重要的运算符，包括<strong>sizeof</strong>和**? :**。</p><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th></tr></thead><tbody><tr><td>sizeof()</td><td>返回变量的大小。</td><td>sizeof(a) 将返回 4，其中 a 是整数。</td></tr><tr><td>&amp;</td><td>返回变量的地址。</td><td>&a; 将给出变量的实际地址。</td></tr><tr><td>*</td><td>指向一个变量。</td><td>*a; 将指向一个变量。</td></tr><tr><td>? :</td><td>条件表达式</td><td>如果条件为真 ? 则值为 X : 否则值为 Y</td></tr></tbody></table><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment">/* 三元运算符实例 */</span><br> <span class="hljs-attr">a</span> = <span class="hljs-number">10</span>;<br> <span class="hljs-attr">b</span> = (<span class="hljs-attr">a</span> == <span class="hljs-number">1</span>) ? <span class="hljs-number">20</span>: <span class="hljs-number">30</span>;<br> printf( <span class="hljs-string">&quot;b 的值是 %d\n&quot;</span>, b );<br></code></pre></td></tr></table></figure><h2 id="C-中的运算符优先级"><a href="#C-中的运算符优先级" class="headerlink" title="C 中的运算符优先级"></a>C 中的运算符优先级</h2><p>运算符的优先级确定表达式中项的组合。这会影响到一个表达式如何计算。某些运算符比其他运算符有更高的优先级，例如，乘除运算符具有比加减运算符更高的优先级。<br>例如 x = 7 + 3 * 2，在这里，x 被赋值为 13，而不是 20，因为运算符 * 具有比 + 更高的优先级，所以首先计算乘法 3*2，然后再加上 7。<br>下表将按运算符优先级从高到低列出各个运算符，具有较高优先级的运算符出现在表格的上面，具有较低优先级的运算符出现在表格的下面。在表达式中，较高优先级的运算符会优先被计算。</p><table><thead><tr><th>类别</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>后缀</td><td>() [] -&gt; . ++ - -</td><td>从左到右</td></tr><tr><td>一元</td><td>+ - ! ~ ++ - - (type)* &amp; sizeof</td><td>从右到左</td></tr><tr><td>乘除</td><td>* / %</td><td>从左到右</td></tr><tr><td>加减</td><td>+ -</td><td>从左到右</td></tr><tr><td>移位</td><td>&lt;&lt; &gt;&gt;</td><td>从左到右</td></tr><tr><td>关系</td><td>&lt; &lt;= &gt; &gt;=</td><td>从左到右</td></tr><tr><td>相等</td><td>== !=</td><td>从左到右</td></tr><tr><td>位与 AND</td><td>&amp;</td><td>从左到右</td></tr><tr><td>位异或 XOR</td><td>^</td><td>从左到右</td></tr><tr><td>位或 OR</td><td></td><td></td></tr><tr><td>逻辑与 AND</td><td>&amp;&amp;</td><td>从左到右</td></tr><tr><td>逻辑或 OR</td><td></td><td></td></tr><tr><td>条件</td><td>?:</td><td>从右到左</td></tr><tr><td>赋值</td><td>= += -= *= /= %=&gt;&gt;= &lt;&lt;= &amp;= ^=</td><td>=</td></tr><tr><td>逗号</td><td>,</td><td>从左到右</td></tr></tbody></table><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="C-判断"><a href="#C-判断" class="headerlink" title="C 判断"></a>C 判断</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/svg/2681770/1628870120500-01bc7933-9544-4d6e-aab4-c7c5313e1707.svg#clientId=ub6a93093-d6c0-4&from=paste&id=u5ad7f64f&margin=%5Bobject%20Object%5D&originHeight=475&originWidth=327&originalType=url&ratio=1&status=done&style=none&taskId=uf40a3388-61a6-445f-b841-c08bdc06ba0"><br>判断结构要求程序员指定一个或多个要评估或测试的条件，以及条件为真时要执行的语句（必需的）和条件为假时要执行的语句（可选的）。<br>C 语言把任何<strong>非零</strong>和<strong>非空</strong>的值假定为<strong>true</strong>，把<strong>零</strong>或<strong>null</strong>假定为<strong>false</strong>。<br>下面是大多数编程语言中典型的判断结构的一般形式：</p><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><p>C 语言提供了以下类型的判断语句。点击链接查看每个语句的细节。</p><table><thead><tr><th>语句</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-if.html">if 语句</a></td><td>一个<strong>if 语句</strong>由一个布尔表达式后跟一个或多个语句组成。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-if-else.html">if…else 语句</a></td><td>一个<strong>if 语句</strong>后可跟一个可选的<strong>else 语句</strong>，else 语句在布尔表达式为假时执行。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-nested-if.html">嵌套 if 语句</a></td><td>您可以在一个<strong>if</strong>或<strong>else if</strong>语句内使用另一个<strong>if</strong>或<strong>else if</strong>语句。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-switch.html">switch 语句</a></td><td>一个<strong>switch</strong>语句允许测试一个变量等于多个值时的情况。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-nested-switch.html">嵌套 switch 语句</a></td><td>您可以在一个<strong>switch</strong>语句内使用另一个<strong>switch</strong>语句。</td></tr></tbody></table><h2 id="运算符-三元运算符"><a href="#运算符-三元运算符" class="headerlink" title="? : 运算符(三元运算符)"></a>? : 运算符(三元运算符)</h2><p>我们已经在前面的章节中讲解了<strong>条件运算符 ? :<strong>，可以用来替代</strong>if…else</strong>语句。它的一般形式如下：<br>Exp1?Exp2:Exp3;<br>其中，Exp1、Exp2 和 Exp3 是表达式。请注意，冒号的使用和位置。<br>? 表达式的值是由 Exp1 决定的。如果 Exp1 为真，则计算 Exp2 的值，结果即为整个表达式的值。如果 Exp1 为假，则计算 Exp3 的值，结果即为整个表达式的值。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628870120610-dd7e8a3f-c3a3-4b6d-aef0-0f1855f5be49.png#clientId=ub6a93093-d6c0-4&from=paste&id=u1b2455fa&margin=%5Bobject%20Object%5D&originHeight=359&originWidth=449&originalType=url&ratio=1&status=done&style=none&taskId=ud265fe85-3ea6-4cfe-8a52-43e6917c8f8"></p><h1 id="C循环"><a href="#C循环" class="headerlink" title="C循环"></a>C循环</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628870163773-69017773-b9a3-4a62-bf5e-240d1ff9ff7b.png#clientId=ub6a93093-d6c0-4&from=paste&id=uc85faa2a&margin=%5Bobject%20Object%5D&originHeight=480&originWidth=450&originalType=url&ratio=1&status=done&style=none&taskId=uef8906b5-7282-4c7c-bd52-ca36917d848"><br>有的时候，我们可能需要多次执行同一块代码。一般情况下，语句是按顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。<br>编程语言提供了更为复杂执行路径的多种控制结构。<br>循环语句允许我们多次执行一个语句或语句组，下面是大多数编程语言中循环语句的流程图：</p><h2 id="循环类型"><a href="#循环类型" class="headerlink" title="循环类型"></a>循环类型</h2><p>C 语言提供了以下几种循环类型。点击链接查看每个类型的细节。</p><table><thead><tr><th>循环类型</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-while-loop.html">while 循环</a></td><td>当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-for-loop.html">for 循环</a></td><td>多次执行一个语句序列，简化管理循环变量的代码。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-do-while-loop.html">do…while 循环</a></td><td>除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-nested-loops.html">嵌套循环</a></td><td>您可以在 while、for 或 do..while 循环内使用一个或多个循环。</td></tr></tbody></table><h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2><p>循环控制语句改变你代码的执行顺序。通过它你可以实现代码的跳转。<br>C 提供了下列的循环控制语句。点击链接查看每个语句的细节。</p><table><thead><tr><th>控制语句</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-break-statement.html">break 语句</a></td><td>终止<strong>循环</strong>或<strong>switch</strong>语句，程序流将继续执行紧接着循环或 switch 的下一条语句。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-continue-statement.html">continue 语句</a></td><td>告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-goto-statement.html">goto 语句</a></td><td>将控制转移到被标记的语句。但是不建议在程序中使用 goto 语句</td></tr></tbody></table><h1 id="C函数"><a href="#C函数" class="headerlink" title="C函数"></a>C函数</h1><p>函数是一组一起执行一个任务的语句。每个 C 程序都至少有一个函数，即主函数<strong>main()<strong>，所有简单的程序都可以定义其他额外的函数。<br>您可以把代码划分到不同的函数中。如何划分代码到不同的函数中是由您来决定的，但在逻辑上，划分通常是根据每个函数执行一个特定的任务来进行的。<br>函数</strong>声明</strong>告诉编译器函数的名称、返回类型和参数。函数<strong>定义</strong>提供了函数的实际主体。<br>C 标准库提供了大量的程序可以调用的内置函数。例如，函数**strcat()<strong>用来连接两个字符串，函数</strong>memcpy()**用来复制内存到另一个位置。<br>函数还有很多叫法，比如方法、子例程或程序，等等。</p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>C 语言中的函数定义的一般形式如下：<br>return_type function_name( parameter list ) {    body of the function }<br>在 C 语言中，函数由一个函数头和一个函数主体组成。下面列出一个函数的所有组成部分：</p><ul><li><strong>返回类型：</strong>一个函数可以返回一个值。<strong>return_type</strong>是函数返回的值的数据类型。有些函数执行所需的操作而不返回值，在这种情况下，return_type 是关键字<strong>void</strong>。</li><li><strong>函数名称：</strong>这是函数的实际名称。函数名和参数列表一起构成了函数签名。</li><li><strong>参数：</strong>参数就像是占位符。当函数被调用时，您向参数传递一个值，这个值被称为实际参数。参数列表包括函数参数的类型、顺序、数量。参数是可选的，也就是说，函数可能不包含参数。</li><li><strong>函数主体：</strong>函数主体包含一组定义函数执行任务的语句。</li></ul><p>以下是**max()**函数的源代码。该函数有两个参数 num1 和 num2，会返回这两个数中较大的那个数：</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nim">/* 函数返回两个数中较大的那个数 */<br><span class="hljs-built_in">int</span> max(<span class="hljs-built_in">int</span> num1, <span class="hljs-built_in">int</span> num2) <br>&#123;<br>   /* 局部变量声明 */<br>   <span class="hljs-built_in">int</span> <span class="hljs-literal">result</span>;<br> <br>   <span class="hljs-keyword">if</span> (num1 &gt; num2)<br>      <span class="hljs-literal">result</span> = num1;<br>   <span class="hljs-keyword">else</span><br>      <span class="hljs-literal">result</span> = num2;<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">result</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><p>函数<strong>声明</strong>会告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。<br>函数声明包括以下几个部分：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">return_type <span class="hljs-keyword">function</span><span class="hljs-constructor">_name( <span class="hljs-params">parameter</span> <span class="hljs-params">list</span> )</span>; <br></code></pre></td></tr></table></figure><p>针对上面定义的函数 max()，以下是函数声明：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-type">int</span> <span class="hljs-built_in">max</span>(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2); <br></code></pre></td></tr></table></figure><p>在函数声明中，参数的名称并不重要，只有参数的类型是必需的，因此下面也是有效的声明：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-type">int</span> <span class="hljs-built_in">max</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>);<br></code></pre></td></tr></table></figure><p>当您在一个源文件中定义函数且在另一个文件中调用函数时，函数声明是必需的。在这种情况下，您应该在调用函数的文件顶部声明函数。</p><h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>创建 C 函数时，会定义函数做什么，然后通过调用函数来完成已定义的任务。<br>当程序调用函数时，程序控制权会转移给被调用的函数。被调用的函数执行已定义的任务，当函数的返回语句被执行时，或到达函数的结束括号时，会把程序控制权交还给主程序。<br>调用函数时，传递所需参数，如果函数返回一个值，则可以存储返回值。例如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">/* 函数声明 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span></span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">/* 局部变量定义 */</span><br>   <span class="hljs-keyword">int</span> a = <span class="hljs-number">100</span>;<br>   <span class="hljs-keyword">int</span> b = <span class="hljs-number">200</span>;<br>   <span class="hljs-keyword">int</span> ret;<br> <br>   <span class="hljs-comment">/* 调用函数来获取最大值 */</span><br>   ret = <span class="hljs-built_in">max</span>(a, b);<br> <br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Max value is : %d\n&quot;</span>, ret );<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-comment">/* 函数返回两个数中较大的那个数 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num1, <span class="hljs-keyword">int</span> num2)</span> </span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-comment">/* 局部变量声明 */</span><br>   <span class="hljs-keyword">int</span> result;<br> <br>   <span class="hljs-keyword">if</span> (num1 &gt; num2)<br>      result = num1;<br>   <span class="hljs-keyword">else</span><br>      result = num2;<br> <br>   <span class="hljs-keyword">return</span> result; <br>&#125;<br><br><br>把 <span class="hljs-built_in">max</span>() 函数和 <span class="hljs-built_in">main</span>() 函数放一块，编译源代码。当运行最后的可执行文件时，会产生下列结果：<br><br>Max value is : <span class="hljs-number">200</span><br></code></pre></td></tr></table></figure><p>把 max() 函数和 main() 函数放一块，编译源代码。当运行最后的可执行文件时，会产生下列结果：<br>Max value is : 200 </p><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>如果函数要使用参数，则必须声明接受参数值的变量。这些变量称为函数的<strong>形式参数</strong>。<br>形式参数就像函数内的其他局部变量，在进入函数时被创建，退出函数时被销毁。<br>当调用函数时，有两种向函数传递参数的方式：</p><table><thead><tr><th>调用类型</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-function-call-by-value.html">传值调用</a></td><td>该方法把参数的实际值复制给函数的形式参数。在这种情况下，修改函数内的形式参数不会影响实际参数。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-function-call-by-pointer.html">引用调用</a></td><td>通过指针传递方式，形参为指向实参地址的指针，当对形参的指向操作时，就相当于对实参本身进行的操作。</td></tr></tbody></table><p>默认情况下，C 使用<strong>传值调用</strong>来传递参数。一般来说，这意味着函数内的代码不能改变用于调用函数的实际参数。<br>​</p><h1 id="C-作用域规则"><a href="#C-作用域规则" class="headerlink" title="C 作用域规则"></a>C 作用域规则</h1><p>任何一种编程中，作用域是程序中定义的变量所存在的区域，超过该区域变量就不能被访问。C 语言中有三个地方可以声明变量：</p><ol><li>在函数或块内部的<strong>局部</strong>变量</li><li>在所有函数外部的<strong>全局</strong>变量</li><li>在<strong>形式</strong>参数的函数参数定义中</li></ol><p>让我们来看看什么是<strong>局部</strong>变量、<strong>全局</strong>变量和<strong>形式</strong>参数。</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>在某个函数或块的内部声明的变量称为局部变量。它们只能被该函数或该代码块内部的语句使用。局部变量在函数外部是不可知的。下面是使用局部变量的实例。在这里，所有的变量 a、b 和 c 是 main() 函数的局部变量。<strong>​</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* 局部变量声明 */</span><br>  <span class="hljs-keyword">int</span> a, b;<br>  <span class="hljs-keyword">int</span> c;<br> <br>  <span class="hljs-comment">/* 实际初始化 */</span><br>  a = <span class="hljs-number">10</span>;<br>  b = <span class="hljs-number">20</span>;<br>  c = a + b;<br> <br>  <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of a = %d, b = %d and c = %d\n&quot;</span>, a, b, c);<br> <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>全局变量是定义在函数外部，通常是在程序的顶部。全局变量在整个程序生命周期内都是有效的，在任意的函数内部能访问全局变量。<br>全局变量可以被任何函数访问。也就是说，全局变量在声明后整个程序中都是可用的。下面是使用全局变量和局部变量的实例：<br>​</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">/* 全局变量声明 */</span><br><span class="hljs-keyword">int</span> g;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* 局部变量声明 */</span><br>  <span class="hljs-keyword">int</span> a, b;<br> <br>  <span class="hljs-comment">/* 实际初始化 */</span><br>  a = <span class="hljs-number">10</span>;<br>  b = <span class="hljs-number">20</span>;<br>  g = a + b;<br> <br>  <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of a = %d, b = %d and g = %d\n&quot;</span>, a, b, g);<br> <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在程序中，局部变量和全局变量的名称可以相同，但是在函数内，如果两个名字相同，会使用局部变量值，全局变量不会被使用。下面是一个实例：<br>​</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">/* 全局变量声明 */</span><br><span class="hljs-keyword">int</span> g = <span class="hljs-number">20</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* 局部变量声明 */</span><br>  <span class="hljs-keyword">int</span> g = <span class="hljs-number">10</span>;<br> <br>  <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of g = %d\n&quot;</span>,  g);<br> <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>value of g = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h2 id="形式参数"><a href="#形式参数" class="headerlink" title="形式参数"></a>形式参数</h2><p>函数的参数，形式参数，被当作该函数内的局部变量，如果与全局变量同名它们会优先使用。下面是一个实例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">/* 全局变量声明 */</span><br><span class="hljs-keyword">int</span> a = <span class="hljs-number">20</span>;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-comment">/* 在主函数中的局部变量声明 */</span><br>  <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">int</span> b = <span class="hljs-number">20</span>;<br>  <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>)</span></span>;<br> <br>  <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of a in main() = %d\n&quot;</span>,  a);<br>  c = <span class="hljs-built_in">sum</span>( a, b);<br>  <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of c in main() = %d\n&quot;</span>,  c);<br> <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-comment">/* 添加两个整数的函数 */</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of a in sum() = %d\n&quot;</span>,  a);<br>    <span class="hljs-built_in">printf</span> (<span class="hljs-string">&quot;value of b in sum() = %d\n&quot;</span>,  b);<br> <br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br>当上面的代码被编译和执行时，它会产生下列结果：<br><br><span class="hljs-function">value of a in <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">10</span><br><span class="hljs-function">value of a in <span class="hljs-title">sum</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">10</span><br><span class="hljs-function">value of b in <span class="hljs-title">sum</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">20</span><br><span class="hljs-function">value of c in <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">全局变量与局部变量在内存中的区别：<br>全局变量保存在内存的全局存储区中，占用静态的存储单元；<br>局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元。<br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/w3cnote/cpp-static-usage.html">C/C++ 中 static 的用法全局变量与局部变量</a><br>​</p><h2 id="初始化局部变量和全局变量"><a href="#初始化局部变量和全局变量" class="headerlink" title="初始化局部变量和全局变量"></a>初始化局部变量和全局变量</h2><p>当局部变量被定义时，系统不会对其初始化，您必须自行对其初始化。定义全局变量时，系统会自动对其初始化，如下所示：</p><table><thead><tr><th>数据类型</th><th>初始化默认值</th></tr></thead><tbody><tr><td>int</td><td>0</td></tr><tr><td>char</td><td>‘\0’</td></tr><tr><td>float</td><td>0</td></tr><tr><td>double</td><td>0</td></tr><tr><td>pointer</td><td>NULL</td></tr></tbody></table><p>正确地初始化变量是一个良好的编程习惯，否则有时候程序可能会产生意想不到的结果，因为未初始化的变量会导致一些在内存位置中已经可用的垃圾值。</p><h1 id="C数组"><a href="#C数组" class="headerlink" title="C数组"></a>C数组</h1><p>C 语言支持<strong>数组</strong>数据结构，它可以存储一个固定大小的相同类型元素的顺序集合。数组是用来存储一系列数据，但它往往被认为是一系列相同类型的变量。<br>数组的声明并不是声明一个个单独的变量，比如 runoob0、runoob1、…、runoob99，而是声明一个数组变量，比如 runoob，然后使用 runoob[0]、runoob[1]、…、runoob[99] 来代表一个个单独的变量。<br>所有的数组都是由连续的内存位置组成。最低的地址对应第一个元素，最高的地址对应最后一个元素。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628870993973-637cf11b-e36b-4a2a-afc1-0a8c9def5244.png#clientId=uaf9dcd6c-375e-4&from=paste&id=u62b249ff&margin=%5Bobject%20Object%5D&originHeight=231&originWidth=641&originalType=url&ratio=1&status=done&style=none&taskId=ub7ce7939-e9e3-4122-b8d1-211e4f11949"><br>数组中的特定元素可以通过索引访问，第一个索引值为 0。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628870993984-96b170ac-94ab-4e11-88d4-7f7b38d99c1e.png#clientId=uaf9dcd6c-375e-4&from=paste&id=ubf1e7bef&margin=%5Bobject%20Object%5D&originHeight=170&originWidth=507&originalType=url&ratio=1&status=done&style=none&taskId=u16920401-75b2-4f69-a810-4848124409a"></p><h2 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h2><p>在 C 中要声明一个数组，需要指定元素的类型和元素的数量，如下所示：<br>type arrayName [ arraySize ];<br>这叫做一维数组。<strong>arraySize</strong>必须是一个大于零的整数常量，<strong>type</strong>可以是任意有效的 C 数据类型。例如，要声明一个类型为 double 的包含 10 个元素的数组<strong>balance</strong>，声明语句如下：<br>double balance[10];<br>现在_balance_是一个可用的数组，可以容纳 10 个类型为 double 的数字。</p><h2 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h2><p>在 C 中，您可以逐个初始化数组，也可以使用一个初始化语句，如下所示：<br>double balance[5] = {1000.0, 2.0, 3.4, 7.0, 50.0};<br>大括号 { } 之间的值的数目不能大于我们在数组声明时在方括号 [ ] 中指定的元素数目。<br>如果您省略掉了数组的大小，数组的大小则为初始化时元素的个数。因此，如果：<br>double balance[] = {1000.0, 2.0, 3.4, 7.0, 50.0};<br>您将创建一个数组，它与前一个实例中所创建的数组是完全相同的。下面是一个为数组中某个元素赋值的实例：<br>balance[4] = 50.0;<br>上述的语句把数组中第五个元素的值赋为 50.0。所有的数组都是以 0 作为它们第一个元素的索引，也被称为基索引，数组的最后一个索引是数组的总大小减去 1。以下是上面所讨论的数组的的图形表示：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628870993953-91470e0a-0ceb-4e82-97a5-c28cea225174.png#clientId=uaf9dcd6c-375e-4&from=paste&id=u9158c8bc&margin=%5Bobject%20Object%5D&originHeight=121&originWidth=571&originalType=url&ratio=1&status=done&style=none&taskId=u25ba097f-285e-444d-a261-62bd493985d"><br>下图是一个长度为<strong>10</strong>的数组，第一个元素的索引值为<strong>0</strong>，第九个元素<strong>runoob</strong>的索引值为<strong>8</strong>:<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628870993957-a58ae1e5-ff0e-4ae1-8bd6-bf9efaf9eaff.png#clientId=uaf9dcd6c-375e-4&from=paste&id=ua5a44518&margin=%5Bobject%20Object%5D&originHeight=170&originWidth=507&originalType=url&ratio=1&status=done&style=none&taskId=uf04eefa3-6dcc-4dbe-ba02-993af1f09a3"></p><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p>数组元素可以通过数组名称加索引进行访问。元素的索引是放在方括号内，跟在数组名称的后边。例如：<br>double salary = balance[9];<br>上面的语句将把数组中第 10 个元素的值赋给 salary 变量。下面的实例使用了上述的三个概念，即，声明数组、数组赋值、访问数组：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs dart">#include &lt;stdio.h&gt;<br> <br><span class="hljs-built_in">int</span> main ()<br>&#123;<br>   <span class="hljs-built_in">int</span> n[ <span class="hljs-number">10</span> ]; <span class="hljs-comment">/* n 是一个包含 10 个整数的数组 */</span><br>   <span class="hljs-built_in">int</span> i,j;<br> <br>   <span class="hljs-comment">/* 初始化数组元素 */</span>         <br>   <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ )<br>   &#123;<br>      n[ i ] = i + <span class="hljs-number">100</span>; <span class="hljs-comment">/* 设置元素 i 为 i + 100 */</span><br>   &#125;<br>   <br>   <span class="hljs-comment">/* 输出数组中每个元素的值 */</span><br>   <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++ )<br>   &#123;<br>      printf(<span class="hljs-string">&quot;Element[%d] = %d\n&quot;</span>, j, n[j] );<br>   &#125;<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>当上面的代码被编译和执行时，它会产生下列结果：<br><br><span class="hljs-built_in">Element</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span><br><span class="hljs-built_in">Element</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">101</span><br><span class="hljs-built_in">Element</span>[<span class="hljs-number">2</span>] = <span class="hljs-number">102</span><br><span class="hljs-built_in">Element</span>[<span class="hljs-number">3</span>] = <span class="hljs-number">103</span><br><span class="hljs-built_in">Element</span>[<span class="hljs-number">4</span>] = <span class="hljs-number">104</span><br><span class="hljs-built_in">Element</span>[<span class="hljs-number">5</span>] = <span class="hljs-number">105</span><br><span class="hljs-built_in">Element</span>[<span class="hljs-number">6</span>] = <span class="hljs-number">106</span><br><span class="hljs-built_in">Element</span>[<span class="hljs-number">7</span>] = <span class="hljs-number">107</span><br><span class="hljs-built_in">Element</span>[<span class="hljs-number">8</span>] = <span class="hljs-number">108</span><br><span class="hljs-built_in">Element</span>[<span class="hljs-number">9</span>] = <span class="hljs-number">109</span><br></code></pre></td></tr></table></figure><h2 id="C-中数组详解"><a href="#C-中数组详解" class="headerlink" title="C 中数组详解"></a>C 中数组详解</h2><p>在 C 中，数组是非常重要的，我们需要了解更多有关数组的细节。下面列出了 C 程序员必须清楚的一些与数组相关的重要概念：</p><table><thead><tr><th>概念</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-multi-dimensional-arrays.html">多维数组</a></td><td>C 支持多维数组。多维数组最简单的形式是二维数组。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-passing-arrays-to-functions.html">传递数组给函数</a></td><td>您可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-return-arrays-from-function.html">从函数返回数组</a></td><td>C 允许从函数返回数组。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-pointer-to-an-array.html">指向数组的指针</a></td><td>您可以通过指定不带索引的数组名称来生成一个指向数组中第一个元素的指针。</td></tr></tbody></table><h1 id="C-enum-枚举"><a href="#C-enum-枚举" class="headerlink" title="C enum(枚举)"></a>C enum(枚举)</h1><p>枚举是 C 语言中的一种基本数据类型，它可以让数据更简洁，更易读。<br>枚举语法定义格式为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">enum</span>　枚举名　&#123;枚举元素<span class="hljs-number">1</span>,枚举元素<span class="hljs-number">2</span>,……&#125;;<br></code></pre></td></tr></table></figure><p>接下来我们举个例子，比如：一星期有 7 天，如果不用枚举，我们需要使用 #define 来为每个整数定义一个别名：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MON  1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TUE  2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> WED  3</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> THU  4</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FRI  5</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SAT  6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SUN  7</span><br></code></pre></td></tr></table></figure><p>这个看起来代码量就比较多，接下来我们看看使用枚举的方式：</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">DAY</span></span><br><span class="hljs-class"></span>&#123;<br>      MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>第一个枚举成员的默认值为整型的 0，后续枚举成员的值在前一个成员上加 1。我们在这个实例中把第一个枚举成员的值定义为 1，第二个就为 2，以此类推。</p><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs capnproto">可以在定义枚举类型时改变枚举元素的值：<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">season</span> </span>&#123;spring, summer=<span class="hljs-number">3</span>, autumn, winter&#125;;<br>没有指定值的枚举元素，其值为前一元素加 <span class="hljs-number">1</span>。也就说 spring 的值为 <span class="hljs-number">0</span>，summer 的值为 <span class="hljs-number">3</span>，autumn 的值为 <span class="hljs-number">4</span>，winter 的值为 <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h3 id="枚举变量的定义"><a href="#枚举变量的定义" class="headerlink" title="枚举变量的定义"></a>枚举变量的定义</h3><p>前面我们只是声明了枚举类型，接下来我们看看如何定义枚举变量。<br>我们可以通过以下三种方式来定义枚举变量<br><strong>​</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>、先定义枚举类型，再定义枚举变量<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">DAY</span></span><br><span class="hljs-class"></span>&#123;<br>      MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">DAY</span> <span class="hljs-title">day</span></span>;<br><br><span class="hljs-number">2</span>、定义枚举类型的同时定义枚举变量<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">DAY</span></span><br><span class="hljs-class"></span>&#123;<br>      MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN<br>&#125; day;<br><br><span class="hljs-number">3</span>、省略枚举名称，直接定义枚举变量<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class"></span>&#123;<br>      MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN<br>&#125; day;<br><br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">color</span> &#123;</span> red=<span class="hljs-number">1</span>, green, blue &#125;;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">enum</span>  <span class="hljs-title">color</span> <span class="hljs-title">favorite_color</span>;</span><br> <br>    <span class="hljs-comment">/* 用户输入数字来选择颜色 */</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入你喜欢的颜色: (1. red, 2. green, 3. blue): &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%u&quot;</span>, &amp;favorite_color);<br> <br>    <span class="hljs-comment">/* 输出结果 */</span><br>    <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (favorite_color)<br>    &#123;<br>    <span class="hljs-keyword">case</span> red:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你喜欢的颜色是红色&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> green:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你喜欢的颜色是绿色&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> blue:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你喜欢的颜色是蓝色&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你没有选择你喜欢的颜色&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>以上实例输出结果为：<br><br>请输入你喜欢的颜色: (<span class="hljs-number">1.</span> red, <span class="hljs-number">2.</span> green, <span class="hljs-number">3.</span> blue): <span class="hljs-number">1</span><br>你喜欢的颜色是红色<br></code></pre></td></tr></table></figure><h3 id="将整数转换为枚举"><a href="#将整数转换为枚举" class="headerlink" title="将整数转换为枚举"></a>将整数转换为枚举</h3><p>以下实例将整数转换为枚举：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">day</span></span><br><span class="hljs-class">    &#123;</span><br>        saturday,<br>        sunday,<br>        monday,<br>        tuesday,<br>        wednesday,<br>        thursday,<br>        friday<br>    &#125; workday;<br> <br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">day</span> <span class="hljs-title">weekend</span>;</span><br>    weekend = ( <span class="hljs-keyword">enum</span> day ) a;  <span class="hljs-comment">//类型转换</span><br>    <span class="hljs-comment">//weekend = a; //错误</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;weekend:%d&quot;</span>,weekend);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>以上实例输出结果为：<br><br>weekend:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="C指针"><a href="#C指针" class="headerlink" title="C指针"></a>C指针</h1><p>学习 C 语言的指针既简单又有趣。通过指针，可以简化一些 C 编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的。所以，想要成为一名优秀的 C 程序员，学习指针是很有必要的。<br>正如您所知道的，每一个变量都有一个内存位置，每一个内存位置都定义了可使用**&amp;**运算符访问的地址，它表示了在内存中的一个地址。<br>请看下面的实例，它将输出定义的变量地址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> var_runoob = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> *p;              <span class="hljs-comment">// 定义指针变量</span><br>    p = &amp;var_runoob;<br> <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var_runoob 变量的地址： %p\n&quot;</span>, p);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>var_runoob 变量的地址： <span class="hljs-number">0x7ffeeaae08d8</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628872977354-e8721348-1b75-430b-af4f-704598534c95.png#clientId=uaf9dcd6c-375e-4&from=paste&id=uca749389&margin=%5Bobject%20Object%5D&originHeight=411&originWidth=611&originalType=url&ratio=1&status=done&style=none&taskId=u9dd6241a-8303-4443-b027-0791d8cd8e4"></p><h2 id="什么是指针？"><a href="#什么是指针？" class="headerlink" title="什么是指针？"></a>什么是指针？</h2><p>指针也就是内存地址，指针变量是用来存放内存地址的变量。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">type</span> *<span class="hljs-keyword">var</span>-<span class="hljs-keyword">name</span>;<br></code></pre></td></tr></table></figure><p>在这里，<strong>type</strong> 是指针的基类型，它必须是一个有效的 C 数据类型，<strong>var-name</strong> 是指针变量的名称。用来声明指针的星号 ***** 与乘法中使用的星号是相同的。但是，在这个语句中，星号是用来指定一个变量是指针。以下是有效的指针声明：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">int</span>    *ip;    <span class="hljs-comment">/* 一个整型的指针 */</span><br><span class="hljs-keyword">double</span> *dp;    <span class="hljs-comment">/* 一个 double 型的指针 */</span><br><span class="hljs-keyword">float</span>  *fp;    <span class="hljs-comment">/* 一个浮点型的指针 */</span><br><span class="hljs-keyword">char</span>   *ch;    <span class="hljs-comment">/* 一个字符型的指针 */</span><br></code></pre></td></tr></table></figure><p>所有实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，对应指针的值的类型都是一样的，都是一个代表内存地址的长的十六进制数。<br>不同数据类型的指针之间唯一的不同是，指针所指向的变量或常量的数据类型不同。</p><h2 id="如何使用指针？"><a href="#如何使用指针？" class="headerlink" title="如何使用指针？"></a>如何使用指针？</h2><p>使用指针时会频繁进行以下几个操作：定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值。这些是通过使用一元运算符 ***** 来返回位于操作数所指定地址的变量的值。下面的实例涉及到了这些操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">int</span>  var = <span class="hljs-number">20</span>;   <span class="hljs-comment">/* 实际变量的声明 */</span><br>   <span class="hljs-keyword">int</span>  *ip;        <span class="hljs-comment">/* 指针变量的声明 */</span><br> <br>   ip = &amp;var;  <span class="hljs-comment">/* 在指针变量中存储 var 的地址 */</span><br> <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var 变量的地址: %p\n&quot;</span>, &amp;var  );<br> <br>   <span class="hljs-comment">/* 在指针变量中存储的地址 */</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ip 变量存储的地址: %p\n&quot;</span>, ip );<br> <br>   <span class="hljs-comment">/* 使用指针访问值 */</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*ip 变量的值: %d\n&quot;</span>, *ip );<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>var 变量的地址: <span class="hljs-number">0x7ffeeef168d8</span><br>ip 变量存储的地址: <span class="hljs-number">0x7ffeeef168d8</span><br>*ip 变量的值: <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h2 id="C-中的-NULL-指针"><a href="#C-中的-NULL-指针" class="headerlink" title="C 中的 NULL 指针"></a>C 中的 NULL 指针</h2><p>在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为<strong>空</strong>指针。<br>NULL 指针是一个定义在标准库中的值为零的常量。请看下面的程序：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-built_in">int</span> main ()<br>&#123;<br>   <span class="hljs-built_in">int</span>  *<span class="hljs-built_in">ptr</span> = <span class="hljs-literal">NULL</span><span class="hljs-comment">;</span><br> <br>   printf(<span class="hljs-string">&quot;ptr 的地址是 %p\n&quot;</span>, <span class="hljs-built_in">ptr</span>  )<span class="hljs-comment">;</span><br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>&#125;<br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br><span class="hljs-built_in">ptr</span> 的地址是 <span class="hljs-number">0x0</span><br></code></pre></td></tr></table></figure><p>在大多数的操作系统上，程序不允许访问地址为 0 的内存，因为该内存是操作系统保留的。然而，内存地址 0 有特别重要的意义，它表明该指针不指向一个可访问的内存位置。但按照惯例，如果指针包含空值（零值），则假定它不指向任何东西。<br>如需检查一个空指针，您可以使用 if 语句，如下所示：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(ptr)</span></span>     <span class="hljs-comment">/* 如果 p 非空，则完成 */</span><br><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(!ptr)</span></span>    <span class="hljs-comment">/* 如果 p 为空，则完成 */</span><br></code></pre></td></tr></table></figure><h2 id="C-指针详解"><a href="#C-指针详解" class="headerlink" title="C 指针详解"></a>C 指针详解</h2><p>在 C 中，有很多指针相关的概念，这些概念都很简单，但是都很重要。下面列出了 C 程序员必须清楚的一些与指针相关的重要概念：</p><table><thead><tr><th>概念</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/cprogramming/c-pointer-arithmetic.html">指针的算术运算</a></td><td>可以对指针进行四种算术运算：++、–、+、-</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-array-of-pointers.html">指针数组</a></td><td>可以定义用来存储指针的数组。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-pointer-to-pointer.html">指向指针的指针</a></td><td>C 允许指向指针的指针。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-passing-pointers-to-functions.html">传递指针给函数</a></td><td>通过引用或地址传递参数，使传递的参数在调用函数中被改变。</td></tr><tr><td><a href="https://www.runoob.com/cprogramming/c-return-pointer-from-functions.html">从函数返回指针</a></td><td>C 允许函数返回指针到局部变量、静态变量和动态内存分配。</td></tr></tbody></table><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>函数指针是指向函数的指针变量。<br>通常我们说的指针变量是指向一个整型、字符型或数组等变量，而函数指针是指向函数。<br>函数指针可以像一般函数一样，用于调用函数、传递参数。<br>函数指针变量的声明：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">int</span> (*fun_ptr)(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">int</span>); <span class="hljs-comment">// 声明一个指向同样参数、返回值的函数指针类型</span><br></code></pre></td></tr></table></figure><p>以下实例声明了函数指针变量 p，指向函数 max：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> x &gt; y ? x : y;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/* p 是函数指针 */</span><br>    <span class="hljs-built_in"><span class="hljs-keyword">int</span></span> (* p)(<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>) = &amp; max; <span class="hljs-comment">// &amp;可以省略</span><br>    <span class="hljs-keyword">int</span> a, b, c, d;<br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入三个数字:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp; a, &amp; b, &amp; c);<br> <br>    <span class="hljs-comment">/* 与直接调用函数等价，d = max(max(a, b), c) */</span><br>    d = <span class="hljs-built_in">p</span>(<span class="hljs-built_in">p</span>(a, b), c); <br> <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最大的数字是: %d\n&quot;</span>, d);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br>编译执行，输出结果如下：<br><br>请输入三个数字:<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br>最大的数字是: <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><h3 id="函数指针作为某个函数的参数"><a href="#函数指针作为某个函数的参数" class="headerlink" title="函数指针作为某个函数的参数"></a>函数指针作为某个函数的参数</h3><p>函数指针变量可以作为某个函数的参数来使用的，回调函数就是一个通过函数指针调用的函数。<br>简单讲：回调函数是由别人的函数执行时调用你实现的函数。<br><em>以下是来自知乎作者常溪玲的解说：</em><br><em>你到一个商店买东西，刚好你要的东西没有货，于是你在店员那里留下了你的电话，过了几天店里有货了，店员就打了你的电话，然后你接到电话后就到店里去取了货。在这个例子里，你的电话号码就叫回调函数，你把电话留给店员就叫登记回调函数，店里后来有货了叫做触发了回调关联的事件，店员给你打电话叫做调用回调函数，你到店里去取货叫做响应回调事件。</em></p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>实例中 populate_array 函数定义了三个参数，其中第三个参数是函数的指针，通过该函数来设置数组的值。<br>实例中我们定义了回调函数 getNextRandomValue，它返回一个随机值，它作为一个函数指针传递给 populate_array 函数。<br>populate_array 将调用 10 次回调函数，并将回调函数的返回值赋值给数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-comment">// 回调函数</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">populate_array</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *array, <span class="hljs-keyword">size_t</span> arraySize, <span class="hljs-keyword">int</span> (*getNextValue)(<span class="hljs-keyword">void</span>))</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i=<span class="hljs-number">0</span>; i&lt;arraySize; i++)<br>        array[i] = <span class="hljs-built_in">getNextValue</span>();<br>&#125;<br> <br><span class="hljs-comment">// 获取随机值</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getNextRandomValue</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">rand</span>();<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> myarray[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">/* getNextRandomValue 不能加括号，否则无法编译，因为加上括号之后相当于传入此参数时传入了 int , 而不是函数指针*/</span><br>    <span class="hljs-built_in">populate_array</span>(myarray, <span class="hljs-number">10</span>, getNextRandomValue);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, myarray[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>编译执行，输出结果如下：<br><br><span class="hljs-number">16807</span> <span class="hljs-number">282475249</span> <span class="hljs-number">1622650073</span> <span class="hljs-number">984943658</span> <span class="hljs-number">1144108930</span> <span class="hljs-number">470211272</span> <span class="hljs-number">101027544</span> <span class="hljs-number">1457850878</span> <span class="hljs-number">1458777923</span> <span class="hljs-number">2007237709</span> <br></code></pre></td></tr></table></figure><h1 id="C字符串"><a href="#C字符串" class="headerlink" title="C字符串"></a>C字符串</h1><p>在 C 语言中，字符串实际上是使用<strong>null</strong>字符<strong>\0</strong>终止的一维字符数组。因此，一个以<strong>null</strong>结尾的字符串，包含了组成字符串的字符。<br>下面的声明和初始化创建了一个 <strong>RUNOOB</strong> 字符串。由于在数组的末尾存储了空字符，所以字符数组的大小比单词 <strong>RUNOOB</strong> 的字符数多一个。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">char</span> site[<span class="hljs-number">7</span>] = &#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure><p>依据数组初始化规则，您可以把上面的语句写成以下语句：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">char site[] = <span class="hljs-string">&quot;RUNOOB&quot;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628873579537-326f9474-b52a-4184-a69e-ba37104fcf97.png#clientId=uaf9dcd6c-375e-4&from=paste&id=ub7735c60&margin=%5Bobject%20Object%5D&originHeight=271&originWidth=671&originalType=url&ratio=1&status=done&style=none&taskId=u4c0cac12-663a-469c-949b-40934d38a67"><br>其实，您不需要把 <strong>null</strong> 字符放在字符串常量的末尾。C 编译器会在初始化数组时，自动把 <strong>\0</strong> 放在字符串的末尾。让我们尝试输出上面的字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">char</span> site[<span class="hljs-number">7</span>] = &#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br> <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;菜鸟教程: %s\n&quot;</span>, site );<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>菜鸟教程: RUNOOB<br></code></pre></td></tr></table></figure><p>C 中有大量操作字符串的函数：</p><table><thead><tr><th>序号</th><th>函数 &amp; 目的</th></tr></thead><tbody><tr><td>1</td><td><strong>strcpy(s1, s2);</strong></td></tr><tr><td>复制字符串 s2 到字符串 s1。</td><td></td></tr><tr><td>2</td><td><strong>strcat(s1, s2);</strong></td></tr><tr><td>连接字符串 s2 到字符串 s1 的末尾。</td><td></td></tr><tr><td>3</td><td><strong>strlen(s1);</strong></td></tr><tr><td>返回字符串 s1 的长度。</td><td></td></tr><tr><td>4</td><td><strong>strcmp(s1, s2);</strong></td></tr><tr><td>如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回小于 0；如果 s1&gt;s2 则返回大于 0。</td><td></td></tr><tr><td>5</td><td><strong>strchr(s1, ch);</strong></td></tr><tr><td>返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。</td><td></td></tr><tr><td>6</td><td><strong>strstr(s1, s2);</strong></td></tr><tr><td>返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</td><td></td></tr></tbody></table><p>下面的实例使用了上述的一些函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">char</span> str1[<span class="hljs-number">14</span>] = <span class="hljs-string">&quot;runoob&quot;</span>;<br>   <span class="hljs-keyword">char</span> str2[<span class="hljs-number">14</span>] = <span class="hljs-string">&quot;google&quot;</span>;<br>   <span class="hljs-keyword">char</span> str3[<span class="hljs-number">14</span>];<br>   <span class="hljs-keyword">int</span>  len ;<br> <br>   <span class="hljs-comment">/* 复制 str1 到 str3 */</span><br>   <span class="hljs-built_in">strcpy</span>(str3, str1);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;strcpy( str3, str1) :  %s\n&quot;</span>, str3 );<br> <br>   <span class="hljs-comment">/* 连接 str1 和 str2 */</span><br>   <span class="hljs-built_in">strcat</span>( str1, str2);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;strcat( str1, str2):   %s\n&quot;</span>, str1 );<br> <br>   <span class="hljs-comment">/* 连接后，str1 的总长度 */</span><br>   len = <span class="hljs-built_in">strlen</span>(str1);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;strlen(str1) :  %d\n&quot;</span>, len );<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br><span class="hljs-built_in">strcpy</span>( str3, str1) :  <span class="hljs-function">runoob</span><br><span class="hljs-function"><span class="hljs-title">strcat</span><span class="hljs-params">( str1, str2)</span>:   runoobgoogle</span><br><span class="hljs-function">strlen(str1) :  <span class="hljs-number">12</span></span><br></code></pre></td></tr></table></figure><h1 id="C结构体"><a href="#C结构体" class="headerlink" title="C结构体"></a>C结构体</h1><p>C 数组允许定义可存储相同类型数据项的变量，<strong>结构</strong>是 C 编程中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。<br>结构用于表示一条记录，假设您想要跟踪图书馆中书本的动态，您可能需要跟踪每本书的下列属性：</p><ul><li>Title</li><li>Author</li><li>Subject</li><li>Book ID<h2 id="定义结构"><a href="#定义结构" class="headerlink" title="定义结构"></a>定义结构</h2>为了定义结构，您必须使用 <strong>struct</strong> 语句。struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">struct</span> tag &#123; <br>    <span class="hljs-keyword">member</span>-list<br>    <span class="hljs-keyword">member</span>-list <br>    <span class="hljs-keyword">member</span>-list  <br>    ...<br>&#125; variable-list ;<br></code></pre></td></tr></table></figure></li></ul><p><strong>tag</strong>是结构体标签。<br><strong>member-list</strong>是标准的变量定义，比如 int i; 或者 float f，或者其他有效的变量定义。<br><strong>variable-list</strong> 结构变量，定义在结构的末尾，最后一个分号之前，您可以指定一个或多个结构变量。下面是声明 Book 结构的方式：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">struct Books<br>&#123;<br>   char  title<span class="hljs-selector-attr">[50]</span>;<br>   char  author<span class="hljs-selector-attr">[50]</span>;<br>   char  subject<span class="hljs-selector-attr">[100]</span>;<br>   int   book_id;<br>&#125; book;<br></code></pre></td></tr></table></figure><p>在一般情况下，<strong>tag、member-list、variable-list</strong> 这 3 部分至少要出现 2 个。以下为实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c</span><br><span class="hljs-comment">//同时又声明了结构体变量s1</span><br><span class="hljs-comment">//这个结构体并没有标明其标签</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> a;<br>    <span class="hljs-keyword">char</span> b;<br>    <span class="hljs-keyword">double</span> c;<br>&#125; s1;<br> <br><span class="hljs-comment">//此声明声明了拥有3个成员的结构体，分别为整型的a，字符型的b和双精度的c</span><br><span class="hljs-comment">//结构体的标签被命名为SIMPLE,没有声明变量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SIMPLE</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> a;<br>    <span class="hljs-keyword">char</span> b;<br>    <span class="hljs-keyword">double</span> c;<br>&#125;;<br><span class="hljs-comment">//用SIMPLE标签的结构体，另外声明了变量t1、t2、t3</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SIMPLE</span> <span class="hljs-title">t1</span>, <span class="hljs-title">t2</span>[20], *<span class="hljs-title">t3</span>;</span><br> <br><span class="hljs-comment">//也可以用typedef创建新类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-keyword">int</span> a;<br>    <span class="hljs-keyword">char</span> b;<br>    <span class="hljs-keyword">double</span> c; <br>&#125; Simple2;<br><span class="hljs-comment">//现在可以用Simple2作为类型声明新的结构体变量</span><br>Simple2 u1, u2[<span class="hljs-number">20</span>], *u3;<br></code></pre></td></tr></table></figure><p>在上面的声明中，第一个和第二声明被编译器当作两个完全不同的类型，即使他们的成员列表是一样的，如果令 t3=&amp;s1，则是非法的。<br>结构体的成员可以包含其他结构体，也可以包含指向自己结构体类型的指针，而通常这种指针的应用是为了实现一些更高级的数据结构如链表和树等。</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-comment">//此结构体的声明包含了其他的结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-type">COMPLEX</span><br>&#123;<br>    char <span class="hljs-keyword">string</span>[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">struct</span> <span class="hljs-type">SIMPLE</span> a;<br>&#125;;<br> <br><span class="hljs-comment">//此结构体的声明包含了指向自己类型的指针</span><br><span class="hljs-keyword">struct</span> <span class="hljs-type">NODE</span><br>&#123;<br>    char <span class="hljs-keyword">string</span>[<span class="hljs-number">100</span>];<br>    <span class="hljs-keyword">struct</span> <span class="hljs-type">NODE</span> *next_node;<br>&#125;;<br></code></pre></td></tr></table></figure><p>如果两个结构体互相包含，则需要对其中一个结构体进行不完整声明，如下所示：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">struct</span> <span class="hljs-type">B</span>;    <span class="hljs-comment">//对结构体B进行不完整声明</span><br> <br><span class="hljs-comment">//结构体A中包含指向结构体B的指针</span><br><span class="hljs-keyword">struct</span> <span class="hljs-type">A</span><br>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-type">B</span> *partner;<br>    <span class="hljs-comment">//other members;</span><br>&#125;;<br> <br><span class="hljs-comment">//结构体B中包含指向结构体A的指针，在A声明完后，B也随之进行声明</span><br><span class="hljs-keyword">struct</span> <span class="hljs-type">B</span><br>&#123;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-type">A</span> *partner;<br>    <span class="hljs-comment">//other members;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="结构体变量的初始化"><a href="#结构体变量的初始化" class="headerlink" title="结构体变量的初始化"></a>结构体变量的初始化</h2><p>和其它类型变量一样，对结构体变量可以在定义时指定初始值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span></span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">char</span>  title[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  author[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">int</span>   book_id;<br>&#125; book = &#123;<span class="hljs-string">&quot;C 语言&quot;</span>, <span class="hljs-string">&quot;RUNOOB&quot;</span>, <span class="hljs-string">&quot;编程语言&quot;</span>, <span class="hljs-number">123456</span>&#125;;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;title : %s\nauthor: %s\nsubject: %s\nbook_id: %d\n&quot;</span>, book.title, book.author, book.subject, book.book_id);<br>&#125;<br><br><br>执行输出结果为：<br><br>title : C 语言<br>author: RUNOOB<br>subject: 编程语言<br>book_id: <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h2 id="访问结构成员"><a href="#访问结构成员" class="headerlink" title="访问结构成员"></a>访问结构成员</h2><p>为了访问结构的成员，我们使用<strong>成员访问运算符（.）</strong>。成员访问运算符是结构变量名称和我们要访问的结构成员之间的一个句号。您可以使用 <strong>struct</strong> 关键字来定义结构类型的变量。下面的实例演示了结构的用法</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;stdio.h&gt;<br>#<span class="hljs-keyword">include</span> &lt;<span class="hljs-built_in">string</span>.h&gt;<br> <br><span class="hljs-keyword">struct</span> Books<br>&#123;<br>   <span class="hljs-built_in">char</span>  title<span class="hljs-literal">[<span class="hljs-number">50</span>]</span>;<br>   <span class="hljs-built_in">char</span>  author<span class="hljs-literal">[<span class="hljs-number">50</span>]</span>;<br>   <span class="hljs-built_in">char</span>  subject<span class="hljs-literal">[<span class="hljs-number">100</span>]</span>;<br>   <span class="hljs-built_in">int</span>   book_id;<br>&#125;;<br> <br><span class="hljs-built_in">int</span> main( )<br>&#123;<br>   <span class="hljs-keyword">struct</span> Books Book1;        <span class="hljs-comment">/* 声明 Book1，类型为 Books */</span><br>   <span class="hljs-keyword">struct</span> Books Book2;        <span class="hljs-comment">/* 声明 Book2，类型为 Books */</span><br> <br>   <span class="hljs-comment">/* Book1 详述 */</span><br>   strcpy( <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book1</span>.</span></span>title, <span class="hljs-string">&quot;C Programming&quot;</span>);<br>   strcpy( <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book1</span>.</span></span>author, <span class="hljs-string">&quot;Nuha Ali&quot;</span>); <br>   strcpy( <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book1</span>.</span></span>subject, <span class="hljs-string">&quot;C Programming Tutorial&quot;</span>);<br>   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book1</span>.</span></span>book_id = <span class="hljs-number">6495407</span>;<br> <br>   <span class="hljs-comment">/* Book2 详述 */</span><br>   strcpy( <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book2</span>.</span></span>title, <span class="hljs-string">&quot;Telecom Billing&quot;</span>);<br>   strcpy( <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book2</span>.</span></span>author, <span class="hljs-string">&quot;Zara Ali&quot;</span>);<br>   strcpy( <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book2</span>.</span></span>subject, <span class="hljs-string">&quot;Telecom Billing Tutorial&quot;</span>);<br>   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book2</span>.</span></span>book_id = <span class="hljs-number">6495700</span>;<br> <br>   <span class="hljs-comment">/* 输出 Book1 信息 */</span><br>   printf( <span class="hljs-string">&quot;Book 1 title : %s\n&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book1</span>.</span></span>title);<br>   printf( <span class="hljs-string">&quot;Book 1 author : %s\n&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book1</span>.</span></span>author);<br>   printf( <span class="hljs-string">&quot;Book 1 subject : %s\n&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book1</span>.</span></span>subject);<br>   printf( <span class="hljs-string">&quot;Book 1 book_id : %d\n&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book1</span>.</span></span>book_id);<br> <br>   <span class="hljs-comment">/* 输出 Book2 信息 */</span><br>   printf( <span class="hljs-string">&quot;Book 2 title : %s\n&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book2</span>.</span></span>title);<br>   printf( <span class="hljs-string">&quot;Book 2 author : %s\n&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book2</span>.</span></span>author);<br>   printf( <span class="hljs-string">&quot;Book 2 subject : %s\n&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book2</span>.</span></span>subject);<br>   printf( <span class="hljs-string">&quot;Book 2 book_id : %d\n&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Book2</span>.</span></span>book_id);<br> <br>   return <span class="hljs-number">0</span>;<br>&#125;<br><br><br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>Book <span class="hljs-number">1</span> title : C Programming<br>Book <span class="hljs-number">1</span> author : Nuha Ali<br>Book <span class="hljs-number">1</span> subject : C Programming Tutorial<br>Book <span class="hljs-number">1</span> book_id : <span class="hljs-number">6495407</span><br>Book <span class="hljs-number">2</span> title : Telecom Billing<br>Book <span class="hljs-number">2</span> author : Zara Ali<br>Book <span class="hljs-number">2</span> subject : Telecom Billing Tutorial<br>Book <span class="hljs-number">2</span> book_id : <span class="hljs-number">6495700</span><br></code></pre></td></tr></table></figure><h2 id="结构作为函数参数"><a href="#结构作为函数参数" class="headerlink" title="结构作为函数参数"></a>结构作为函数参数</h2><p>您可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。您可以使用上面实例中的方式来访问结构</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br> <br>struct <span class="hljs-keyword">Books</span><br><span class="hljs-keyword"></span>&#123;<br>   char  title[<span class="hljs-number">50</span>];<br>   char  author[<span class="hljs-number">50</span>];<br>   char  <span class="hljs-keyword">subject[100];</span><br><span class="hljs-keyword"></span>   int   <span class="hljs-keyword">book_id;</span><br><span class="hljs-keyword"></span>&#125;;<br> <br><span class="hljs-comment">/* 函数声明 */</span><br>void printBook( struct <span class="hljs-keyword">Books </span><span class="hljs-keyword">book </span>);<br>int main( )<br>&#123;<br>   struct <span class="hljs-keyword">Books </span><span class="hljs-keyword">Book1; </span>       <span class="hljs-comment">/* 声明 Book1，类型为 Books */</span><br>   struct <span class="hljs-keyword">Books </span><span class="hljs-keyword">Book2; </span>       <span class="hljs-comment">/* 声明 Book2，类型为 Books */</span><br> <br>   <span class="hljs-comment">/* Book1 详述 */</span><br>   strcpy( <span class="hljs-keyword">Book1.title, </span><span class="hljs-string">&quot;C Programming&quot;</span>);<br>   strcpy( <span class="hljs-keyword">Book1.author, </span><span class="hljs-string">&quot;Nuha Ali&quot;</span>); <br>   strcpy( <span class="hljs-keyword">Book1.subject, </span><span class="hljs-string">&quot;C Programming Tutorial&quot;</span>);<br>   <span class="hljs-keyword">Book1.book_id </span>= <span class="hljs-number">6495407</span>;<br> <br>   <span class="hljs-comment">/* Book2 详述 */</span><br>   strcpy( <span class="hljs-keyword">Book2.title, </span><span class="hljs-string">&quot;Telecom Billing&quot;</span>);<br>   strcpy( <span class="hljs-keyword">Book2.author, </span><span class="hljs-string">&quot;Zara Ali&quot;</span>);<br>   strcpy( <span class="hljs-keyword">Book2.subject, </span><span class="hljs-string">&quot;Telecom Billing Tutorial&quot;</span>);<br>   <span class="hljs-keyword">Book2.book_id </span>= <span class="hljs-number">6495700</span>;<br> <br>   <span class="hljs-comment">/* 输出 Book1 信息 */</span><br>   printBook( <span class="hljs-keyword">Book1 </span>);<br> <br>   <span class="hljs-comment">/* 输出 Book2 信息 */</span><br>   printBook( <span class="hljs-keyword">Book2 </span>);<br> <br>   return <span class="hljs-number">0</span>;<br>&#125;<br>void printBook( struct <span class="hljs-keyword">Books </span><span class="hljs-keyword">book </span>)<br>&#123;<br>   printf( <span class="hljs-string">&quot;Book title : %s\n&quot;</span>, <span class="hljs-keyword">book.title);</span><br><span class="hljs-keyword"></span>   printf( <span class="hljs-string">&quot;Book author : %s\n&quot;</span>, <span class="hljs-keyword">book.author);</span><br><span class="hljs-keyword"></span>   printf( <span class="hljs-string">&quot;Book subject : %s\n&quot;</span>, <span class="hljs-keyword">book.subject);</span><br><span class="hljs-keyword"></span>   printf( <span class="hljs-string">&quot;Book book_id : %d\n&quot;</span>, <span class="hljs-keyword">book.book_id);</span><br><span class="hljs-keyword"></span>&#125;<br>当上面的代码被编译和执行时，它会产生下列结果：<br><br><span class="hljs-keyword">Book </span>title : C Programming<br><span class="hljs-keyword">Book </span>author : Nuha Ali<br><span class="hljs-keyword">Book </span><span class="hljs-keyword">subject </span>: C Programming Tutorial<br><span class="hljs-keyword">Book </span><span class="hljs-keyword">book_id </span>: <span class="hljs-number">6495407</span><br><span class="hljs-keyword">Book </span>title : Telecom <span class="hljs-keyword">Billing</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">Book </span>author : Zara Ali<br><span class="hljs-keyword">Book </span><span class="hljs-keyword">subject </span>: Telecom <span class="hljs-keyword">Billing </span>Tutorial<br><span class="hljs-keyword">Book </span><span class="hljs-keyword">book_id </span>: <span class="hljs-number">6495700</span><br></code></pre></td></tr></table></figure><h2 id="指向结构的指针"><a href="#指向结构的指针" class="headerlink" title="指向结构的指针"></a>指向结构的指针</h2><p>您可以定义指向结构的指针，方式与定义指向其他类型变量的指针相似，如下所示：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">struct</span> <span class="hljs-type">Books</span> *struct_pointer;<br></code></pre></td></tr></table></figure><p>现在，您可以在上述定义的指针变量中存储结构变量的地址。为了查找结构变量的地址，请把 &amp; 运算符放在结构名称的前面，如下所示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">struct_pointer</span> = &amp;Book1<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>为了使用指向该结构的指针访问结构的成员，您必须使用 -&gt; 运算符，如下所示：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;string.h&gt;</span><br> <br>struct <span class="hljs-keyword">Books</span><br><span class="hljs-keyword"></span>&#123;<br>   char  title[<span class="hljs-number">50</span>];<br>   char  author[<span class="hljs-number">50</span>];<br>   char  <span class="hljs-keyword">subject[100];</span><br><span class="hljs-keyword"></span>   int   <span class="hljs-keyword">book_id;</span><br><span class="hljs-keyword"></span>&#125;;<br> <br><span class="hljs-comment">/* 函数声明 */</span><br>void printBook( struct <span class="hljs-keyword">Books </span>*<span class="hljs-keyword">book </span>);<br>int main( )<br>&#123;<br>   struct <span class="hljs-keyword">Books </span><span class="hljs-keyword">Book1; </span>       <span class="hljs-comment">/* 声明 Book1，类型为 Books */</span><br>   struct <span class="hljs-keyword">Books </span><span class="hljs-keyword">Book2; </span>       <span class="hljs-comment">/* 声明 Book2，类型为 Books */</span><br> <br>   <span class="hljs-comment">/* Book1 详述 */</span><br>   strcpy( <span class="hljs-keyword">Book1.title, </span><span class="hljs-string">&quot;C Programming&quot;</span>);<br>   strcpy( <span class="hljs-keyword">Book1.author, </span><span class="hljs-string">&quot;Nuha Ali&quot;</span>); <br>   strcpy( <span class="hljs-keyword">Book1.subject, </span><span class="hljs-string">&quot;C Programming Tutorial&quot;</span>);<br>   <span class="hljs-keyword">Book1.book_id </span>= <span class="hljs-number">6495407</span>;<br> <br>   <span class="hljs-comment">/* Book2 详述 */</span><br>   strcpy( <span class="hljs-keyword">Book2.title, </span><span class="hljs-string">&quot;Telecom Billing&quot;</span>);<br>   strcpy( <span class="hljs-keyword">Book2.author, </span><span class="hljs-string">&quot;Zara Ali&quot;</span>);<br>   strcpy( <span class="hljs-keyword">Book2.subject, </span><span class="hljs-string">&quot;Telecom Billing Tutorial&quot;</span>);<br>   <span class="hljs-keyword">Book2.book_id </span>= <span class="hljs-number">6495700</span>;<br> <br>   <span class="hljs-comment">/* 通过传 Book1 的地址来输出 Book1 信息 */</span><br>   printBook( &amp;<span class="hljs-keyword">Book1 </span>);<br> <br>   <span class="hljs-comment">/* 通过传 Book2 的地址来输出 Book2 信息 */</span><br>   printBook( &amp;<span class="hljs-keyword">Book2 </span>);<br> <br>   return <span class="hljs-number">0</span>;<br>&#125;<br>void printBook( struct <span class="hljs-keyword">Books </span>*<span class="hljs-keyword">book </span>)<br>&#123;<br>   printf( <span class="hljs-string">&quot;Book title : %s\n&quot;</span>, <span class="hljs-keyword">book-&gt;title);</span><br><span class="hljs-keyword"></span>   printf( <span class="hljs-string">&quot;Book author : %s\n&quot;</span>, <span class="hljs-keyword">book-&gt;author);</span><br><span class="hljs-keyword"></span>   printf( <span class="hljs-string">&quot;Book subject : %s\n&quot;</span>, <span class="hljs-keyword">book-&gt;subject);</span><br><span class="hljs-keyword"></span>   printf( <span class="hljs-string">&quot;Book book_id : %d\n&quot;</span>, <span class="hljs-keyword">book-&gt;book_id);</span><br><span class="hljs-keyword"></span>&#125;<br>当上面的代码被编译和执行时，它会产生下列结果：<br><br><span class="hljs-keyword">Book </span>title : C Programming<br><span class="hljs-keyword">Book </span>author : Nuha Ali<br><span class="hljs-keyword">Book </span><span class="hljs-keyword">subject </span>: C Programming Tutorial<br><span class="hljs-keyword">Book </span><span class="hljs-keyword">book_id </span>: <span class="hljs-number">6495407</span><br><span class="hljs-keyword">Book </span>title : Telecom <span class="hljs-keyword">Billing</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">Book </span>author : Zara Ali<br><span class="hljs-keyword">Book </span><span class="hljs-keyword">subject </span>: Telecom <span class="hljs-keyword">Billing </span>Tutorial<br><span class="hljs-keyword">Book </span><span class="hljs-keyword">book_id </span>: <span class="hljs-number">6495700</span><br></code></pre></td></tr></table></figure><h1 id="C共用体"><a href="#C共用体" class="headerlink" title="C共用体"></a>C共用体</h1><p><strong>共用体</strong>是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型。您可以定义一个带有多成员的共用体，但是任何时候只能有一个成员带有值。共用体提供了一种使用相同的内存位置的有效方式。</p><h2 id="定义共用体"><a href="#定义共用体" class="headerlink" title="定义共用体"></a>定义共用体</h2><p>为了定义共用体，您必须使用 <strong>union</strong> 语句，方式与定义结构类似。union 语句定义了一个新的数据类型，带有多个成员。union 语句的格式如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">union</span> [<span class="hljs-built_in">union</span> tag]<br>&#123;<br>   <span class="hljs-built_in">member</span> definition;<br>   <span class="hljs-built_in">member</span> definition;<br>   ...<br>   <span class="hljs-built_in">member</span> definition;<br>&#125; [one <span class="hljs-keyword">or</span> more <span class="hljs-built_in">union</span> variables];<br></code></pre></td></tr></table></figure><p><strong>union tag</strong> 是可选的，每个 member definition 是标准的变量定义，比如 int i; 或者 float f; 或者其他有效的变量定义。在共用体定义的末尾，最后一个分号之前，您可以指定一个或多个共用体变量，这是可选的。下面定义一个名为 Data 的共用体类型，有三个成员 i、f 和 str：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fortran">union <span class="hljs-keyword">Data</span><br>&#123;<br>   <span class="hljs-built_in">int</span> i;<br>   <span class="hljs-built_in">float</span> f;<br>   <span class="hljs-built_in">char</span>  str[<span class="hljs-number">20</span>];<br>&#125; <span class="hljs-keyword">data</span>;<br></code></pre></td></tr></table></figure><p>现在，<strong>Data</strong>类型的变量可以存储一个整数、一个浮点数，或者一个字符串。这意味着一个变量（相同的内存位置）可以存储多个多种类型的数据。您可以根据需要在一个共用体内使用任何内置的或者用户自定义的数据类型。<br>共用体占用的内存应足够存储共用体中最大的成员。例如，在上面的实例中，Data 将占用 20 个字节的内存空间，因为在各个成员中，字符串所占用的空间是最大的。下面的实例将显示上面的共用体占用的总内存大小：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Data</span></span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">int</span> i;<br>   <span class="hljs-keyword">float</span> f;<br>   <span class="hljs-keyword">char</span>  str[<span class="hljs-number">20</span>];<br>&#125;;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Data</span> <span class="hljs-title">data</span>;</span>        <br> <br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Memory size occupied by data : %d\n&quot;</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(data));<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>Memory size occupied by data : <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h2 id="访问共用体成员"><a href="#访问共用体成员" class="headerlink" title="访问共用体成员"></a>访问共用体成员</h2><p>为了访问共用体的成员，我们使用<strong>成员访问运算符（.）</strong>。成员访问运算符是共用体变量名称和我们要访问的共用体成员之间的一个句号。您可以使用 <strong>union</strong> 关键字来定义共用体类型的变量。下面的实例演示了共用体的用法：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta">#include &lt;stdio.h&gt;</span><br><span class="hljs-meta">#include &lt;string.h&gt;</span><br> <br><span class="hljs-title">union</span> <span class="hljs-type">Data</span><br>&#123;<br>   int i;<br>   float f;<br>   char  str[<span class="hljs-number">20</span>];<br>&#125;;<br> <br><span class="hljs-title">int</span> main( )<br>&#123;<br>   union <span class="hljs-type">Data</span> <span class="hljs-class"><span class="hljs-keyword">data</span>;        </span><br> <br>   <span class="hljs-class"><span class="hljs-keyword">data</span>.i = 10;</span><br>   <span class="hljs-class"><span class="hljs-keyword">data</span>.f = 220.5;</span><br>   strcpy( <span class="hljs-class"><span class="hljs-keyword">data</span>.str, &quot;<span class="hljs-type">C</span> <span class="hljs-type">Programming</span>&quot;);</span><br> <br>   printf( <span class="hljs-string">&quot;data.i : %d\n&quot;</span>, <span class="hljs-class"><span class="hljs-keyword">data</span>.i);</span><br>   printf( <span class="hljs-string">&quot;data.f : %f\n&quot;</span>, <span class="hljs-class"><span class="hljs-keyword">data</span>.f);</span><br>   printf( <span class="hljs-string">&quot;data.str : %s\n&quot;</span>, <span class="hljs-class"><span class="hljs-keyword">data</span>.str);</span><br> <br>   return <span class="hljs-number">0</span>;<br>&#125;<br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br><span class="hljs-class"><span class="hljs-keyword">data</span>.i : 1917853763</span><br><span class="hljs-class"><span class="hljs-keyword">data</span>.f : 4122360580327794860452759994368.000000</span><br><span class="hljs-class"><span class="hljs-keyword">data</span>.str : <span class="hljs-type">C</span> <span class="hljs-type">Programming</span></span><br></code></pre></td></tr></table></figure><p>在这里，我们可以看到共用体的 <strong>i</strong> 和 <strong>f</strong> 成员的值有损坏，因为最后赋给变量的值占用了内存位置，这也是 <strong>str</strong> 成员能够完好输出的原因。现在让我们再来看一个相同的实例，这次我们在同一时间只使用一个变量，这也演示了使用共用体的主要目的：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta">#include &lt;stdio.h&gt;</span><br><span class="hljs-meta">#include &lt;string.h&gt;</span><br> <br><span class="hljs-title">union</span> <span class="hljs-type">Data</span><br>&#123;<br>   int i;<br>   float f;<br>   char  str[<span class="hljs-number">20</span>];<br>&#125;;<br> <br><span class="hljs-title">int</span> main( )<br>&#123;<br>   union <span class="hljs-type">Data</span> <span class="hljs-class"><span class="hljs-keyword">data</span>;        </span><br> <br>   <span class="hljs-class"><span class="hljs-keyword">data</span>.i = 10;</span><br>   printf( <span class="hljs-string">&quot;data.i : %d\n&quot;</span>, <span class="hljs-class"><span class="hljs-keyword">data</span>.i);</span><br>   <br>   <span class="hljs-class"><span class="hljs-keyword">data</span>.f = 220.5;</span><br>   printf( <span class="hljs-string">&quot;data.f : %f\n&quot;</span>, <span class="hljs-class"><span class="hljs-keyword">data</span>.f);</span><br>   <br>   strcpy( <span class="hljs-class"><span class="hljs-keyword">data</span>.str, &quot;<span class="hljs-type">C</span> <span class="hljs-type">Programming</span>&quot;);</span><br>   printf( <span class="hljs-string">&quot;data.str : %s\n&quot;</span>, <span class="hljs-class"><span class="hljs-keyword">data</span>.str);</span><br> <br>   return <span class="hljs-number">0</span>;<br>&#125;<br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br><span class="hljs-class"><span class="hljs-keyword">data</span>.i : 10</span><br><span class="hljs-class"><span class="hljs-keyword">data</span>.f : 220.500000</span><br><span class="hljs-class"><span class="hljs-keyword">data</span>.str : <span class="hljs-type">C</span> <span class="hljs-type">Programming</span></span><br></code></pre></td></tr></table></figure><p>在这里，所有的成员都能完好输出，因为同一时间只用到一个成员。</p><h1 id="C位域"><a href="#C位域" class="headerlink" title="C位域"></a>C位域</h1><p>如果程序的结构中包含多个开关量，只有 <strong>TRUE/FALSE</strong> 变量，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> widthValidated;<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> heightValidated;<br>&#125; status;<br></code></pre></td></tr></table></figure><p>这种结构需要 8 字节的内存空间，但在实际上，在每个变量中，我们只存储 0 或 1。在这种情况下，C 语言提供了一种更好的利用内存空间的方式。如果您在结构内使用这样的变量，您可以定义变量的宽度来告诉编译器，您将只使用这些字节。例如，上面的结构可以重写成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> widthValidated : <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> heightValidated : <span class="hljs-number">1</span>;<br>&#125; status;<br></code></pre></td></tr></table></figure><p>现在，上面的结构中，status 变量将占用 4 个字节的内存空间，但是只有 2 位被用来存储值。如果您用了 32 个变量，每一个变量宽度为 1 位，那么 status 结构将使用 4 个字节，但只要您再多用一个变量，如果使用了 33 个变量，那么它将分配内存的下一段来存储第 33 个变量，这个时候就开始使用 8 个字节。让我们看看下面的实例来理解这个概念：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-comment">/* 定义简单的结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> widthValidated;<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> heightValidated;<br>&#125; status1;<br> <br><span class="hljs-comment">/* 定义位域结构 */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> widthValidated : <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> heightValidated : <span class="hljs-number">1</span>;<br>&#125; status2;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Memory size occupied by status1 : %d\n&quot;</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(status1));<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Memory size occupied by status2 : %d\n&quot;</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(status2));<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>Memory size occupied by status1 : <span class="hljs-number">8</span><br>Memory size occupied by status2 : <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="位域声明"><a href="#位域声明" class="headerlink" title="位域声明"></a>位域声明</h2><p>有些信息在存储时，并不需要占用一个完整的字节，而只需占几个或一个二进制位。例如在存放一个开关量时，只有 0 和 1 两种状态，用 1 位二进位即可。为了节省存储空间，并使处理简便，C 语言又提供了一种数据结构，称为”位域”或”位段”。<br>所谓”位域”是把一个字节中的二进位划分为几个不同的区域，并说明每个区域的位数。每个域有一个域名，允许在程序中按域名进行操作。这样就可以把几个不同的对象用一个字节的二进制位域来表示。<br>典型的实例：</p><ul><li>用 1 位二进位存放一个开关量时，只有 0 和 1 两种状态。</li><li>读取外部文件格式——可以读取非标准的文件格式。例如：9 位的整数。<h3 id="位域的定义和位域变量的说明"><a href="#位域的定义和位域变量的说明" class="headerlink" title="位域的定义和位域变量的说明"></a>位域的定义和位域变量的说明</h3>位域定义与结构定义相仿，其形式为：<figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">struct</span> 位域结构名 <br>&#123;<br><br> 位域列表<br><br>&#125;;<br><br>其中位域列表的形式为：<br><br><span class="hljs-built_in">type</span> [member_name] : width ;<br></code></pre></td></tr></table></figure>下面是有关位域中变量元素的描述：</li></ul><table><thead><tr><th>元素</th><th>描述</th></tr></thead><tbody><tr><td>type</td><td>只能为 int(整型)，unsigned int(无符号整型)，signed int(有符号整型) 三种类型，决定了如何解释位域的值。</td></tr><tr><td>member_name</td><td>位域的名称。</td></tr><tr><td>width</td><td>位域中位的数量。宽度必须小于或等于指定类型的位宽度。</td></tr></tbody></table><p>带有预定义宽度的变量被称为<strong>位域</strong>。位域可以存储多于 1 位的数，例如，需要一个变量来存储从 0 到 7 的值，您可以定义一个宽度为 3 位的位域，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> age : <span class="hljs-number">3</span>;<br>&#125; Age;<br></code></pre></td></tr></table></figure><p>上面的结构定义指示 C 编译器，age 变量将只使用 3 位来存储这个值，如果您试图使用超过 3 位，则无法完成。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">struct bs&#123;<br>    int <span class="hljs-selector-tag">a</span>:<span class="hljs-number">8</span>;<br>    int <span class="hljs-selector-tag">b</span>:<span class="hljs-number">2</span>;<br>    int c:<span class="hljs-number">6</span>;<br>&#125;data;<br></code></pre></td></tr></table></figure><p>data 为 bs 变量，共占两个字节。其中位域 a 占 8 位，位域 b 占 2 位，位域 c 占 6 位。<br>让我们再来看一个实例：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">struct</span> packed_struct &#123;<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> f1:<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> f2:<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> f3:<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> f4:<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">type</span>:<span class="hljs-number">4</span>;<br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> my_int:<span class="hljs-number">9</span>;<br>&#125; pack;<br></code></pre></td></tr></table></figure><p>在这里，packed_struct 包含了 6 个成员：四个 1 位的标识符 f1..f4、一个 4 位的 type 和一个 9 位的 my_int。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> &lt;stdio.h&gt;<br>#<span class="hljs-keyword">include</span> &lt;<span class="hljs-built_in">string</span>.h&gt;<br> <br><span class="hljs-keyword">struct</span><br>&#123;<br>  unsigned <span class="hljs-built_in">int</span> age : <span class="hljs-number">3</span>;<br>&#125; Age;<br> <br><span class="hljs-built_in">int</span> main( )<br>&#123;<br>   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Age</span>.</span></span>age = <span class="hljs-number">4</span>;<br>   printf( <span class="hljs-string">&quot;Sizeof( Age ) : %d\n&quot;</span>, sizeof(Age) );<br>   printf( <span class="hljs-string">&quot;Age.age : %d\n&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Age</span>.</span></span>age );<br> <br>   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Age</span>.</span></span>age = <span class="hljs-number">7</span>;<br>   printf( <span class="hljs-string">&quot;Age.age : %d\n&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Age</span>.</span></span>age );<br> <br>   <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Age</span>.</span></span>age = <span class="hljs-number">8</span>; <span class="hljs-comment">// 二进制表示为 1000 有四位，超出</span><br>   printf( <span class="hljs-string">&quot;Age.age : %d\n&quot;</span>, <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Age</span>.</span></span>age );<br> <br>   return <span class="hljs-number">0</span>;<br>&#125;<br>当上面的代码被编译时，它会带有警告，当上面的代码被执行时，它会产生下列结果：<br><br><span class="hljs-constructor">Sizeof( Age )</span> : <span class="hljs-number">4</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Age</span>.</span></span>age : <span class="hljs-number">4</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Age</span>.</span></span>age : <span class="hljs-number">7</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Age</span>.</span></span>age : <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p><strong>对于位域的定义尚有以下几点说明：</strong></p><ul><li><p>一个位域存储在同一个字节中，如一个字节所剩空间不够存放另一位域时，则会从下一单元起存放该位域。也可以有意使某位域从下一单元开始。例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">struct bs&#123;<br>    unsigned <span class="hljs-selector-tag">a</span>:<span class="hljs-number">4</span>;<br>    unsigned  :<span class="hljs-number">4</span>;    <span class="hljs-comment">/* 空域 */</span><br>    unsigned <span class="hljs-selector-tag">b</span>:<span class="hljs-number">4</span>;    <span class="hljs-comment">/* 从下一单元开始存放 */</span><br>    unsigned c:<span class="hljs-number">4</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这个位域定义中，a 占第一字节的 4 位，后 4 位填 0 表示不使用，b 从第二字节开始，占用 4 位，c 占用 4 位。</p></li><li><p>位域的宽度不能超过它所依附的数据类型的长度，成员变量都是有类型的，这个类型限制了成员变量的最大长度，**:** 后面的数字不能超过这个长度。</p></li><li><p>位域可以是无名位域，这时它只用来作填充或调整位置。无名的位域是不能使用的。例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">struct k&#123;<br>    int <span class="hljs-selector-tag">a</span>:<span class="hljs-number">1</span>;<br>    int  :<span class="hljs-number">2</span>;    <span class="hljs-comment">/* 该 2 位不能使用 */</span><br>    int <span class="hljs-selector-tag">b</span>:<span class="hljs-number">3</span>;<br>    int c:<span class="hljs-number">2</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>从以上分析可以看出，位域在本质上就是一种结构类型，不过其成员是按二进位分配的</p><h3 id="位域的使用"><a href="#位域的使用" class="headerlink" title="位域的使用"></a>位域的使用</h3><p>位域的使用和结构成员的使用相同，其一般形式为：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">位域变量名.位域名<br>位域变量名-&gt;位域名<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xl">int main()&#123;<br>    struct bs&#123;<br>        unsigned a:<span class="hljs-number">1</span>;<br>        unsigned b:<span class="hljs-number">3</span>;<br>        unsigned c:<span class="hljs-number">4</span>;<br>    &#125; bit,*pbit;<br>    bit.a=<span class="hljs-number">1</span>;    <span class="hljs-comment">/* 给位域赋值（应注意赋值不能超过该位域的允许范围） */</span><br>    bit.b=<span class="hljs-number">7</span>;    <span class="hljs-comment">/* 给位域赋值（应注意赋值不能超过该位域的允许范围） */</span><br>    bit.c=<span class="hljs-number">15</span>;    <span class="hljs-comment">/* 给位域赋值（应注意赋值不能超过该位域的允许范围） */</span><br>    printf(<span class="hljs-string">&quot;%d,%d,%d\n&quot;</span>,bit.a,bit.b,bit.c);    <span class="hljs-comment">/* 以整型量格式输出三个域的内容 */</span><br>    pbit=&amp;bit;    <span class="hljs-comment">/* 把位域变量 bit 的地址送给指针变量 pbit */</span><br>    <span class="hljs-function"><span class="hljs-title">pbit</span>-&gt;</span>a=<span class="hljs-number">0</span>;    <span class="hljs-comment">/* 用指针方式给位域 a 重新赋值，赋为 0 */</span><br>    <span class="hljs-function"><span class="hljs-title">pbit</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">b</span>&amp;=3;    /* 使用了复合的位运算符 &quot;&amp;=&quot;，相当于：pbit-&gt;</span><span class="hljs-function"><span class="hljs-title">b</span>=pbit-&gt;</span>b&amp;<span class="hljs-number">3</span>，位域 b 中原有值为 <span class="hljs-number">7</span>，与 <span class="hljs-number">3</span> 作按位与运算的结果为 <span class="hljs-number">3</span>（<span class="hljs-number">111</span>&amp;<span class="hljs-number">011</span>=<span class="hljs-number">011</span>，十进制值为 <span class="hljs-number">3</span>） */<br>    <span class="hljs-function"><span class="hljs-title">pbit</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">c</span>|=1;    /* 使用了复合位运算符&quot;|=&quot;，相当于：pbit-&gt;</span><span class="hljs-function"><span class="hljs-title">c</span>=pbit-&gt;</span>c|<span class="hljs-number">1</span>，其结果为 <span class="hljs-number">15</span> */<br>    <span class="hljs-function"><span class="hljs-title">printf</span>(&quot;%d,%d,%d\n&quot;,pbit-&gt;</span><span class="hljs-function"><span class="hljs-title">a</span>,pbit-&gt;</span><span class="hljs-function"><span class="hljs-title">b</span>,pbit-&gt;</span>c);    <span class="hljs-comment">/* 用指针方式输出了这三个域的值 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-typedef"><a href="#C-typedef" class="headerlink" title="C typedef"></a>C typedef</h1><p>C 语言提供了 <strong>typedef</strong> 关键字，您可以使用它来为类型取一个新的名字。下面的实例为单字节数字定义了一个术语 <strong>BYTE</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> BYTE;<br></code></pre></td></tr></table></figure><p>在这个类型定义之后，标识符 BYTE 可作为类型 <strong>unsigned char</strong> 的缩写，例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">BYTE</span>  b<span class="hljs-number">1</span>, b<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>按照惯例，定义时会大写字母，以便提醒用户类型名称是一个象征性的缩写，但您也可以使用小写字母，如下：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> <span class="hljs-keyword">byte</span>;<br></code></pre></td></tr></table></figure><p>您也可以使用 <strong>typedef</strong> 来为用户自定义的数据类型取一个新的名字。例如，您可以对结构体使用 typedef 来定义一个新的数据类型名字，然后使用这个新的数据类型来直接定义结构变量，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span></span><br><span class="hljs-class">&#123;</span><br>   <span class="hljs-keyword">char</span>  title[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  author[<span class="hljs-number">50</span>];<br>   <span class="hljs-keyword">char</span>  subject[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">int</span>   book_id;<br>&#125; Book;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   Book book;<br> <br>   <span class="hljs-built_in">strcpy</span>( book.title, <span class="hljs-string">&quot;C 教程&quot;</span>);<br>   <span class="hljs-built_in">strcpy</span>( book.author, <span class="hljs-string">&quot;Runoob&quot;</span>); <br>   <span class="hljs-built_in">strcpy</span>( book.subject, <span class="hljs-string">&quot;编程语言&quot;</span>);<br>   book.book_id = <span class="hljs-number">12345</span>;<br> <br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;书标题 : %s\n&quot;</span>, book.title);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;书作者 : %s\n&quot;</span>, book.author);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;书类目 : %s\n&quot;</span>, book.subject);<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;书 ID : %d\n&quot;</span>, book.book_id);<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>书标题 : C 教程<br>书作者 : Runoob<br>书类目 : 编程语言<br>书 ID : <span class="hljs-number">12345</span><br></code></pre></td></tr></table></figure><h2 id="typedef-vs-define"><a href="#typedef-vs-define" class="headerlink" title="typedef vs #define"></a>typedef vs #define</h2></li></ul><p><strong>#define</strong> 是 C 指令，用于为各种数据类型定义别名，与 <strong>typedef</strong> 类似，但是它们有以下几点不同：</p><ul><li><strong>typedef</strong> 仅限于为类型定义符号名称，**#define** 不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。</li><li><strong>typedef</strong> 是由编译器执行解释的，**#define** 语句是由预编译器进行处理的。</li></ul><p>下面是 #define 的最简单的用法：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> TRUE  1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> FALSE 0</span><br> <br><span class="hljs-keyword">int</span> main( )<br>&#123;<br>   printf( <span class="hljs-string">&quot;TRUE 的值: %d\n&quot;</span>, <span class="hljs-literal">TRUE</span>);<br>   printf( <span class="hljs-string">&quot;FALSE 的值: %d\n&quot;</span>, <span class="hljs-literal">FALSE</span>);<br> <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>当上面的代码被编译和执行时，它会产生下列结果：<br><br><span class="hljs-literal">TRUE</span> 的值: <span class="hljs-number">1</span><br><span class="hljs-literal">FALSE</span> 的值: <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h1 id="C-输入-amp-输出"><a href="#C-输入-amp-输出" class="headerlink" title="C 输入 &amp; 输出"></a>C 输入 &amp; 输出</h1><p>当我们提到<strong>输入</strong>时，这意味着要向程序填充一些数据。输入可以是以文件的形式或从命令行中进行。C 语言提供了一系列内置的函数来读取给定的输入，并根据需要填充到程序中。<br>当我们提到<strong>输出</strong>时，这意味着要在屏幕上、打印机上或任意文件中显示一些数据。C 语言提供了一系列内置的函数来输出数据到计算机屏幕上和保存数据到文本文件或二进制文件中。</p><h2 id="标准文件"><a href="#标准文件" class="headerlink" title="标准文件"></a>标准文件</h2><p>C 语言把所有的设备都当作文件。所以设备（比如显示器）被处理的方式与文件相同。以下三个文件会在程序执行时自动打开，以便访问键盘和屏幕。</p><table><thead><tr><th>标准文件</th><th>文件指针</th><th>设备</th></tr></thead><tbody><tr><td>标准输入</td><td>stdin</td><td>键盘</td></tr><tr><td>标准输出</td><td>stdout</td><td>屏幕</td></tr><tr><td>标准错误</td><td>stderr</td><td>您的屏幕</td></tr></tbody></table><p>文件指针是访问文件的方式，本节将讲解如何从屏幕读取值以及如何把结果输出到屏幕上。<br>C 语言中的 I/O (输入/输出) 通常使用 printf() 和 scanf() 两个函数。<br>scanf() 函数用于从标准输入（键盘）读取并格式化， printf() 函数发送格式化输出到标准输出（屏幕）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span>      <span class="hljs-comment">// 执行 printf() 函数需要该库</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;菜鸟教程&quot;</span>);  <span class="hljs-comment">//显示引号中的内容</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>编译以上程序，输出结果为：<br><br>菜鸟教程<br></code></pre></td></tr></table></figure><p><strong>实例解析：</strong></p><ul><li>所有的 C 语言程序都需要包含 <strong>main()</strong> 函数。 代码从 <strong>main()</strong> 函数开始执行。</li><li><strong>printf()</strong> 用于格式化输出到屏幕。<strong>printf()</strong> 函数在 <strong>“stdio.h”</strong> 头文件中声明。</li><li><strong>stdio.h</strong> 是一个头文件 (标准输入输出头文件) and <strong>#include</strong> 是一个预处理命令，用来引入头文件。 当编译器遇到 <strong>printf()</strong> 函数时，如果没有找到 <strong>stdio.h</strong> 头文件，会发生编译错误。</li><li><strong>return 0;</strong> 语句用于表示退出程序。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> testInteger = <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Number = %d&quot;</span>, testInteger);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>编译以上程序，输出结果为：<br><br>Number = <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>在 printf() 函数的引号中使用 “%d” (整型) 来匹配整型变量 testInteger 并输出到屏幕。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">float</span> f;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a number: &quot;</span>);<br>    <span class="hljs-comment">// %f 匹配浮点型数据</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%f&quot;</span>,&amp;f);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value = %f&quot;</span>, f);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="getchar-amp-putchar-函数"><a href="#getchar-amp-putchar-函数" class="headerlink" title="getchar() &amp; putchar() 函数"></a>getchar() &amp; putchar() 函数</h2><p><strong>int getchar(void)</strong> 函数从屏幕读取下一个可用的字符，并把它返回为一个整数。这个函数在同一个时间内只会读取一个单一的字符。您可以在循环内使用这个方法，以便从屏幕上读取多个字符。<br><strong>int putchar(int c)</strong> 函数把字符输出到屏幕上，并返回相同的字符。这个函数在同一个时间内只会输出一个单一的字符。您可以在循环内使用这个方法，以便在屏幕上输出多个字符。<br>请看下面的实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">int</span> c;<br> <br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Enter a value :&quot;</span>);<br>   c = <span class="hljs-built_in">getchar</span>( );<br> <br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;\nYou entered: &quot;</span>);<br>   <span class="hljs-built_in">putchar</span>( c );<br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;\n&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>当上面的代码被编译和执行时，它会等待您输入一些文本，当您输入一个文本并按下回车键时，程序会继续并只会读取一个单一的字符，显示如下：<br><br>$./a.out<br>Enter a value :runoob<br><br>You entered: r<br></code></pre></td></tr></table></figure><h2 id="gets-amp-puts-函数"><a href="#gets-amp-puts-函数" class="headerlink" title="gets() &amp; puts() 函数"></a>gets() &amp; puts() 函数</h2><p>**char <em>gets(char <em>s)</em></em> 函数从 <strong>stdin</strong> 读取一行到 <strong>s</strong> 所指向的缓冲区，直到一个终止符或 EOF。<br>*<em>int puts(const char <em>s)</em></em> 函数把字符串 s 和一个尾随的换行符写入到 <strong>stdout</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">include &lt;stdio.h&gt;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">char</span> str[<span class="hljs-number">100</span>];<br> <br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Enter a value :&quot;</span>);<br>   <span class="hljs-built_in">gets</span>( str );<br> <br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;\nYou entered: &quot;</span>);<br>   <span class="hljs-built_in">puts</span>( str );<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会等待您输入一些文本，当您输入一个文本并按下回车键时，程序会继续并读取一整行直到该行结束，显示如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$./<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.out</span><br>Enter <span class="hljs-selector-tag">a</span> value :runoob<br><br>You entered: runoob<br></code></pre></td></tr></table></figure><h2 id="scanf-和-printf-函数"><a href="#scanf-和-printf-函数" class="headerlink" title="scanf() 和 printf() 函数"></a>scanf() 和 printf() 函数</h2><p>*<em>int scanf(const char <em>format, …)</em></em> 函数从标准输入流 <strong>stdin</strong> 读取输入，并根据提供的 <strong>format</strong> 来浏览输入。<br>*<em>int printf(const char <em>format, …)</em></em> 函数把输出写入到标准输出流 **stdout **，并根据提供的格式产生输出。<br><strong>format</strong> 可以是一个简单的常量字符串，但是您可以分别指定 %s、%d、%c、%f 等来输出或读取字符串、整数、字符或浮点数。还有许多其他可用的格式选项，可以根据需要使用。如需了解完整的细节，可以查看这些函数的参考手册。现在让我们通过下面这个简单的实例来加深理解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">( )</span> </span>&#123;<br> <br>   <span class="hljs-keyword">char</span> str[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">int</span> i;<br> <br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;Enter a value :&quot;</span>);<br>   <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %d&quot;</span>, str, &amp;i);<br> <br>   <span class="hljs-built_in">printf</span>( <span class="hljs-string">&quot;\nYou entered: %s %d &quot;</span>, str, i);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会等待您输入一些文本，当您输入一个文本并按下回车键时，程序会继续并读取输入，显示如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$./<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.out</span><br>Enter <span class="hljs-selector-tag">a</span> value :runoob <span class="hljs-number">123</span><br><br>You entered: runoob <span class="hljs-number">123</span> <br></code></pre></td></tr></table></figure><p>在这里，应当指出的是，scanf() 期待输入的格式与您给出的 %s 和 %d 相同，这意味着您必须提供有效的输入，比如 “string integer”，如果您提供的是 “string string” 或 “integer integer”，它会被认为是错误的输入。另外，在读取字符串时，只要遇到一个空格，scanf() 就会停止读取，所以 “this is test” 对 scanf() 来说是三个字符串。</p><h1 id="C-文件读写"><a href="#C-文件读写" class="headerlink" title="C 文件读写"></a>C 文件读写</h1><p>上一章我们讲解了 C 语言处理的标准输入和输出设备。本章我们将介绍 C 程序员如何创建、打开、关闭文本文件或二进制文件。<br>一个文件，无论它是文本文件还是二进制文件，都是代表了一系列的字节。C 语言不仅提供了访问顶层的函数，也提供了底层（OS）调用来处理存储设备上的文件。本章将讲解文件管理的重要调用。</p><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>您可以使用 <strong>fopen( )</strong> 函数来创建一个新的文件或者打开一个已有的文件，这个调用会初始化类型 <strong>FILE</strong> 的一个对象，类型 <strong>FILE</strong> 包含了所有用来控制流的必要的信息。下面是这个函数调用的原型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">FILE *<span class="hljs-title">fopen</span><span class="hljs-params">( <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * filename, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> * mode )</span></span>;<br></code></pre></td></tr></table></figure><p>在这里，<strong>filename</strong> 是字符串，用来命名文件，访问模式 <strong>mode</strong> 的值可以是下列值中的一个：</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>打开一个已有的文本文件，允许读取文件。</td></tr><tr><td>w</td><td>打开一个文本文件，允许写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会从文件的开头写入内容。如果文件存在，则该会被截断为零长度，重新写入。</td></tr><tr><td>a</td><td>打开一个文本文件，以追加模式写入文件。如果文件不存在，则会创建一个新文件。在这里，您的程序会在已有的文件内容中追加内容。</td></tr><tr><td>r+</td><td>打开一个文本文件，允许读写文件。</td></tr><tr><td>w+</td><td>打开一个文本文件，允许读写文件。如果文件已存在，则文件会被截断为零长度，如果文件不存在，则会创建一个新文件。</td></tr><tr><td>a+</td><td>打开一个文本文件，允许读写文件。如果文件不存在，则会创建一个新文件。读取会从文件的开头开始，写入则只能是追加模式。</td></tr></tbody></table><p>如果处理的是二进制文件，则需使用下面的访问模式来取代上面的访问模式：</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk"><span class="hljs-comment">&quot;rb&quot;</span>, <span class="hljs-comment">&quot;wb&quot;</span>, <span class="hljs-comment">&quot;ab&quot;</span>, <span class="hljs-comment">&quot;rb+&quot;</span>, <span class="hljs-comment">&quot;r+b&quot;</span>, <span class="hljs-comment">&quot;wb+&quot;</span>, <span class="hljs-comment">&quot;w+b&quot;</span>, <span class="hljs-comment">&quot;ab+&quot;</span>, <span class="hljs-comment">&quot;a+b&quot;</span><br></code></pre></td></tr></table></figure><h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><p>为了关闭文件，请使用 fclose( ) 函数。函数的原型如下：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">int<span class="hljs-meta"> fclose(</span> <span class="hljs-meta">FILE</span> <span class="hljs-comment">*fp );</span><br></code></pre></td></tr></table></figure><p>如果成功关闭文件，<strong>fclose( )</strong> 函数返回零，如果关闭文件时发生错误，函数返回 <strong>EOF</strong>。这个函数实际上，会清空缓冲区中的数据，关闭文件，并释放用于该文件的所有内存。EOF 是一个定义在头文件 <strong>stdio.h</strong> 中的常量。<br>C 标准库提供了各种函数来按字符或者以固定长度字符串的形式读写文件。</p><h2 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h2><p>下面是把字符写入到流中的最简单的函数：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fputc</span><span class="hljs-params">( <span class="hljs-keyword">int</span> c, FILE *fp )</span></span>;<br></code></pre></td></tr></table></figure><p>函数 <strong>fputc()</strong> 把参数 c 的字符值写入到 fp 所指向的输出流中。如果写入成功，它会返回写入的字符，如果发生错误，则会返回 <strong>EOF</strong>。您可以使用下面的函数来把一个以 null 结尾的字符串写入到流中：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fputs</span><span class="hljs-params">( <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *s, FILE *fp )</span></span>;<br></code></pre></td></tr></table></figure><p>函数 <strong>fputs()</strong> 把字符串 <strong>s</strong> 写入到 fp 所指向的输出流中。如果写入成功，它会返回一个非负值，如果发生错误，则会返回 <strong>EOF</strong>。您也可以使用 <strong>int fprintf(FILE <em>fp,const char <em>format, …)</em></em> 函数把一个字符串写入到文件中。尝试下面的实例：<br><em><strong>注意：</strong>请确保您有可用的 <strong>tmp</strong> 目录，如果不存在该目录，则需要在您的计算机上先创建该目录。</em><br>_</strong>/tmp** 一般是 Linux 系统上的临时目录，如果你在 Windows 系统上运行，则需要修改为本地环境中已存在的目录，例如:** C:\tmp<strong>、</strong>D:\tmp**等。_<br><em>​</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   FILE *fp = <span class="hljs-literal">NULL</span>;<br> <br>   fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;/tmp/test.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>);<br>   <span class="hljs-built_in">fprintf</span>(fp, <span class="hljs-string">&quot;This is testing for fprintf...\n&quot;</span>);<br>   <span class="hljs-built_in">fputs</span>(<span class="hljs-string">&quot;This is testing for fputs...\n&quot;</span>, fp);<br>   <span class="hljs-built_in">fclose</span>(fp);<br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会在 /tmp 目录中创建一个新的文件 <strong>test.txt</strong>，并使用两个不同的函数写入两行。接下来让我们来读取这个文件。</p><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><p>下面是从文件读取单个字符的最简单的函数：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">fgetc</span><span class="hljs-params">( FILE * fp )</span></span>;<br></code></pre></td></tr></table></figure><p><strong>fgetc()</strong> 函数从 fp 所指向的输入文件中读取一个字符。返回值是读取的字符，如果发生错误则返回 <strong>EOF</strong>。下面的函数允许您从流中读取一个字符串：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">fgets</span><span class="hljs-params">( <span class="hljs-keyword">char</span> *buf, <span class="hljs-keyword">int</span> n, FILE *fp )</span></span>;<br></code></pre></td></tr></table></figure><p>函数 <strong>fgets()</strong> 从 fp 所指向的输入流中读取 n - 1 个字符。它会把读取的字符串复制到缓冲区 <strong>buf</strong>，并在最后追加一个 <strong>null</strong> 字符来终止字符串。<br>如果这个函数在读取最后一个字符之前就遇到一个换行符 ‘\n’ 或文件的末尾 EOF，则只会返回读取到的字符，包括换行符。您也可以使用 **int fscanf(FILE <em>fp, const char <em>format, …)</em></em> 函数来从文件中读取字符串，但是在遇到第一个空格和换行符时，它会停止读取。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br> <br>int main()<br>&#123;<br>   FILE *<span class="hljs-built_in">fp</span> = NULL;<br>   char <span class="hljs-keyword">buff[255];</span><br><span class="hljs-keyword"></span> <br>   <span class="hljs-built_in">fp</span> = fopen(<span class="hljs-string">&quot;/tmp/test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>   fscanf(<span class="hljs-built_in">fp</span>, <span class="hljs-string">&quot;%s&quot;</span>, <span class="hljs-keyword">buff);</span><br><span class="hljs-keyword"></span>   printf(<span class="hljs-string">&quot;1: %s\n&quot;</span>, <span class="hljs-keyword">buff </span>);<br> <br>   fgets(<span class="hljs-keyword">buff, </span><span class="hljs-number">255</span>, (FILE*)<span class="hljs-built_in">fp</span>);<br>   printf(<span class="hljs-string">&quot;2: %s\n&quot;</span>, <span class="hljs-keyword">buff </span>);<br>   <br>   fgets(<span class="hljs-keyword">buff, </span><span class="hljs-number">255</span>, (FILE*)<span class="hljs-built_in">fp</span>);<br>   printf(<span class="hljs-string">&quot;3: %s\n&quot;</span>, <span class="hljs-keyword">buff </span>);<br>   fclose(<span class="hljs-built_in">fp</span>);<br> <br>&#125;<br>当上面的代码被编译和执行时，它会读取上一部分创建的文件，产生下列结果：<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">1:</span> This<br><span class="hljs-number">2</span>: is testing for fprintf...<br><span class="hljs-symbol"></span><br><span class="hljs-symbol">3:</span> This is testing for fputs...<br></code></pre></td></tr></table></figure><p>首先，<strong>fscanf()</strong> 方法只读取了 <strong>This</strong>，因为它在后边遇到了一个空格。其次，调用 <strong>fgets()</strong> 读取剩余的部分，直到行尾。最后，调用 <strong>fgets()</strong> 完整地读取第二行。</p><h2 id="二进制-I-O-函数"><a href="#二进制-I-O-函数" class="headerlink" title="二进制 I/O 函数"></a>二进制 I/O 函数</h2><p>下面两个函数用于二进制输入和输出：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">fread</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *ptr, <span class="hljs-keyword">size_t</span> size_of_elements, </span></span><br><span class="hljs-params"><span class="hljs-function">             <span class="hljs-keyword">size_t</span> number_of_elements, FILE *a_file)</span></span>;<br>              <br><span class="hljs-function"><span class="hljs-keyword">size_t</span> <span class="hljs-title">fwrite</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *ptr, <span class="hljs-keyword">size_t</span> size_of_elements, </span></span><br><span class="hljs-params"><span class="hljs-function">             <span class="hljs-keyword">size_t</span> number_of_elements, FILE *a_file)</span></span>;<br></code></pre></td></tr></table></figure><p>这两个函数都是用于存储块的读写 - 通常是数组或结构体。<br>​</p><h1 id="C-头文件"><a href="#C-头文件" class="headerlink" title="C 头文件"></a>C 头文件</h1><p>头文件是扩展名为 <strong>.h</strong> 的文件，包含了 C 函数声明和宏定义，被多个源文件中引用共享。有两种类型的头文件：程序员编写的头文件和编译器自带的头文件。<br>在程序中要使用头文件，需要使用 C 预处理指令 <strong>#include</strong> 来引用它。前面我们已经看过 <strong>stdio.h</strong> 头文件，它是编译器自带的头文件。<br>引用头文件相当于复制头文件的内容，但是我们不会直接在源文件中复制头文件的内容，因为这么做很容易出错，特别在程序是由多个源文件组成的时候。<br>A simple practice in C 或 C++ 程序中，建议把所有的常量、宏、系统全局变量和函数原型写在头文件中，在需要的时候随时引用这些头文件。</p><h2 id="引用头文件的语法"><a href="#引用头文件的语法" class="headerlink" title="引用头文件的语法"></a>引用头文件的语法</h2><p>使用预处理指令 <strong>#include</strong> 可以引用用户和系统头文件。它的形式有以下两种：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;file&gt;</span></span><br></code></pre></td></tr></table></figure><p>这种形式用于引用系统头文件。它在系统目录的标准列表中搜索名为 file 的文件。在编译源代码时，您可以通过 -I 选项把目录前置在该列表前。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;file&quot;</span></span><br></code></pre></td></tr></table></figure><p>这种形式用于引用用户头文件。它在包含当前文件的目录中搜索名为 file 的文件。在编译源代码时，您可以通过 -I 选项把目录前置在该列表前。</p><h2 id="引用头文件的操作"><a href="#引用头文件的操作" class="headerlink" title="引用头文件的操作"></a>引用头文件的操作</h2><p><strong>#include</strong> 指令会指示 C 预处理器浏览指定的文件作为输入。预处理器的输出包含了已经生成的输出，被引用文件生成的输出以及 <strong>#include</strong> 指令之后的文本输出。例如，如果您有一个头文件 header.h，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">test</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br></code></pre></td></tr></table></figure><p>和一个使用了头文件的主程序 _program.c_，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> x;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;header.h&quot;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">puts</span> (<span class="hljs-built_in">test</span> ());<br>&#125;<br></code></pre></td></tr></table></figure><p>编译器会看到如下的代码信息：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> x;<br><span class="hljs-function"><span class="hljs-keyword">char</span> *<span class="hljs-title">test</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-built_in">puts</span> (<span class="hljs-built_in">test</span> ());<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="只引用一次头文件"><a href="#只引用一次头文件" class="headerlink" title="只引用一次头文件"></a>只引用一次头文件</h2><p>如果一个头文件被引用两次，编译器会处理两次头文件的内容，这将产生错误。为了防止这种情况，标准的做法是把文件的整个内容放在条件编译语句中，如下：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> HEADER_FILE</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> HEADER_FILE</span><br><br>the entire <span class="hljs-built_in">header</span> file file<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>这种结构就是通常所说的包装器 <strong>#ifndef</strong>。当再次引用头文件时，条件为假，因为 HEADER_FILE 已定义。此时，预处理器会跳过文件的整个内容，编译器会忽略它。</p><h2 id="有条件引用"><a href="#有条件引用" class="headerlink" title="有条件引用"></a>有条件引用</h2><p>有时需要从多个不同的头文件中选择一个引用到程序中。例如，需要指定在不同的操作系统上使用的配置参数。您可以通过一系列条件来实现这点，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> SYSTEM_1</span><br>   <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;system_1.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> SYSTEM_2</span><br>   <span class="hljs-meta"># <span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;system_2.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> SYSTEM_3</span><br>   ...<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>但是如果头文件比较多的时候，这么做是很不妥当的，预处理器使用宏来定义头文件的名称。这就是所谓的<strong>有条件引用</strong>。它不是用头文件的名称作为 <strong>#include</strong> 的直接参数，您只需要使用宏名称代替即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYSTEM_H <span class="hljs-meta-string">&quot;system_1.h&quot;</span></span><br>...<br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> SYSTEM_H</span><br></code></pre></td></tr></table></figure><p>SYSTEM_H 会扩展，预处理器会查找 system_1.h，就像 <strong>#include</strong> 最初编写的那样。SYSTEM_H 可通过 -D 选项被您的 Makefile 定义。</p><h1 id="C-强制类型转换"><a href="#C-强制类型转换" class="headerlink" title="C 强制类型转换"></a>C 强制类型转换</h1><p>强制类型转换是把变量从一种类型转换为另一种数据类型。例如，如果您想存储一个 long 类型的值到一个简单的整型中，您需要把 long 类型强制转换为 int 类型。您可以使用<strong>强制类型转换运算符</strong>来把值显式地从一种类型转换为另一种类型，如下所示：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm">(type_name) expression<br></code></pre></td></tr></table></figure><p>请看下面的实例，使用强制类型转换运算符把一个整数变量除以另一个整数变量，得到一个浮点数：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">int</span> sum = <span class="hljs-number">17</span>, count = <span class="hljs-number">5</span>;<br>   <span class="hljs-keyword">double</span> mean;<br> <br>   mean = (<span class="hljs-keyword">double</span>) sum / count;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value of mean : %f\n&quot;</span>, mean );<br> <br>&#125;<br><br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>Value of mean : <span class="hljs-number">3.400000</span><br></code></pre></td></tr></table></figure><p>这里要注意的是强制类型转换运算符的优先级大于除法，因此 <strong>sum</strong> 的值首先被转换为 <strong>double</strong> 型，然后除以 count，得到一个类型为 double 的值。<br>类型转换可以是隐式的，由编译器自动执行，也可以是显式的，通过使用<strong>强制类型转换运算符</strong>来指定。在编程时，有需要类型转换的时候都用上强制类型转换运算符，是一种良好的编程习惯。</p><h2 id="整数提升"><a href="#整数提升" class="headerlink" title="整数提升"></a>整数提升</h2><p>整数提升是指把小于 <strong>int</strong> 或 <strong>unsigned int</strong> 的整数类型转换为 <strong>int</strong> 或 <strong>unsigned int</strong> 的过程。请看下面的实例，在 int 中添加一个字符：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">int</span>  i = <span class="hljs-number">17</span>;<br>   <span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span>; <span class="hljs-comment">/* ascii 值是 99 */</span><br>   <span class="hljs-keyword">int</span> sum;<br> <br>   sum = i + c;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value of sum : %d\n&quot;</span>, sum );<br> <br>&#125;<br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>Value of sum : <span class="hljs-number">116</span><br></code></pre></td></tr></table></figure><p>在这里，sum 的值为 116，因为编译器进行了整数提升，在执行实际加法运算时，把 ‘c’ 的值转换为对应的 ascii 值。</p><h2 id="常用的算术转换"><a href="#常用的算术转换" class="headerlink" title="常用的算术转换"></a>常用的算术转换</h2><p><strong>常用的算术转换</strong>是隐式地把值强制转换为相同的类型。编译器首先执行<strong>整数提升</strong>，如果操作数类型不同，则它们会被转换为下列层次中出现的最高层次的类型：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2681770/1628877105962-b2775ea3-394a-460c-885d-d5f06c9eabff.png#clientId=u54f86d65-c4b2-4&from=paste&id=ua88dc2c6&margin=%5Bobject%20Object%5D&originHeight=491&originWidth=219&originalType=url&ratio=1&status=done&style=none&taskId=ub0706870-bf53-4e4b-9a99-781638a275e"><br>常用的算术转换不适用于赋值运算符、逻辑运算符 &amp;&amp; 和 ||。让我们看看下面的实例来理解这个概念：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">int</span>  i = <span class="hljs-number">17</span>;<br>   <span class="hljs-keyword">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span>; <span class="hljs-comment">/* ascii 值是 99 */</span><br>   <span class="hljs-keyword">float</span> sum;<br> <br>   sum = i + c;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value of sum : %f\n&quot;</span>, sum );<br> <br>&#125;<br><br>当上面的代码被编译和执行时，它会产生下列结果：<br><br>Value of sum : <span class="hljs-number">116.000000</span><br></code></pre></td></tr></table></figure><p>在这里，c 首先被转换为整数，但是由于最后的值是 float 型的，所以会应用常用的算术转换，编译器会把 i 和 c 转换为浮点型，并把它们相加得到一个浮点数。<br>​</p><h1 id="C-内存管理"><a href="#C-内存管理" class="headerlink" title="C 内存管理"></a>C 内存管理</h1><p>本章将讲解 C 中的动态内存管理。C 语言为内存的分配和管理提供了几个函数。这些函数可以在 <strong>&lt;stdlib.h&gt;</strong> 头文件中找到。</p><table><thead><tr><th>序号</th><th>函数和描述</th></tr></thead><tbody><tr><td>1</td><td>*<em>void <em>calloc(int num, int size);</em></em></td></tr><tr><td>在内存中动态地分配 num 个长度为 size 的连续空间，并将每一个字节都初始化为 0。所以它的结果是分配了 num*size 个字节长度的内存空间，并且每个字节的值都是0。</td><td></td></tr><tr><td>2</td><td>*<em>void free(void <em>address);</em></em></td></tr><tr><td>该函数释放 address 所指向的内存块,释放的是动态分配的内存空间。</td><td></td></tr><tr><td>3</td><td>*<em>void <em>malloc(int num);</em></em></td></tr><tr><td>在堆区分配一块指定大小的内存空间，用来存放数据。这块内存空间在函数执行完成后不会被初始化，它们的值是未知的。</td><td></td></tr><tr><td>4</td><td>**void <em>realloc(void <em>address, int newsize);</em></em></td></tr><tr><td>该函数重新分配内存，把内存扩展到 <strong>newsize</strong>。</td><td></td></tr></tbody></table><p><strong>注意：</strong>void * 类型表示未确定类型的指针。C、C++ 规定 void * 类型可以通过类型转换强制转换为任何其它类型的指针。</p><h2 id="动态分配内存"><a href="#动态分配内存" class="headerlink" title="动态分配内存"></a>动态分配内存</h2><p>编程时，如果您预先知道数组的大小，那么定义数组时就比较容易。例如，一个存储人名的数组，它最多容纳 100 个字符，所以您可以定义数组，如下所示：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">char</span> <span class="hljs-keyword">name</span>[<span class="hljs-number">100</span>];<br></code></pre></td></tr></table></figure><p>但是，如果您预先不知道需要存储的文本长度，例如您想存储有关一个主题的详细描述。在这里，我们需要定义一个指针，该指针指向未定义所需内存大小的字符，后续再根据需求来分配内存，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">char</span> name[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">char</span> *description;<br> <br>   <span class="hljs-built_in">strcpy</span>(name, <span class="hljs-string">&quot;Zara Ali&quot;</span>);<br> <br>   <span class="hljs-comment">/* 动态分配内存 */</span><br>   description = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>( <span class="hljs-number">200</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">char</span>) );<br>   <span class="hljs-keyword">if</span>( description == <span class="hljs-literal">NULL</span> )<br>   &#123;<br>      <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Error - unable to allocate required memory\n&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">else</span><br>   &#123;<br>      <span class="hljs-built_in">strcpy</span>( description, <span class="hljs-string">&quot;Zara ali a DPS student in class 10th&quot;</span>);<br>   &#125;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Name = %s\n&quot;</span>, name );<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Description: %s\n&quot;</span>, description );<br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Name = Zara Ali<br>Description: Zara ali a DPS student <span class="hljs-keyword">in</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">10th</span><br></code></pre></td></tr></table></figure><p>上面的程序也可以使用 <strong>calloc()</strong> 来编写，只需要把 malloc 替换为 calloc 即可，如下所示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">calloc</span>(<span class="hljs-number">200</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">char</span>));<br></code></pre></td></tr></table></figure><p>当动态分配内存时，您有完全控制权，可以传递任何大小的值。而那些预先定义了大小的数组，一旦定义则无法改变大小。</p><h2 id="重新调整内存的大小和释放内存"><a href="#重新调整内存的大小和释放内存" class="headerlink" title="重新调整内存的大小和释放内存"></a>重新调整内存的大小和释放内存</h2><p>当程序退出时，操作系统会自动释放所有分配给程序的内存，但是，建议您在不需要内存时，都应该调用函数 <strong>free()</strong> 来释放内存。<br>或者，您可以通过调用函数 <strong>realloc()</strong> 来增加或减少已分配的内存块的大小。让我们使用 realloc() 和 free() 函数，再次查看上面的实例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-keyword">char</span> name[<span class="hljs-number">100</span>];<br>   <span class="hljs-keyword">char</span> *description;<br> <br>   <span class="hljs-built_in">strcpy</span>(name, <span class="hljs-string">&quot;Zara Ali&quot;</span>);<br> <br>   <span class="hljs-comment">/* 动态分配内存 */</span><br>   description = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>( <span class="hljs-number">30</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">char</span>) );<br>   <span class="hljs-keyword">if</span>( description == <span class="hljs-literal">NULL</span> )<br>   &#123;<br>      <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Error - unable to allocate required memory\n&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">else</span><br>   &#123;<br>      <span class="hljs-built_in">strcpy</span>( description, <span class="hljs-string">&quot;Zara ali a DPS student.&quot;</span>);<br>   &#125;<br>   <span class="hljs-comment">/* 假设您想要存储更大的描述信息 */</span><br>   description = (<span class="hljs-keyword">char</span> *) <span class="hljs-built_in">realloc</span>( description, <span class="hljs-number">100</span> * <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(<span class="hljs-keyword">char</span>) );<br>   <span class="hljs-keyword">if</span>( description == <span class="hljs-literal">NULL</span> )<br>   &#123;<br>      <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Error - unable to allocate required memory\n&quot;</span>);<br>   &#125;<br>   <span class="hljs-keyword">else</span><br>   &#123;<br>      <span class="hljs-built_in">strcat</span>( description, <span class="hljs-string">&quot;She is in class 10th&quot;</span>);<br>   &#125;<br>   <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Name = %s\n&quot;</span>, name );<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Description: %s\n&quot;</span>, description );<br> <br>   <span class="hljs-comment">/* 使用 free() 函数释放内存 */</span><br>   <span class="hljs-built_in">free</span>(description);<br>&#125;<br></code></pre></td></tr></table></figure><p>当上面的代码被编译和执行时，它会产生下列结果：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">Name = Zara Ali<br>Description: Zara ali a DPS student.She <span class="hljs-keyword">is</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">10th</span><br></code></pre></td></tr></table></figure><p>您可以尝试一下不重新分配额外的内存，strcat() 函数会生成一个错误，因为存储 description 时可用的内存不足。</p><h1 id="C-递归"><a href="#C-递归" class="headerlink" title="C 递归"></a>C 递归</h1><p>递归指的是在函数的定义中使用函数自身的方法。<br><em>举个例子：<br>从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？”从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？’从前有座山，山里有座庙，庙里有个老和尚，正在给小和尚讲故事呢！故事是什么呢？……’”</em><br>语法格式如下：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-literal">void</span> recursion()<br>&#123;<br>   statements;<br>   <span class="hljs-params">...</span> <span class="hljs-params">...</span> <span class="hljs-params">...</span><br>   recursion(); <span class="hljs-comment">/* 函数调用自身 */</span><br>   <span class="hljs-params">...</span> <span class="hljs-params">...</span> <span class="hljs-params">...</span><br>&#125;<br> <br>int main()<br>&#123;<br>   recursion();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>软件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>智能车总结-Aurora队</title>
    <link href="/2021/08/12/Aurora/"/>
    <url>/2021/08/12/Aurora/</url>
    
    <content type="html"><![CDATA[<p><a name="ZVacC"></a></p><h1 id="备赛历程2021年8月12日夜"><a href="#备赛历程2021年8月12日夜" class="headerlink" title="备赛历程2021年8月12日夜"></a>备赛历程2021年8月12日夜</h1><p>   首先就是寒假学习了一些基本的知识，然后把需要的板子都画了一下<del>（只是画了）</del>，最开始采用了供电与其他的部分分离的方案，但是由于最初缺乏经验，没有寻找和解决问题的能力，所以一开始磕磕绊绊的，烧了不少东西，最终有了一块勉强可以用的板子，然后是漫长的等待，因为回来的时候有一版板子忘带了，等快递等了10天（大家千万不要发申通快递，忙的时候要人命）等待的时候去焊接了电驱板，，发现板子一接电就烧驱动芯片，找了十天之后最后发现封装（ir2104与ir2184的引脚不同，不可以通用）选错了，于是重新画了电驱，兴冲冲拿回来按模块焊接测试，一接电又烧了，在仔细对照了封装之后，发现没有问题，于是仔细把数据手册又读了一遍，发现了些许的不同，ir2184的SD引脚要求输入电压最大是逻辑地＋5V，也就是5v，而ir2104没这个限制，它可以达到vcc，也就是我板子上的12v。于又重新画了一版。<br />   这个时候到了主控板，发现主控板的晶振选型不对，把无源晶振买成了有源的，板子上画的是无源的（吐血），然后准备重画一版，而且由于焊接技术的问题，我焊废了好几块板子，焊废了几个芯片。这个时候我的队友提议换芯片，决定采用另一款芯片，我决定不影响队伍进度，直接是使用核心板，然后由于电源板比较费，最后决定废弃这个方案，将电源集中到主控板上，在画好焊接过程中一切安稳，于是这个板子到最后都没有进行更改，只是选用的稳压芯片出现了负载过多降压的问题，最后发觉应该和电感有关，查阅后发现这个电感的额定电流为800mA，而我的DC芯片输出最大电流为3A，更换了电感比较良好，然后过了一段时间，发现又出现了这个问题，对比另一辆车的板子，在外设相符的情况下，没有出现这种问题，于是看了看芯片的厂商，发现贵的那个反而出问题多，果断换成另一个，再没出现过这个问题。<br />   然后到了运放板上，一开始采用了lmv358一级放大的方案，后面才发觉它的增益带宽积其实不足以支持20Khz的电磁波信号放大多少的，会失真，而且在和队友商议一段时间以后，决定换成运放与电感分离的方案。，然后发觉这个方案不是很理想，最后将谐振放大电路放在一个单独的电感板上，采用了gh1.25的接口（记住这玩意，我后头要吐槽），然后第一个比较正确的运放就出现了，可以正常使用，然后开始了其他的改装，观察其他的同学的板子，发现其上一级放大与二级放大中间有一个串联的电容，在查询一些资料并询问同学后，没有得到很好的解释，最后还是尝试画了一个试一试效果，结果完全没法导通，于是最后就放弃了。期间更换了很多的运放芯片，有5种左右吧，然出现了问题，运放芯片经常性的烧毁，在和学长简单的交流后，发现运放输入端其实可以加入保护的，尤其各种运放的输入其实负电压最多是-0.3V，也就是输入过多的可能会烧毁，于是加了钳位保护（期前尝试将整流搬到第一级输入端，发现二极管管压降不允许），奇特的是lm358没有烧毁过（lm358yyds）。然后gh1.25就比较内啥了，队友使用车辆下手比较重（doge），接口很容易松，而且由于焊盘的面积不够大了，焊接过后其实很容易被扯下来，最后由于焊盘被扯掉，我重焊了好几次，后期大部分的问题就是焊盘和接口松了然后接触不良的问题，比较容易解决但是很烦人，以后再也不用这玩意了，主控板的开关也是很令人头疼的问题，多次开关之后就会断掉，后期调车比较频繁，隔几天就坏了，就要更换。<br />  然后等了零件，给直立车用的电驱出了问题，硬件mos管开关的时间问题，导致直立环很软，在行驶过程中很容易坏掉，再经过测量后发现还是有所差距，而且这个量无法进行准确预算，只能多找几种mos管进行测试，最后盯上了新生板的mos管，使用后很不错，但是由于立创没货，只能从新生板上拆了_<strong>（被迫）。</strong><em><br /></em>**  **_以上就是画板子的经历，然后说说队友吧，我组队的都是很强的软件选手，当时做硬件也是觉得自己能力不太够去替代他们做软件，事实也证明了这一点，他们总是会想出一些比较新奇但却又符合规律的想法，然后付诸实践，而且调试能力都很强，因为我个人原因对于进度拖延而不怪罪，和我一起做智能车，实属不易，在此感谢。对于队友间的交流，还是很融洽的，但是由于软硬分的比较开，导致很多时候我说的他们听不明白，他们说的我听不明白，间隔还是比较大的，但是这也更考验了队友间的信任，再次感谢吧。</p><p><a name="WjgxJ"></a></p><h1 id=""><a href="#" class="headerlink" title=""></a></h1><p><a name="WfusG"></a></p><h1 id="对实验室的建议（待完善）"><a href="#对实验室的建议（待完善）" class="headerlink" title="对实验室的建议（待完善）"></a>对实验室的建议（待完善）</h1><p>  一个就是例会，我觉得现在的例会可能有点水了，大家大部分只是说说近期干了什么，好像例会只是一个检查，大家说一些事情证明自己没划水，首先我觉得目前智能车各组分的比较开，而公共的知识点大家可能也不太用交流，我觉可以变成大家总结自己的学习内容并应用，然后在例会上简短说明可以应用的方向，并总结在语雀上供大家学习。<br />​</p><p>​<br /><br><a name="Gm4vC"></a></p><h1 id="未来规划"><a href="#未来规划" class="headerlink" title="未来规划"></a>未来规划</h1><p>  还是决定跟着实验室的培训走，然后发觉自己的嵌入式写代码的能力有些欠缺，还是要提高一下，至少能够写一些简单的测试程序去测试板子。<br />  然后跟着自己的兴趣走吧。<br><a name="RbzLE"></a></p><h1 id="技术个人总结（13号再补充，累了）"><a href="#技术个人总结（13号再补充，累了）" class="headerlink" title="技术个人总结（13号再补充，累了）"></a>技术个人总结（13号再补充，累了）</h1>]]></content>
    
    
    <categories>
      
      <category>总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vanassian</title>
    <link href="/2021/08/12/xx/"/>
    <url>/2021/08/12/xx/</url>
    
    <content type="html"><![CDATA[<h1 id="目前菜狗一只"><a href="#目前菜狗一只" class="headerlink" title="目前菜狗一只"></a>目前菜狗一只</h1><p>跪拜绍俊巨巨</p><h1 id="目前任务"><a href="#目前任务" class="headerlink" title="目前任务"></a>目前任务</h1><p>1.软件<br>     - 学习学习单片机，提高调试能力<br>     - 学c++，python<br>     - 学学linux<br>2.硬件<br>     - 学学各种运放<br>     - 画点系统板<br>     - 学学电机相关的知识</p>]]></content>
    
    
    <categories>
      
      <category>无意义狂怒</category>
      
    </categories>
    
    
    <tags>
      
      <tag>菜狗介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对于FOC的探索</title>
    <link href="/2021/08/12/%E6%8A%80%E6%9C%AF-1/"/>
    <url>/2021/08/12/%E6%8A%80%E6%9C%AF-1/</url>
    
    <content type="html"><![CDATA[<h1 id="供上稚辉君神文"><a href="#供上稚辉君神文" class="headerlink" title="供上稚辉君神文"></a><a href="https://zhuanlan.zhihu.com/p/147659820">供上稚辉君神文</a></h1>]]></content>
    
    
    <categories>
      
      <category>软硬</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电机驱动</tag>
      
      <tag>PCB</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
